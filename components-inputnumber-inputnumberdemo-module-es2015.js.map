{"version":3,"sources":["./src/app/showcase/components/inputnumber/inputnumberdemo.html","./src/app/components/dynamicdialog/public_api.ts","./src/app/components/inputnumber/inputnumber.ts","./src/app/components/inputnumber/public_api.ts","./src/app/components/public_api.ts","./src/app/showcase/components/inputnumber/inputnumberdemo-routing.module.ts","./src/app/showcase/components/inputnumber/inputnumberdemo.module.ts","./src/app/showcase/components/inputnumber/inputnumberdemo.ts"],"names":[],"mappings":"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","file":"components-inputnumber-inputnumberdemo-module-es2015.js","sourcesContent":["export default \"<div class=\\\"content-section introduction\\\">\\n    <div>\\n        <span class=\\\"feature-title\\\">InputNumber</span>\\n        <span>InputNumber is an input component to provide numerical input.</span>\\n    </div>\\n</div>\\n\\n<div class=\\\"content-section implementation\\\">\\n    <h3>Numerals</h3>\\n    <div class=\\\"p-grid ui-fluid\\\">\\n        <div class=\\\"p-col-12 p-md-3\\\">\\n            Integer Only\\n            <p-inputNumber [(ngModel)]=\\\"value1\\\">\\n            </p-inputNumber>\\n        </div>\\n        <div class=\\\"p-col-12 p-md-3\\\">\\n            Without Grouping\\n            <p-inputNumber [(ngModel)]=\\\"value2\\\" mode=\\\"decimal\\\" [useGrouping]=\\\"false\\\">\\n            </p-inputNumber>\\n        </div>\\n        <div class=\\\"p-col-12 p-md-3\\\">\\n            Min-Max Fraction Digits\\n            <p-inputNumber [(ngModel)]=\\\"value3\\\" mode=\\\"decimal\\\" [minFractionDigits]=\\\"2\\\" [maxFractionDigits]=\\\"5\\\">\\n            </p-inputNumber>\\n        </div>\\n        <div class=\\\"p-col-12 p-md-3\\\">\\n            Min-Max Boundaries\\n            <p-inputNumber [(ngModel)]=\\\"value4\\\" mode=\\\"decimal\\\" [min]=\\\"0\\\" [max]=\\\"100\\\">\\n            </p-inputNumber>\\n        </div>\\n        <div class=\\\"p-col-12 p-md-3\\\">\\n            User Locale\\n            <p-inputNumber [(ngModel)]=\\\"value5\\\" [minFractionDigits]=\\\"2\\\">\\n            </p-inputNumber>\\n        </div>\\n        <div class=\\\"p-col-12 p-md-3\\\">\\n            United State Locale\\n            <p-inputNumber [(ngModel)]=\\\"value6\\\" mode=\\\"decimal\\\" locale=\\\"en-US\\\" [minFractionDigits]=\\\"2\\\">\\n            </p-inputNumber>\\n        </div>\\n        <div class=\\\"p-col-12 p-md-3\\\">\\n            German Locale\\n            <p-inputNumber [(ngModel)]=\\\"value7\\\" mode=\\\"decimal\\\" locale=\\\"de-DE\\\" [minFractionDigits]=\\\"2\\\">\\n            </p-inputNumber>\\n        </div>\\n        <div class=\\\"p-col-12 p-md-3\\\">\\n            Indian Locale\\n            <p-inputNumber [(ngModel)]=\\\"value8\\\" mode=\\\"decimal\\\" locale=\\\"en-IN\\\" [minFractionDigits]=\\\"2\\\">\\n            </p-inputNumber>\\n        </div>\\n    </div>\\n    <h3>Currency</h3>\\n    <div class=\\\"p-grid ui-fluid\\\">\\n        <div class=\\\"p-col-12 p-md-3\\\">\\n            United States\\n            <p-inputNumber [(ngModel)]=\\\"value9\\\" mode=\\\"currency\\\" currency=\\\"USD\\\" locale=\\\"en-US\\\">\\n            </p-inputNumber>\\n        </div>\\n        <div class=\\\"p-col-12 p-md-3\\\">\\n            Germany\\n            <p-inputNumber [(ngModel)]=\\\"value10\\\" mode=\\\"currency\\\" currency=\\\"EUR\\\" locale=\\\"de-DE\\\">\\n            </p-inputNumber>\\n        </div>\\n        <div class=\\\"p-col-12 p-md-3\\\">\\n            India\\n            <p-inputNumber [(ngModel)]=\\\"value11\\\" mode=\\\"currency\\\" currency=\\\"INR\\\" currencyDisplay=\\\"code\\\" locale=\\\"en-IN\\\">\\n            </p-inputNumber>\\n        </div>\\n        <div class=\\\"p-col-12 p-md-3\\\">\\n            Japan\\n            <p-inputNumber [(ngModel)]=\\\"value12\\\" mode=\\\"currency\\\" currency=\\\"JPY\\\" locale=\\\"jp-JP\\\">\\n            </p-inputNumber>\\n        </div>\\n    </div>\\n    <h3>Prefix and Suffix</h3>\\n    <div class=\\\"p-grid ui-fluid\\\">\\n        <div class=\\\"p-col-12 p-md-3\\\">\\n            Mile\\n            <p-inputNumber [(ngModel)]=\\\"value13\\\" suffix=\\\" mi\\\">\\n            </p-inputNumber>\\n        </div>\\n        <div class=\\\"p-col-12 p-md-3\\\">\\n            Percent\\n            <p-inputNumber [(ngModel)]=\\\"value14\\\" prefix=\\\"%\\\">\\n            </p-inputNumber>\\n        </div>\\n        <div class=\\\"p-col-12 p-md-3\\\">\\n            Expiry\\n            <p-inputNumber [(ngModel)]=\\\"value15\\\" prefix=\\\"Expires in \\\" suffix=\\\" days\\\">\\n            </p-inputNumber>\\n        </div>\\n        <div class=\\\"p-col-12 p-md-3\\\">\\n            Temperature\\n            <p-inputNumber [(ngModel)]=\\\"value16\\\" prefix=\\\"&uarr; \\\" suffix=\\\"℃\\\" [min]=\\\"0\\\" [max]=\\\"40\\\">\\n            </p-inputNumber>\\n        </div>\\n    </div>\\n    <h3>Buttons</h3>\\n    <div class=\\\"p-grid ui-fluid\\\">\\n        <div class=\\\"p-col-12 p-md-3\\\">\\n            Stacked\\n            <p-inputNumber [(ngModel)]=\\\"value17\\\" [showButtons]=\\\"true\\\" mode=\\\"currency\\\" currency=\\\"USD\\\">\\n            </p-inputNumber>\\n        </div>\\n        <div class=\\\"p-col-12 p-md-3\\\">\\n            Horizontal with Step\\n            <p-inputNumber [(ngModel)]=\\\"value18\\\" [showButtons]=\\\"true\\\" buttonLayout=\\\"horizontal\\\" spinnerMode=\\\"horizontal\\\" [step]=\\\"0.25\\\"\\n            decrementButtonClass=\\\"ui-button-danger\\\" incrementButtonClass=\\\"ui-button-success\\\" incrementButtonIcon=\\\"pi pi-plus\\\" decrementButtonIcon=\\\"pi pi-minus\\\" mode=\\\"currency\\\" currency=\\\"EUR\\\">\\n            </p-inputNumber>\\n        </div>\\n        <div class=\\\"p-col-12 p-md-3\\\">\\n            <div>Vertical</div>\\n            <p-inputNumber [(ngModel)]=\\\"value19\\\" [showButtons]=\\\"true\\\" buttonLayout=\\\"vertical\\\" spinnerMode=\\\"vertical\\\"\\n            decrementButtonClass=\\\"ui-button-secondary\\\" incrementButtonClass=\\\"ui-button-secondary\\\" incrementButtonIcon=\\\"pi pi-plus\\\" decrementButtonIcon=\\\"pi pi-minus\\\">\\n            </p-inputNumber>\\n        </div>\\n        <div class=\\\"p-col-12 p-md-3\\\">\\n            Min-Max Boundaries\\n            <p-inputNumber [(ngModel)]=\\\"value20\\\" mode=\\\"decimal\\\" [showButtons]=\\\"true\\\" [min]=\\\"0\\\" [max]=\\\"100\\\">\\n            </p-inputNumber>\\n        </div>\\n    </div>\\n</div>\\n\\n<div class=\\\"content-section documentation\\\">\\n    <p-tabView>\\n        <p-tabPanel header=\\\"Documentation\\\">\\n            <h3>Import</h3>\\n<pre>\\n<code class=\\\"language-typescript\\\" pCode ngNonBindable>\\nimport &#123;InputNumberModule&#125; from 'primeng/inputnumber';\\n</code>\\n</pre>\\n\\n            <h3>Getting Started</h3>\\n            <p>InputNumber is used with the standard v-model directive. Component always provides a number type although formatting on the input is a string.</p>   \\n<pre>\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\n&lt;p-inputNumber [(ngModel)]=\\\"val\\\"&gt;&lt;/p-inputNumber&gt;\\n</code>\\n</pre>\\n\\n            <h3>Decimal Mode</h3>\\n            <p>Format is defined using the <i>mode</i> property, \\\"decimal\\\" is the default value allowing only integers when there is no other configuration.</p>   \\n<pre>\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\n&lt;p-inputNumber [(ngModel)]=\\\"val\\\" mode=\\\"decimal\\\"&gt;&lt;/p-inputNumber&gt;\\n</code>\\n</pre>\\n            <p>Fractions are configured with the <i>minFractionDigits</i> property. Optionally <i>maxFractionDigits</i> can be used to defined a boundary for the maximum digits.</p>\\n<pre>\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\n&lt;p-inputNumber [(ngModel)]=\\\"val\\\" mode=\\\"decimal\\\" [minFractionDigits]=\\\"2\\\"&gt;&lt;/p-inputNumber&gt;\\n&lt;p-inputNumber [(ngModel)]=\\\"val\\\" mode=\\\"decimal\\\" [minFractionDigits]=\\\"2\\\" [maxFracionDigits]=\\\"2\\\"&gt;&lt;/p-inputNumber&gt;\\n</code>\\n</pre>\\n\\n            <p><i>locale</i> option is available to set the localization information such as grouping and decimal symbols where default value is the browser locale. Locales are defined per <a href=\\\"https://tools.ietf.org/html/rfc5646\\\">BCP Language Tag</a>.</p>\\n<pre>\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\nUser Locale\\n&lt;p-inputNumber [(ngModel)]=\\\"value1\\\" mode=\\\"decimal\\\" [minFractionDigits]=\\\"2\\\"&gt;&lt;/p-inputNumber&gt;\\n\\nUnited State Locale\\n&lt;p-inputNumber [(ngModel)]=\\\"value2\\\" mode=\\\"decimal\\\" locale=\\\"en-US\\\" [minFractionDigits]=\\\"2\\\"&gt;&lt;/p-inputNumber&gt;\\n\\nGerman Locale\\n&lt;p-inputNumber [(ngModel)]=\\\"value3\\\" mode=\\\"decimal\\\" locale=\\\"de-DE\\\" [minFractionDigits]=\\\"2\\\"&gt;&lt;/p-inputNumber&gt;\\n\\nIndian Locale\\n&lt;p-inputNumber [(ngModel)]=\\\"value4\\\" mode=\\\"decimal\\\" locale=\\\"en-IN\\\" [minFractionDigits]=\\\"2\\\"&gt;&lt;/p-inputNumber&gt;\\n</code>\\n</pre>\\n\\n            <h3>Currency</h3>\\n            <p>Currency formatting is specified by setting the <i>mode</i> option to currency and <i>currency</i> property. In addition <i>currencyDisplay</i> option\\n                allows how the currency is displayed, valid values are \\\"symbol\\\" (default) or \\\"code\\\".</p> \\n<pre>\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\nUser Locale\\n&lt;p-inputNumber [(ngModel)]=\\\"value1\\\" mode=\\\"currency\\\"&gt;&lt;/p-inputNumber&gt;\\n\\nUnited State Locale\\n&lt;p-inputNumber [(ngModel)]=\\\"value2\\\" mode=\\\"currency\\\" currency=\\\"USD\\\" locale=\\\"en-US\\\"&gt;&lt;/p-inputNumber&gt;\\n\\nGerman Locale\\n&lt;p-inputNumber [(ngModel)]=\\\"value3\\\" mode=\\\"currency\\\" currency=\\\"EUR\\\" locale=\\\"de-DE\\\"&gt;&lt;/p-inputNumber&gt;\\n\\nIndian Locale\\n&lt;p-inputNumber [(ngModel)]=\\\"value4\\\" mode=\\\"currency\\\" currency=\\\"INR\\\" locale=\\\"en-IN\\\"&gt;&lt;/p-inputNumber&gt;\\n</code>\\n</pre>\\n\\n            <h3>Prefix and Suffix</h3>\\n            <p>Custom texts e.g. units can be placed before or after the input section with the <i>prefix</i> and <i>suffix</i> properties.</p> \\n<pre>\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\nMile\\n&lt;p-inputNumber [(ngModel)]=\\\"value1\\\" suffix=\\\" mi\\\"&gt;&lt;/p-inputNumber&gt;\\n\\nPercent\\n&lt;p-inputNumber [(ngModel)]=\\\"value2\\\" prefix=\\\"%\\\"&gt;&lt;/p-inputNumber&gt;\\n\\nExpiry\\n&lt;p-inputNumber [(ngModel)]=\\\"value3\\\" prefix=\\\"Expires in \\\" suffix=\\\" days\\\"&gt;&lt;/p-inputNumber&gt;\\n\\nTemperature\\n&lt;p-inputNumber [(ngModel)]=\\\"value4\\\" prefix=\\\"&uarr; \\\" suffix=\\\"℃\\\" :min=\\\"0\\\" :max=\\\"40\\\"&gt;&lt;/p-inputNumber&gt;\\n</code>\\n</pre>\\n\\n            <h3>Buttons</h3>\\n            <p>Spinner buttons is enabled using the <i>showButtons</i> options and layout is defined with the <i>buttonLayout</i>. Default value is \\\"stacked\\\" whereas\\n                \\\"horizontal\\\" and \\\"stacked\\\" are alternatives. Note that even there are no buttons, up and down arrow keys can be used to spin the values with keyboard.</p> \\n<pre>\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\nStacked\\n&lt;p-inputNumber [(ngModel)]=\\\"value1\\\" [showButtons]=\\\"true\\\" mode=\\\"currency\\\" currency=\\\"USD\\\"&gt;&lt;/p-inputNumber&gt;\\n\\nHorizontal\\n&lt;p-inputNumber [(ngModel)]=\\\"value2\\\" [showButtons]=\\\"true\\\" buttonLayout=\\\"horizontal\\\" spinnerMode=\\\"horizontal\\\"\\n    decrementButtonClass=\\\"ui-button-danger\\\" incrementButtonClass=\\\"ui-button-success\\\" incrementButtonIcon=\\\"pi pi-plus\\\" decrementButtonIcon=\\\"pi pi-minus\\\" mode=\\\"currency\\\" currency=\\\"EUR\\\"&gt;&lt;/p-inputNumber&gt;\\n\\nVertical\\n&lt;p-inputNumber [(ngModel)]=\\\"value3\\\" mode=\\\"decimal\\\" [showButtons]=\\\"true\\\" buttonLayout=\\\"vertical\\\" spinnerMode=\\\"vertical\\\"\\n    decrementButtonClass=\\\"ui-button-secondary\\\" incrementButtonClass=\\\"ui-button-secondary\\\" incrementButtonIcon=\\\"pi pi-plus\\\" decrementButtonIcon=\\\"pi pi-minus\\\"&gt;&lt;/p-inputNumber&gt;\\n</code>\\n</pre>\\n\\n            <h3>Step</h3>\\n            <p>Step factor is 1 by default and can be customized with <i>step</i> option.</p> \\n<pre>\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\n&lt;p-inputNumber [(ngModel)]=\\\"val\\\" [step]=\\\"0.25\\\"&gt;&lt;/p-inputNumber&gt;\\n</code>\\n</pre>\\n    \\n            <h3>Min and Max Boundaries</h3>\\n            <p>Value to be entered can be restricted by configuring the <i>min</i> and <i>max</i> options.</p>\\n<pre>\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\n&lt;p-inputNumber [(ngModel)]=\\\"val\\\" [min]=\\\"0\\\" [max]=\\\"100\\\"&gt;&lt;/p-inputNumber&gt;\\n</code>\\n</pre>\\n\\n            <h3>Properties</h3>\\n            <div class=\\\"doc-tablewrapper\\\">\\n                <table class=\\\"doc-table\\\">\\n                    <thead>\\n                        <tr>\\n                            <th>Name</th>\\n                            <th>Type</th>\\n                            <th>Default</th>\\n                            <th>Description</th>\\n                        </tr>\\n                    </thead>\\n                    <tbody>\\n                        <tr>\\n                            <td>value</td>\\n                            <td>number</td>\\n                            <td>null</td>\\n                            <td>Value of the component.</td>\\n                        </tr>\\n                        <tr>\\n                            <td>format</td>\\n                            <td>boolean</td>\\n                            <td>true</td>\\n                            <td>Whether to format the value.</td>\\n                        </tr>\\n                        <tr>\\n                            <td>showButtons</td>\\n                            <td>boolean</td>\\n                            <td>false</td>\\n                            <td>Displays spinner buttons.</td>\\n                        </tr>\\n                        <tr>\\n                            <td>buttonLayout</td>\\n                            <td>string</td>\\n                            <td>stacked</td>\\n                            <td>Layout of the buttons, valid values are \\\"stacked\\\" (default), \\\"horizontal\\\" and \\\"vertical\\\".</td>\\n                        </tr>\\n                        <tr>\\n                            <td>incrementButtonClass</td>\\n                            <td>string</td>\\n                            <td>null</td>\\n                            <td>Style class of the increment button.</td>\\n                        </tr>\\n                        <tr>\\n                            <td>decrementButtonClass</td>\\n                            <td>string</td>\\n                            <td>null</td>\\n                            <td>Style class of the decrement button.</td>\\n                        </tr>\\n                        <tr>\\n                            <td>incrementButtonIcon</td>\\n                            <td>string</td>\\n                            <td>pi pi-chevron-up</td>\\n                            <td>Style class of the increment button.</td>\\n                        </tr>\\n                        <tr>\\n                            <td>decrementButtonIcon</td>\\n                            <td>string</td>\\n                            <td>pi pi-chevron-down</td>\\n                            <td>Style class of the decrement button.</td>\\n                        </tr>\\n                        <tr>\\n                            <td>locale</td>\\n                            <td>string</td>\\n                            <td>null</td>\\n                            <td>Locale to be used in formatting.</td>\\n                        </tr>\\n                        <tr>\\n                            <td>localeMatcher</td>\\n                            <td>string</td>\\n                            <td>best fit</td>\\n                            <td>The locale matching algorithm to use. Possible values are \\\"lookup\\\" and \\\"best fit\\\"; the default is \\\"best fit\\\".\\n                                See <a href=\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#Locale_negotiation\\\">Locale Negotation</a> for details.\\n                            </td>\\n                        </tr>\\n                        <tr>\\n                            <td>mode</td>\\n                            <td>string</td>\\n                            <td>decimal</td>\\n                            <td>Defines the behavior of the component, valid values are \\\"decimal\\\" and \\\"currency\\\".</td>\\n                        </tr>\\n                        <tr>\\n                            <td>prefix</td>\\n                            <td>string</td>\\n                            <td>null</td>\\n                            <td>Text to display before the value.</td>\\n                        </tr>\\n                        <tr>\\n                            <td>suffix</td>\\n                            <td>string</td>\\n                            <td>decimal</td>\\n                            <td>Text to display after the value.</td>\\n                        </tr>\\n                        <tr>\\n                            <td>currency</td>\\n                            <td>string</td>\\n                            <td>null</td>\\n                            <td>The currency to use in currency formatting. Possible values are the <a href=\\\"https://www.currency-iso.org/en/home/tables/table-a1.html\\\">ISO 4217 currency codes</a>,\\n                                such as \\\"USD\\\" for the US dollar, \\\"EUR\\\" for the euro, or \\\"CNY\\\" for the Chinese RMB.\\n                                There is no default value; if the style is \\\"currency\\\", the currency property must be provided.</td>\\n                        </tr>\\n                        <tr>\\n                            <td>currencyDisplay</td>\\n                            <td>string</td>\\n                            <td>symbol</td>\\n                            <td>How to display the currency in currency formatting. Possible values are \\\"symbol\\\" to use a localized currency symbol such as €,\\n                                ü\\\"code\\\" to use the ISO currency code, \\\"name\\\" to use a localized currency name such as \\\"dollar\\\"; the default is \\\"symbol\\\".</td>\\n                        </tr>\\n                        <tr>\\n                            <td>useGrouping</td>\\n                            <td>boolean</td>\\n                            <td>true</td>\\n                            <td>Whether to use grouping separators, such as thousands separators or thousand/lakh/crore separators.</td>\\n                        </tr>\\n                        <tr>\\n                            <td>minFractionDigits</td>\\n                            <td>number</td>\\n                            <td>null</td>\\n                            <td>The minimum number of fraction digits to use. Possible values are from 0 to 20; the default for plain number and percent formatting is 0; the default for currency formatting is the number of\\n                                minor unit digits provided by the <a href=\\\"https://www.currency-iso.org/en/home/tables/table-a1.html\\\">ISO 4217 currency code list</a> (2 if the list doesn't provide that information).</td>\\n                        </tr>\\n                        <tr>\\n                            <td>maxFractionDigits</td>\\n                            <td>number</td>\\n                            <td>null</td>\\n                            <td>The maximum number of fraction digits to use. Possible values are from 0 to 20; the default for plain\\n                                number formatting is the larger of minimumFractionDigits and 3; the default for currency formatting\\n                                is the larger of minimumFractionDigits and the number of minor unit digits provided by the <a href=\\\"https://www.currency-iso.org/en/home/tables/table-a1.html\\\">ISO 4217 currency code list</a>\\n                                (2 if the list doesn't provide that information).</td>\\n                        </tr>\\n                        <tr>\\n                            <td>min</td>\\n                            <td>number</td>\\n                            <td>null</td>\\n                            <td>Mininum boundary value.</td>\\n                        </tr>\\n                        <tr>\\n                            <td>max</td>\\n                            <td>number</td>\\n                            <td>null</td>\\n                            <td>Maximum boundary value.</td>\\n                        </tr>\\n                        <tr>\\n                            <td>step</td>\\n                            <td>number</td>\\n                            <td>1</td>\\n                            <td>Step factor to increment/decrement the value.</td>\\n                        </tr>\\n                        <tr>\\n                            <td>inputId</td>\\n                            <td>string</td>\\n                            <td>null</td>\\n                            <td>Identifier of the focus input to match a label defined for the component.</td>\\n                        </tr>\\n                        <tr>\\n                            <td>placeholder</td>\\n                            <td>string</td>\\n                            <td>null</td>\\n                            <td>Advisory information to display on input.</td>\\n                        </tr>\\n                        <tr>\\n                            <td>size</td>\\n                            <td>number</td>\\n                            <td>null</td>\\n                            <td>Size of the input field.</td>\\n                        </tr>\\n                        <tr>\\n                            <td>maxlength</td>\\n                            <td>number</td>\\n                            <td>null</td>\\n                            <td>Maximum number of character allows in the input field.</td>\\n                        </tr>\\n                        <tr>\\n                            <td>tabindex</td>\\n                            <td>number</td>\\n                            <td>null</td>\\n                            <td>Specifies tab order of the element.</td>\\n                        </tr>\\n                        <tr>\\n                            <td>title</td>\\n                            <td>string</td>\\n                            <td>null</td>\\n                            <td>Title text of the input text.</td>\\n                        </tr>\\n                        <tr>\\n                            <td>ariaLabel</td>\\n                            <td>string</td>\\n                            <td>null</td>\\n                            <td>Used to define a string that labels the current element.</td>\\n                        </tr>\\n                        <tr>\\n                            <td>ariaRequired</td>\\n                            <td>boolean</td>\\n                            <td>false</td>\\n                            <td>Used to indicate that user input is required on an element before a form can be submitted.</td>\\n                        </tr>\\n                        <tr>\\n                            <td>name</td>\\n                            <td>string</td>\\n                            <td>null</td>\\n                            <td>Name of the input field.</td>\\n                        </tr>\\n                        <tr>\\n                            <td>autocomplete</td>\\n                            <td>string</td>\\n                            <td>null</td>\\n                            <td>Used to define a string that autocomplete attribute the current element.</td>\\n                        </tr>\\n                    </tbody>\\n                </table>\\n            </div>\\n            \\n            <h3>Events</h3>\\n            <div class=\\\"doc-tablewrapper\\\">\\n                <table class=\\\"doc-table\\\">\\n                    <thead>\\n                        <tr>\\n                            <th>Name</th>\\n                            <th>Parameters</th>\\n                            <th>Description</th>\\n                        </tr>\\n                    </thead>\\n                    <tbody>\\n                        <tr>\\n                            <td>onFocus</td>\\n                            <td>event: Browser event</td>\\n                            <td>Callback to invoke when input receives focus.</td>\\n                        </tr> \\n                        <tr>\\n                            <td>onBlur</td>\\n                            <td>event: Browser event</td>\\n                            <td>Callback to invoke when input loses focus.</td>\\n                        </tr>   \\n                    </tbody>\\n                </table>\\n            </div>\\n\\n            <h3>Styling</h3>\\n            <p>Following is the list of structural style classes, for theming classes visit <a href=\\\"#\\\" [routerLink]=\\\"['/theming']\\\">theming</a> page.</p>\\n            <div class=\\\"doc-tablewrapper\\\">\\n                <table class=\\\"doc-table\\\">\\n                    <thead>\\n                        <tr>\\n                            <th>Name</th>\\n                            <th>Element</th>\\n                        </tr>\\n                    </thead>\\n                    <tbody>\\n                        <tr>\\n                            <td>ui-inputnumber</td>\\n                            <td>Container element</td>\\n                        </tr>\\n                        <tr>\\n                            <td>ui-inputnumber-stacked</td>\\n                            <td>Container element with stacked buttons.</td>\\n                        </tr>\\n                        <tr>\\n                            <td>ui-inputnumber-horizontal</td>\\n                            <td>Container element with horizontal buttons.</td>\\n                        </tr>\\n                        <tr>\\n                            <td>ui-inputnumber-vertical</td>\\n                            <td>Container element with vertical buttons.</td>\\n                        </tr>\\n                        <tr>\\n                            <td>ui-inputnumber-input</td>\\n                            <td>Input element</td>\\n                        </tr>\\n                        <tr>\\n                            <td>ui-inputnumber-button</td>\\n                            <td>Input element</td>\\n                        </tr>\\n                        <tr>\\n                            <td>ui-inputnumber-button-up</td>\\n                            <td>Increment button</td>\\n                        </tr>\\n                        <tr>\\n                            <td>ui-inputnumber-button-down</td>\\n                            <td>Decrement button</td>\\n                        </tr>\\n                        <tr>\\n                            <td>ui-inputnumber-button-icon</td>\\n                            <td>Button icon</td>\\n                        </tr>\\n                    </tbody>\\n                </table>\\n            </div>\\n            <h3>Dependencies</h3>\\n            <p>None.</p>\\n        </p-tabPanel>\\n\\n        <p-tabPanel header=\\\"Source\\\">\\n            <a href=\\\"https://github.com/primefaces/primeng/tree/master/src/app/showcase/components/inputnumber\\\" class=\\\"btn-viewsource\\\" target=\\\"_blank\\\">\\n                <span>View on GitHub</span>\\n            </a>\\n            <a href=\\\"https://stackblitz.com/edit/primeng-inputnumber-demo\\\" class=\\\"btn-viewsource\\\" style=\\\"margin-left: .5em;\\\" target=\\\"_blank\\\">\\n                <span>Edit in StackBlitz</span>\\n            </a>\\n<pre>\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\n&lt;div class=\\\"p-grid ui-fluid\\\"&gt;\\n&lt;h3&gt;Numerals&lt;/h3&gt;\\n&lt;div class=\\\"p-grid ui-fluid\\\"&gt;\\n    &lt;div class=\\\"p-col-12 p-md-3\\\"&gt;\\n        Integer Only\\n        &lt;p-inputNumber [(ngModel)]=\\\"value1\\\"&gt;\\n        &lt;/p-inputNumber&gt;\\n        &#123;&#123;value1&#125;&#125;\\n    &lt;/div&gt;\\n    &lt;div class=\\\"p-col-12 p-md-3\\\"&gt;\\n        Without Grouping\\n        &lt;p-inputNumber [(ngModel)]=\\\"value2\\\" mode=\\\"decimal\\\" [useGrouping]=\\\"false\\\"&gt;\\n        &lt;/p-inputNumber&gt;\\n    &lt;/div&gt;\\n    &lt;div class=\\\"p-col-12 p-md-3\\\"&gt;\\n        Min-Max Fraction Digits\\n        &lt;p-inputNumber [(ngModel)]=\\\"value3\\\" mode=\\\"decimal\\\" [minFractionDigits]=\\\"2\\\" [maxFractionDigits]=\\\"5\\\"&gt;\\n        &lt;/p-inputNumber&gt;\\n    &lt;/div&gt;\\n    &lt;div class=\\\"p-col-12 p-md-3\\\"&gt;\\n        Min-Max Boundaries\\n        &lt;p-inputNumber [(ngModel)]=\\\"value4\\\" mode=\\\"decimal\\\" [min]=\\\"0\\\" [max]=\\\"100\\\"&gt;\\n        &lt;/p-inputNumber&gt;\\n    &lt;/div&gt;\\n    &lt;div class=\\\"p-col-12 p-md-3\\\"&gt;\\n        User Locale\\n        &lt;p-inputNumber [(ngModel)]=\\\"value5\\\" [minFractionDigits]=\\\"2\\\"&gt;\\n        &lt;/p-inputNumber&gt;\\n    &lt;/div&gt;\\n    &lt;div class=\\\"p-col-12 p-md-3\\\"&gt;\\n        United State Locale\\n        &lt;p-inputNumber [(ngModel)]=\\\"value6\\\" mode=\\\"decimal\\\" locale=\\\"en-US\\\" [minFractionDigits]=\\\"2\\\"&gt;\\n        &lt;/p-inputNumber&gt;\\n    &lt;/div&gt;\\n    &lt;div class=\\\"p-col-12 p-md-3\\\"&gt;\\n        German Locale\\n        &lt;p-inputNumber [(ngModel)]=\\\"value7\\\" mode=\\\"decimal\\\" locale=\\\"de-DE\\\" [minFractionDigits]=\\\"2\\\"&gt;\\n        &lt;/p-inputNumber&gt;\\n    &lt;/div&gt;\\n    &lt;div class=\\\"p-col-12 p-md-3\\\"&gt;\\n        Indian Locale\\n        &lt;p-inputNumber [(ngModel)]=\\\"value8\\\" mode=\\\"decimal\\\" locale=\\\"en-IN\\\" [minFractionDigits]=\\\"2\\\"&gt;\\n        &lt;/p-inputNumber&gt;\\n    &lt;/div&gt;\\n&lt;/div&gt;\\n&lt;h3&gt;Currency&lt;/h3&gt;\\n&lt;div class=\\\"p-grid ui-fluid\\\"&gt;\\n    &lt;div class=\\\"p-col-12 p-md-3\\\"&gt;\\n        United States\\n        &lt;p-inputNumber [(ngModel)]=\\\"value9\\\" mode=\\\"currency\\\" currency=\\\"USD\\\" locale=\\\"en-US\\\"&gt;\\n        &lt;/p-inputNumber&gt;\\n    &lt;/div&gt;\\n    &lt;div class=\\\"p-col-12 p-md-3\\\"&gt;\\n        Germany\\n        &lt;p-inputNumber [(ngModel)]=\\\"value10\\\" mode=\\\"currency\\\" currency=\\\"EUR\\\" locale=\\\"de-DE\\\"&gt;\\n        &lt;/p-inputNumber&gt;\\n    &lt;/div&gt;\\n    &lt;div class=\\\"p-col-12 p-md-3\\\"&gt;\\n        India\\n        &lt;p-inputNumber [(ngModel)]=\\\"value11\\\" mode=\\\"currency\\\" currency=\\\"INR\\\" currencyDisplay=\\\"code\\\" locale=\\\"en-IN\\\"&gt;\\n        &lt;/p-inputNumber&gt;\\n    &lt;/div&gt;\\n    &lt;div class=\\\"p-col-12 p-md-3\\\"&gt;\\n        Japan\\n        &lt;p-inputNumber [(ngModel)]=\\\"value12\\\" mode=\\\"currency\\\" currency=\\\"JPY\\\" locale=\\\"jp-JP\\\"&gt;\\n        &lt;/p-inputNumber&gt;\\n    &lt;/div&gt;\\n&lt;/div&gt;\\n&lt;h3&gt;Prefix and Suffix&lt;/h3&gt;\\n&lt;div class=\\\"p-grid ui-fluid\\\"&gt;\\n    &lt;div class=\\\"p-col-12 p-md-3\\\"&gt;\\n        Mile\\n        &lt;p-inputNumber [(ngModel)]=\\\"value13\\\" suffix=\\\" mi\\\"&gt;\\n        &lt;/p-inputNumber&gt;\\n    &lt;/div&gt;\\n    &lt;div class=\\\"p-col-12 p-md-3\\\"&gt;\\n        Percent\\n        &lt;p-inputNumber [(ngModel)]=\\\"value14\\\" prefix=\\\"%\\\"&gt;\\n        &lt;/p-inputNumber&gt;\\n    &lt;/div&gt;\\n    &lt;div class=\\\"p-col-12 p-md-3\\\"&gt;\\n        Expiry\\n        &lt;p-inputNumber [(ngModel)]=\\\"value15\\\" prefix=\\\"Expires in \\\" suffix=\\\" days\\\"&gt;\\n        &lt;/p-inputNumber&gt;\\n    &lt;/div&gt;\\n    &lt;div class=\\\"p-col-12 p-md-3\\\"&gt;\\n        Temperature\\n        &lt;p-inputNumber [(ngModel)]=\\\"value16\\\" prefix=\\\"&uarr; \\\" suffix=\\\"℃\\\" [min]=\\\"0\\\" [max]=\\\"40\\\"&gt;\\n        &lt;/p-inputNumber&gt;\\n    &lt;/div&gt;\\n&lt;/div&gt;\\n&lt;h3&gt;Buttons&lt;/h3&gt;\\n&lt;div class=\\\"p-grid ui-fluid\\\"&gt;\\n    &lt;div class=\\\"p-col-12 p-md-3\\\"&gt;\\n        Stacked\\n        &lt;p-inputNumber [(ngModel)]=\\\"value17\\\" [showButtons]=\\\"true\\\" mode=\\\"currency\\\" currency=\\\"USD\\\"&gt;\\n        &lt;/p-inputNumber&gt;\\n    &lt;/div&gt;\\n    &lt;div class=\\\"p-col-12 p-md-3\\\"&gt;\\n        Horizontal with Step\\n        &lt;p-inputNumber [(ngModel)]=\\\"value18\\\" [showButtons]=\\\"true\\\" buttonLayout=\\\"horizontal\\\" spinnerMode=\\\"horizontal\\\" [step]=\\\"0.25\\\"\\n        decrementButtonClass=\\\"ui-button-danger\\\" incrementButtonClass=\\\"ui-button-success\\\" incrementButtonIcon=\\\"pi pi-plus\\\" decrementButtonIcon=\\\"pi pi-minus\\\" mode=\\\"currency\\\" currency=\\\"EUR\\\"&gt;\\n        &lt;/p-inputNumber&gt;\\n    &lt;/div&gt;\\n    &lt;div class=\\\"p-col-12 p-md-3\\\"&gt;\\n        &lt;div&gt;Vertical&lt;/div&gt;\\n        &lt;p-inputNumber [(ngModel)]=\\\"value19\\\" [showButtons]=\\\"true\\\" buttonLayout=\\\"vertical\\\" spinnerMode=\\\"vertical\\\"\\n        decrementButtonClass=\\\"ui-button-secondary\\\" incrementButtonClass=\\\"ui-button-secondary\\\" incrementButtonIcon=\\\"pi pi-plus\\\" decrementButtonIcon=\\\"pi pi-minus\\\"&gt;\\n        &lt;/p-inputNumber&gt;\\n    &lt;/div&gt;\\n    &lt;div class=\\\"p-col-12 p-md-3\\\"&gt;\\n        Min-Max Boundaries\\n        &lt;p-inputNumber [(ngModel)]=\\\"value20\\\" mode=\\\"decimal\\\" [showButtons]=\\\"true\\\" [min]=\\\"0\\\" [max]=\\\"100\\\"&gt;\\n        &lt;/p-inputNumber&gt;\\n    &lt;/div&gt;\\n&lt;/div&gt;\\n</code>\\n</pre>\\n\\n<pre>\\n<code class=\\\"language-typescript\\\" pCode ngNonBindable>\\nexport class InputNumberDemo &#123;\\n    value1: number = 42723;\\n\\n    value2: number = 58151;\\n\\n    value3: number = 2351.35;\\n\\n    value4: number = 50;\\n\\n    value5: number = 151351;\\n\\n    value6: number = 115744;\\n\\n    value7: number = 635524;\\n\\n    value8: number = 732762;\\n\\n    value9: number = 1500;\\n\\n    value10: number = 2500;\\n\\n    value11: number = 4250;\\n\\n    value12: number = 5002;\\n\\n    value13: number = 20;\\n\\n    value14: number = 50;\\n\\n    value15: number = 10;\\n\\n    value16: number = 20;\\n\\n    value17: number = 20;\\n\\n    value18: number = 10.50;\\n\\n    value19: number = 25;\\n\\n    value20: number = 50;\\n&#125;\\n</code>\\n</pre>\\n        </p-tabPanel>\\n        <p-tabPanel header=\\\"StackBlitz\\\">\\n            <ng-template pTemplate=\\\"content\\\">\\n                <iframe src=\\\"https://stackblitz.com/edit/primeng-inputnumber-demo?embed=1\\\" style=\\\"width: 100%; height: 768px; border: none;\\\"></iframe>\\n            </ng-template>\\n        </p-tabPanel>\\n    </p-tabView>\\n</div>\\n\";","export * from './dialogservice';\nexport * from './dynamicdialog';\nexport * from './dynamicdialog-config';\nexport * from './dynamicdialog-injector';\nexport * from './dynamicdialog-ref';\nexport * from './dynamicdialog';","\nimport {NgModule,Component,ChangeDetectionStrategy, Input, ElementRef, ViewChild, OnInit, EventEmitter, Output, forwardRef} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {InputTextModule} from 'primeng/inputtext';\nimport { ButtonModule } from 'primeng/button';\nimport { NG_VALUE_ACCESSOR, ControlValueAccessor } from '@angular/forms';\n\nexport const INPUTNUMBER_VALUE_ACCESSOR: any = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => InputNumber),\n    multi: true\n};\n@Component({\n    selector: 'p-inputNumber',\n    template: `\n        <span [ngClass]=\"{'ui-inputnumber ui-widget': true, 'ui-inputwrapper-filled': this.filled(), 'ui-inputwrapper-focus': this.focused,\n                'ui-inputnumber-buttons-stacked': this.showButtons && this.buttonLayout === 'stacked', 'ui-inputnumber-buttons-horizontal': this.showButtons && this.buttonLayout === 'horizontal',\n                'ui-inputnumber-buttons-vertical': this.showButtons && this.buttonLayout === 'vertical'}\">\n            <input #input class=\"ui-inputnumber-input\" pInputText [value]=\"formattedValue()\" [attr.placeholder]=\"placeholder\" [attr.title]=\"title\" [attr.id]=\"inputId\"\n                [attr.size]=\"size\" [attr.name]=\"name\" [attr.autocomplete]=\"autocomplete\" [attr.maxlength]=\"maxlength\" [attr.tabindex]=\"tabindex\" [attr.aria-label]=\"ariaLabel\"\n                [attr.aria-required]=\"ariaRequired\" [disabled]=\"disabled\" [attr.required]=\"required\" [attr.aria-valumin]=\"min\" [attr.aria-valuemax]=\"max\"\n                (input)=\"onInput($event)\" (keydown)=\"onInputKeyDown($event)\" (keypress)=\"onInputKeyPress($event)\" (paste)=\"onPaste($event)\" (click)=\"onInputClick()\"\n                (focus)=\"onInputFocus($event)\" (blur)=\"onInputBlur($event)\">\n            <span class=\"ui-inputnumber-button-group\" *ngIf=\"showButtons && buttonLayout === 'stacked'\">\n                <button type=\"button\" pButton [ngClass]=\"{'ui-inputnumber-button ui-inputnumber-button-up': true}\" [class]=\"incrementButtonClass\" [icon]=\"incrementButtonIcon\" [disabled]=\"disabled\"\n                    (mousedown)=\"this.onUpButtonMouseDown($event)\" (mouseup)=\"onUpButtonMouseUp()\" (mouseleave)=\"onUpButtonMouseLeave()\" (keydown)=\"onUpButtonKeyDown($event)\" (keyup)=\"onUpButtonKeyUp()\"></button>\n                <button type=\"button\" pButton [ngClass]=\"{'ui-inputnumber-button ui-inputnumber-button-down': true}\" [class]=\"decrementButtonClass\" [icon]=\"decrementButtonIcon\" [disabled]=\"disabled\"\n                    (mousedown)=\"this.onDownButtonMouseDown($event)\" (mouseup)=\"onDownButtonMouseUp()\" (mouseleave)=\"onDownButtonMouseLeave()\" (keydown)=\"onDownButtonKeyDown($event)\" (keyup)=\"onDownButtonKeyUp()\"></button>\n            </span>\n            <button type=\"button\" pButton [ngClass]=\"{'ui-inputnumber-button ui-inputnumber-button-up': true}\" [class]=\"incrementButtonClass\" [icon]=\"incrementButtonIcon\" *ngIf=\"showButtons && buttonLayout !== 'stacked'\" [disabled]=\"disabled\"\n                (mousedown)=\"this.onUpButtonMouseDown($event)\" (mouseup)=\"onUpButtonMouseUp()\" (mouseleave)=\"onUpButtonMouseLeave()\" (keydown)=\"onUpButtonKeyDown($event)\" (keyup)=\"onUpButtonKeyUp()\"></button>\n            <button type=\"button\" pButton [ngClass]=\"{'ui-inputnumber-button ui-inputnumber-button-down': true}\" [class]=\"decrementButtonClass\" [icon]=\"decrementButtonIcon\" *ngIf=\"showButtons && buttonLayout !== 'stacked'\" [disabled]=\"disabled\"\n                (mousedown)=\"this.onDownButtonMouseDown($event)\" (mouseup)=\"onDownButtonMouseUp()\" (mouseleave)=\"onDownButtonMouseLeave()\" (keydown)=\"onDownButtonKeyDown($event)\" (keyup)=\"onDownButtonKeyUp()\"></button>\n        </span>\n    `,\n    changeDetection: ChangeDetectionStrategy.Default,\n    providers: [INPUTNUMBER_VALUE_ACCESSOR]\n})\nexport class InputNumber implements OnInit,ControlValueAccessor {\n    @Input() showButtons: boolean = false;\n\n    @Input() format: boolean = true;\n\n    @Input() buttonLayout: string = \"stacked\";\n\n    @Input() prefix: string;\n\n    @Input() locale: string;\n\n    @Input() suffix: string;\n\n    @Input() localeMatcher: string;\n\n    @Input() currency: string;\n\n    @Input() currencyDisplay: string;\n\n    @Input() useGrouping: boolean = true;\n\n    @Input() disabled: boolean;\n\n    @Input() inputId: string;\n\n    @Input() styleClass: string;\n\n    @Input() placeholder: string;\n\n    @Input() size: number;\n\n    @Input() maxlength: number;\n\n    @Input() tabindex: string;\n\n    @Input() title: string;\n\n    @Input() ariaLabel: string;\n\n    @Input() ariaRequired: boolean;\n\n    @Input() name: string;\n\n    @Input() required: boolean;\n\n    @Input() autocomplete: string;\n\n    @Input() min: number;\n\n    @Input() max: number;\n\n    @Input() minFractionDigits: number;\n\n    @Input() maxFractionDigits: number;\n\n    @Input() incrementButtonClass: string;\n\n    @Input() decrementButtonClass: string;\n\n    @Input() incrementButtonIcon: string = 'pi pi-chevron-up';\n\n    @Input() decrementButtonIcon: string = 'pi pi-chevron-down';\n\n    @Input() mode: string = \"decimal\";\n\n    @Input() step: number = 1;\n\n    @ViewChild('input') input: ElementRef;\n\n    @Output() onFocus: EventEmitter<any> = new EventEmitter();\n\n    @Output() onBlur: EventEmitter<any> = new EventEmitter();\n\n    value: number;\n\n    onModelChange: Function = () => {};\n\n    onModelTouched: Function = () => {};\n\n    focused: boolean;\n\n    isSpecialChar: boolean;\n\n    timer: any;\n\n    lastValue: string;\n\n    _numeral: any;\n\n    numberFormat: any;\n\n    _decimal: any;\n\n    _group: any;\n\n    _minusSign: any;\n\n    _currency: any;\n\n    _prefix: any;\n\n    _suffix: any;\n\n    _index: any;\n\n    constructor(public el: ElementRef) {}\n\n    ngOnInit() {\n        this.numberFormat = new Intl.NumberFormat(this.locale, this.getOptions());\n        const numerals = [...new Intl.NumberFormat(this.locale, {useGrouping: false}).format(9876543210)].reverse();\n        const index = new Map(numerals.map((d, i) => [d, i]));\n        this._numeral = new RegExp(`[${numerals.join('')}]`, 'g');\n        this._decimal = this.getDecimalExpression();\n        this._group = this.getGroupingExpression();\n        this._minusSign = this.getMinusSignExpression();\n        this._currency = this.getCurrencyExpression();\n        this._suffix = new RegExp(`[${this.suffix||''}]`, 'g');\n        this._prefix = new RegExp(`[${this.prefix||''}]`, 'g');\n        this._index = d => index.get(d);\n    }\n\n    formatValue(value) {\n        if (value != null) {\n            if (this.format) {\n                let formatter = new Intl.NumberFormat(this.locale, this.getOptions());\n                let formattedValue = formatter.format(value);\n                if (this.prefix) {\n                    formattedValue = this.prefix + formattedValue;\n                }\n\n                if (this.suffix) {\n                    formattedValue = formattedValue + this.suffix;\n                }\n\n                return formattedValue;\n            }\n\n            return value;\n        }\n\n        return '';\n    }\n\n    formattedValue() {\n        return this.formatValue(this.value);\n    }\n\n    onInput(event) {\n        if (this.isSpecialChar) {\n            event.target.value = this.lastValue;\n        }\n        this.isSpecialChar = false;\n    }\n\n    onInputKeyDown(event) {\n        this.lastValue = event.target.value;\n        if (event.shiftKey || event.altKey) {\n            this.isSpecialChar = true;\n            return;\n        }\n\n        let selectionStart = event.target.selectionStart;\n        let selectionEnd = event.target.selectionEnd;\n        let inputValue = event.target.value;\n\n        if (event.altKey) {\n            event.preventDefault();\n        }\n\n        switch (event.which) {\n            //up\n            case 38:\n                this.spin(event, 1);\n                event.preventDefault();\n            break;\n\n            //down\n            case 40:\n                this.spin(event, -1);\n                event.preventDefault();\n            break;\n\n            //left\n            case 37:\n                if (!this.isNumeralChar(inputValue.charAt(selectionStart - 1))) {\n                    event.preventDefault();\n                }\n            break;\n\n            //right\n            case 39:\n                if (!this.isNumeralChar(inputValue.charAt(selectionStart))) {\n                    event.preventDefault();\n                }\n            break;\n\n            //backspace\n            case 8: {\n                event.preventDefault();\n                let newValueStr = null;\n\n                if (selectionStart === selectionEnd) {\n                    let deleteChar = inputValue.charAt(selectionStart - 1);\n                    let decimalCharIndex = inputValue.search(this._decimal);\n                    this._decimal.lastIndex = 0;\n\n                    if (this.isNumeralChar(deleteChar)) {\n                        if (this._group.test(deleteChar)) {\n                            this._group.lastIndex = 0;\n                            newValueStr = inputValue.slice(0, selectionStart - 2) + inputValue.slice(selectionStart - 1);\n                        }\n                        else if (this._decimal.test(deleteChar)) {\n                            this._decimal.lastIndex = 0;\n                            this.input.nativeElement.setSelectionRange(selectionStart - 1, selectionStart - 1);\n                        }\n                        else if (decimalCharIndex > 0 && selectionStart > decimalCharIndex) {\n                            newValueStr = inputValue.slice(0, selectionStart - 1) + '0' + inputValue.slice(selectionStart);\n                        }\n                        else {\n                            newValueStr = inputValue.slice(0, selectionStart - 1) + inputValue.slice(selectionStart);\n                        }\n                    }\n\n                    if (newValueStr != null) {\n                        this.updateValue(event, newValueStr, 'delete-single');\n                    }\n                }\n                else {\n                    newValueStr = this.deleteRange(inputValue, selectionStart, selectionEnd);\n                    this.updateValue(event, newValueStr, 'delete-range');\n                }\n\n                break;\n            }\n\n            default:\n            break;\n        }\n    }\n\n    onInputKeyPress(event) {\n        event.preventDefault();\n        let code = event.which || event.keyCode;\n        let char = String.fromCharCode(code);\n\n        if ((48 <= code && code <= 57) || this.isMinusSign(char)) {\n            this.insert(event, char);\n        }\n    }\n\n    onPaste(event) {\n        event.preventDefault();\n        let data = (event.clipboardData || window['clipboardData']).getData('Text');\n        if (data) {\n            let filteredData = this.parseValue(data);\n            if (filteredData != null) {\n                this.insert(event, filteredData.toString());\n            }\n        }\n    }\n\n    onInputClick() {\n        this.initCursor();\n    }\n\n    onInputFocus(event) {\n        this.focused = true;\n        this.onFocus.emit(event);\n    }\n\n    onInputBlur(event) {\n        this.focused = false;\n\n        let newValue = this.validateValue(this.parseValue(this.input.nativeElement.value));\n        this.input.nativeElement.value = this.formatValue(newValue);\n        this.input.nativeElement.setAttribute('aria-valuenow', newValue);\n        this.updateModel(event, newValue);\n\n        this.onBlur.emit(event);\n    }\n\n    onUpButtonMouseDown(event) {\n        this.input.nativeElement.focus();\n        this.repeat(event, null, 1);\n        event.preventDefault();\n    }\n\n    onUpButtonMouseUp() {\n        this.clearTimer();\n    }\n\n    onUpButtonMouseLeave() {\n        this.clearTimer();\n    }\n\n    onUpButtonKeyDown(event) {\n        if (event.keyCode === 32 || event.keyCode === 13) {\n            this.repeat(event, null, 1);\n        }\n    }\n\n    onUpButtonKeyUp() {\n        this.clearTimer();\n    }\n\n    onDownButtonMouseDown(event) {\n        this.input.nativeElement.focus();\n        this.repeat(event, null, -1);\n        event.preventDefault();\n    }\n\n    onDownButtonMouseUp() {\n        this.clearTimer();\n    }\n\n    onDownButtonMouseLeave() {\n        this.clearTimer();\n    }\n\n    onDownButtonKeyUp() {\n        this.clearTimer();\n    }\n\n    onDownButtonKeyDown(event) {\n        if (event.keyCode === 32 || event.keyCode === 13) {\n            this.repeat(event, null, -1);\n        }\n    }\n\n    spin(event, dir) {\n        let step = this.step * dir;\n        let currentValue = this.parseValue(this.input.nativeElement.value) || 0;\n        let newValue = this.validateValue(currentValue + step);\n        if (this.maxlength && this.maxlength < this.formatValue(newValue).length) {\n            return;\n        }\n        \n        this.updateInput(newValue, 'spin');\n        this.updateModel(event, newValue);\n    }\n\n    repeat(event, interval, dir) {\n        let i = interval || 500;\n\n        this.clearTimer();\n        this.timer = setTimeout(() => {\n            this.repeat(event, 40, dir);\n        }, i);\n\n        this.spin(event, dir);\n    }\n\n    clearTimer() {\n        if (this.timer) {\n            clearInterval(this.timer);\n        }\n    }\n\n    insert(event, text) {\n        let selectionStart = this.input.nativeElement.selectionStart;\n        let selectionEnd = this.input.nativeElement.selectionEnd;\n        let inputValue = this.input.nativeElement.value.trim();\n        let maxFractionDigits = this.numberFormat.resolvedOptions().maximumFractionDigits;\n        let newValueStr;\n        let decimalCharIndex = inputValue.search(this._decimal);\n        this._decimal.lastIndex = 0;\n\n        if (decimalCharIndex > 0 && selectionStart > decimalCharIndex) {\n            if ((selectionStart + text.length - (decimalCharIndex + 1)) <= maxFractionDigits) {\n                newValueStr = inputValue.slice(0, selectionStart) + text + inputValue.slice(selectionStart + text.length);\n                this.updateValue(event, newValueStr, 'insert');\n            }\n        }\n        else {\n            newValueStr = this.insertText(inputValue, text, selectionStart, selectionEnd);\n            this.updateValue(event, newValueStr, 'insert');\n        }\n    }\n\n    insertText(value, text, start, end) {\n        let newValueStr;\n\n        if ((end - start) === value.length)\n            newValueStr = text;\n        else if (start === 0)\n            newValueStr = text + value.slice(end);\n        else if (end === value.length)\n            newValueStr = value.slice(0, start) + text;\n        else\n            newValueStr = value.slice(0, start) + text + value.slice(end);\n\n        return newValueStr;\n    }\n\n    initCursor() {\n        let selectionStart = this.input.nativeElement.selectionStart;\n        let inputValue = this.input.nativeElement.value;\n        let valueLength = inputValue.length;\n        let index = null;\n\n        let char = inputValue.charAt(selectionStart);\n        if (this.isNumeralChar(char)) {\n            return;\n        }\n\n        //left\n        let i = selectionStart - 1;\n        while (i >= 0) {\n            char = inputValue.charAt(i);\n            if (this.isNumeralChar(char)) {\n                index = i;\n                break;\n            }\n            else {\n                i--;\n            }\n        }\n\n        if (index !== null) {\n            this.input.nativeElement.setSelectionRange(index + 1, index + 1);\n        }\n        else {\n            i = selectionStart + 1;\n            while (i < valueLength) {\n                char = inputValue.charAt(i);\n                if (this.isNumeralChar(char)) {\n                    index = i;\n                    break;\n                }\n                else {\n                    i++;\n                }\n            }\n\n            if (index !== null) {\n                this.input.nativeElement.setSelectionRange(index, index);\n            }\n        }\n    }\n\n    updateInput(value, operation) {\n        let currentLength = this.input.nativeElement.value.length;\n\n        if (currentLength === 0) {\n            this.input.nativeElement.value = this.formatValue(value);\n            this.input.nativeElement.setSelectionRange(0, 0);\n            this.initCursor();\n            this.input.nativeElement.setSelectionRange(this.input.nativeElement.selectionStart + 1, this.input.nativeElement.selectionStart + 1);\n        }\n        else {\n            let selectionStart = this.input.nativeElement.selectionEnd;\n            let selectionEnd = this.input.nativeElement.selectionEnd;\n            let formattedValue = this.formatValue(value);\n            if (this.maxlength && this.maxlength < formattedValue.length) {\n                return;\n            }\n            \n            this.input.nativeElement.value = this.formatValue(value);\n            let newLength = this.input.nativeElement.value.length;\n\n            if (newLength === currentLength) {\n                if (operation === 'insert')\n                    this.input.nativeElement.setSelectionRange(selectionEnd + 1, selectionEnd + 1);\n                else if (operation === 'delete-single')\n                    this.input.nativeElement.setSelectionRange(selectionEnd - 1, selectionEnd - 1);\n                else if (operation === 'delete-range')\n                    this.input.nativeElement.setSelectionRange(selectionStart, selectionStart);\n                else if (operation === 'spin')\n                    this.input.nativeElement.setSelectionRange(selectionStart, selectionEnd);\n            }\n            else {\n                selectionEnd = selectionEnd + (newLength - currentLength);\n                this.input.nativeElement.setSelectionRange(selectionEnd, selectionEnd);\n            }\n        }\n\n        this.input.nativeElement.setAttribute('aria-valuenow', value);\n    }\n\n    updateModel(event, value) {\n        this.value = value;\n        this.onModelChange(value);\n    }\n\n    updateValue(event, valueStr, operation) {\n        if (valueStr != null) {\n            let newValue = this.parseValue(valueStr);\n            this.updateInput(newValue, operation);\n        }\n    }\n\n    validateValue(value) {\n        if (this.min !== null && value < this.min) {\n            return this.min;\n        }\n\n        if (this.max !== null && value > this.max) {\n            return this.max;\n        }\n\n        return value;\n    }\n\n    deleteRange(value, start, end) {\n        let newValueStr;\n\n        if ((end - start) === value.length)\n            newValueStr = '';\n        else if (start === 0)\n            newValueStr = value.slice(end);\n        else if (end === value.length)\n            newValueStr = value.slice(0, start);\n        else\n            newValueStr = value.slice(0, start) + value.slice(end);\n\n        return newValueStr;\n    }\n\n    isNumeralChar(char) {\n        if (char.length === 1 && (this._numeral.test(char) || this._decimal.test(char) || this._group.test(char) || this._minusSign.test(char))) {\n            this.resetRegex();\n            return true;\n        }\n\n        return false;\n    }\n\n    isMinusSign(char) {\n        if (this._minusSign.test(char)) {\n            this._minusSign.lastIndex = 0;\n            return true;\n        }\n\n        return false;\n    }\n\n    parseValue(text) {\n        let filteredText = text.trim()\n                            .replace(/\\s/g, '')\n                            .replace(this._currency, '')\n                            .replace(this._group, '')\n                            .replace(this._suffix, '')\n                            .replace(this._prefix, '')\n                            .replace(this._minusSign, '-')\n                            .replace(this._decimal, '.')\n                            .replace(this._numeral, this._index);\n\n        if (filteredText) {\n            let parsedValue = +filteredText;\n            return isNaN(parsedValue) ? null : parsedValue;\n        }\n\n        return null;\n    }\n\n    writeValue(value: any) : void {\n        this.value = value;\n    }\n\n    registerOnChange(fn: Function): void {\n        this.onModelChange = fn;\n    }\n\n    registerOnTouched(fn: Function): void {\n        this.onModelTouched = fn;\n    }\n\n    setDisabledState(val: boolean): void {\n        this.disabled = val;\n    }\n\n    getOptions() {\n        return {\n            localeMatcher: this.localeMatcher,\n            style: this.mode,\n            currency: this.currency,\n            currencyDisplay: this.currencyDisplay,\n            useGrouping: this.useGrouping,\n            minimumFractionDigits: this.minFractionDigits,\n            maximumFractionDigits: this.maxFractionDigits\n        };\n    }\n\n    getDecimalExpression() {\n        const formatter = new Intl.NumberFormat(this.locale, {useGrouping: false});\n        return new RegExp(`[${formatter.format(1.1).trim().replace(this._numeral, '')}]`, 'g');\n    }\n\n    getGroupingExpression() {\n        const formatter = new Intl.NumberFormat(this.locale, {useGrouping: true});\n        return new RegExp(`[${formatter.format(1000).trim().replace(this._numeral, '')}]`, 'g');\n    }\n\n    getMinusSignExpression() {\n        const formatter = new Intl.NumberFormat(this.locale, {useGrouping: false});\n        return new RegExp(`[${formatter.format(-1).trim().replace(this._numeral, '')}]`, 'g');\n    }\n\n    getCurrencyExpression() {\n        if (this.currency) {\n            const formatter = new Intl.NumberFormat(this.locale, {style: 'currency', currency: this.currency, currencyDisplay: this.currencyDisplay});\n            return new RegExp(`[${formatter.format(1).replace(/\\s/g, '').replace(this._numeral, '').replace(this._decimal, '').replace(this._group, '')}]`, 'g');\n        }\n\n        return new RegExp(`[]`,'g');\n    }\n\n    filled() {\n        return (this.value != null && this.value.toString().length > 0)\n    }\n\n    resetRegex() {\n        this._numeral.lastIndex =  0;\n        this._decimal.lastIndex =  0;\n        this._group.lastIndex =  0;\n        this._minusSign.lastIndex =  0;\n    }\n}\n\n@NgModule({\n    imports: [CommonModule,InputTextModule, ButtonModule],\n    exports: [InputNumber],\n    declarations: [InputNumber]\n})\nexport class InputNumberModule { }\n","export * from './inputnumber';","export * from 'primeng/accordion';\nexport * from 'primeng/autocomplete';\nexport * from 'primeng/blockui';\nexport * from 'primeng/breadcrumb';\nexport * from 'primeng/button';\nexport * from 'primeng/calendar';\nexport * from 'primeng/captcha';\nexport * from 'primeng/card';\nexport * from 'primeng/carousel';\nexport * from 'primeng/chart';\nexport * from 'primeng/checkbox';\nexport * from 'primeng/chips';\nexport * from 'primeng/codehighlighter';\nexport * from 'primeng/colorpicker';\nexport * from 'primeng/api';\nexport * from 'primeng/confirmdialog';\nexport * from 'primeng/contextmenu';\nexport * from 'primeng/dataview';\nexport * from 'primeng/defer';\nexport * from 'primeng/dialog';\nexport * from 'primeng/dragdrop';\nexport * from 'primeng/dropdown';\nexport * from 'primeng/dynamicdialog';\nexport * from 'primeng/editor';\nexport * from 'primeng/fieldset';\nexport * from 'primeng/fileupload';\nexport * from 'primeng/focustrap';\nexport * from 'primeng/fullcalendar';\nexport * from 'primeng/galleria';\nexport * from 'primeng/gmap';\nexport * from 'primeng/inplace';\nexport * from 'primeng/inputmask';\nexport * from 'primeng/inputnumber';\nexport * from 'primeng/inputswitch';\nexport * from 'primeng/inputtext';\nexport * from 'primeng/inputtextarea';\nexport * from 'primeng/keyfilter';\nexport * from 'primeng/lightbox';\nexport * from 'primeng/listbox';\nexport * from 'primeng/megamenu';\nexport * from 'primeng/menu';\nexport * from 'primeng/menubar';\nexport * from 'primeng/message';\nexport * from 'primeng/messages';\nexport * from 'primeng/multiselect';\nexport * from 'primeng/orderlist';\nexport * from 'primeng/organizationchart';\nexport * from 'primeng/overlaypanel';\nexport * from 'primeng/paginator';\nexport * from 'primeng/panel';\nexport * from 'primeng/panelmenu';\nexport * from 'primeng/password';\nexport * from 'primeng/picklist';\nexport * from 'primeng/progressbar';\nexport * from 'primeng/progressspinner';\nexport * from 'primeng/radiobutton';\nexport * from 'primeng/rating';\nexport * from 'primeng/scrollpanel';\nexport * from 'primeng/selectbutton';\nexport * from 'primeng/sidebar';\nexport * from 'primeng/slidemenu';\nexport * from 'primeng/slider';\nexport * from 'primeng/spinner';\nexport * from 'primeng/splitbutton';\nexport * from 'primeng/steps';\nexport * from 'primeng/table';\nexport * from 'primeng/tabmenu';\nexport * from 'primeng/tabview';\nexport * from 'primeng/terminal';\nexport * from 'primeng/tieredmenu';\nexport * from 'primeng/toast';\nexport * from 'primeng/togglebutton';\nexport * from 'primeng/toolbar';\nexport * from 'primeng/tooltip';\nexport * from 'primeng/tree';\nexport * from 'primeng/treetable';\nexport * from 'primeng/tristatecheckbox';\nexport * from 'primeng/virtualscroller';","import {NgModule} from '@angular/core';\nimport {RouterModule} from '@angular/router'\nimport {InputNumberDemo} from './inputnumberdemo';\n\n@NgModule({\n\timports: [\n\t\tRouterModule.forChild([\n\t\t\t{path:'',component: InputNumberDemo}\n\t\t])\n\t],\n\texports: [\n\t\tRouterModule\n\t]\n})\nexport class InputNumberDemoRoutingModule {}\n","import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {FormsModule} from '@angular/forms';\nimport {InputNumberDemo} from './inputnumberdemo';\nimport {InputNumberDemoRoutingModule} from './inputnumberdemo-routing.module';\nimport {TabViewModule} from 'primeng/tabview';\nimport {CodeHighlighterModule} from 'primeng/codehighlighter';\nimport { InputNumberModule } from 'src/app/components/public_api';\n\n@NgModule({\n\timports: [\n\t\tCommonModule,\n        FormsModule,\n\t\tInputNumberDemoRoutingModule,\n        InputNumberModule,\n        TabViewModule,\n        CodeHighlighterModule\n\t],\n\tdeclarations: [\n\t\tInputNumberDemo\n\t]\n})\nexport class InputNumberDemoModule {}\n","import {Component, ViewEncapsulation} from '@angular/core';\n\n@Component({\n    templateUrl: './inputnumberdemo.html',\n    styles: [`\n        .ui-inputnumber {\n            margin-top: 1em;\n        }\n    `],\n    encapsulation: ViewEncapsulation.None\n})\nexport class InputNumberDemo {\n    value1: number = 42723;\n\n    value2: number = 58151;\n\n    value3: number = 2351.35;\n\n    value4: number = 50;\n\n    value5: number = 151351;\n\n    value6: number = 115744;\n\n    value7: number = 635524;\n\n    value8: number = 732762;\n\n    value9: number = 1500;\n\n    value10: number = 2500;\n\n    value11: number = 4250;\n\n    value12: number = 5002;\n\n    value13: number = 20;\n\n    value14: number = 50;\n\n    value15: number = 10;\n\n    value16: number = 20;\n\n    value17: number = 20;\n\n    value18: number = 10.50;\n\n    value19: number = 25;\n\n    value20: number = 50;\n}"],"sourceRoot":"webpack:///"}