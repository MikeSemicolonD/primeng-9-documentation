{"version":3,"sources":["webpack:///src/app/showcase/components/slider/sliderdemo.html","webpack:///src/app/showcase/components/slider/sliderdemo-routing.module.ts","webpack:///src/app/showcase/components/slider/sliderdemo.module.ts","webpack:///src/app/showcase/components/slider/sliderdemo.ts"],"names":["SliderDemoRoutingModule","imports","forChild","path","component","exports","SliderDemoModule","declarations","SliderDemo","val2","rangeValues","template"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAe;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACcf,QAAaA,uBAAuB;AAAA;AAAA,MAApC;;AAAaA,2BAAuB,6DAVnC,+DAAS;AACTC,aAAO,EAAE,CACR,6DAAaC,QAAb,CAAsB,CACrB;AAACC,YAAI,EAAC,EAAN;AAASC,iBAAS,EAAE;AAApB,OADqB,CAAtB,CADQ,CADA;AAMTC,aAAO,EAAE,CACR,4DADQ;AANA,KAAT,CAUmC,GAAvBL,uBAAuB,CAAvB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACUb,QAAaM,gBAAgB;AAAA;AAAA,MAA7B;;AAAaA,oBAAgB,6DAd5B,+DAAS;AACTL,aAAO,EAAE,CACR,4DADQ,EAEF,0DAFE,EAGR,kFAHQ,EAIF,2DAJE,EAKF,iEALE,EAMF,6DANE,EAOF,6EAPE,CADA;AAUTM,kBAAY,EAAE,CACb,sDADa;AAVL,KAAT,CAc4B,GAAhBD,gBAAgB,CAAhB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACnBb,QAAaE,UAAU,6BAAvB;AAAA;;AAII,WAAAC,IAAA,GAAe,EAAf;AAQA,WAAAC,WAAA,GAAwB,CAAC,EAAD,EAAI,EAAJ,CAAxB;AACH,KAbsB,CAAvB;;AAAaF,cAAU,6DAHtB,gEAAU;AACPG,cAAQ,EAAR;AAAA;AAAA;AADO,KAAV,CAGsB,GAAVH,UAAU,CAAV","file":"components-slider-sliderdemo-module-es5.js","sourcesContent":["export default \"<div class=\\\"content-section introduction\\\">\\n    <div>\\n        <span class=\\\"feature-title\\\">Slider</span>\\n        <span>Slider is a component to provide input using dragging of a handle.</span>\\n    </div>\\n</div>\\n\\n<div class=\\\"content-section implementation\\\">\\n    <h3 class=\\\"first\\\">Basic: {{val1}}</h3>\\n    <p-slider [(ngModel)]=\\\"val1\\\" [style]=\\\"{'width':'14em'}\\\"></p-slider>\\n\\n    <h3>Input: {{val2}}</h3>\\n    <input type=\\\"text\\\" pInputText [(ngModel)]=\\\"val2\\\" style=\\\"width:14em\\\" readonly/>\\n    <p-slider [(ngModel)]=\\\"val2\\\" [style]=\\\"{'width':'14em'}\\\"></p-slider>\\n\\n    <h3>Animate: {{val3}}</h3>\\n    <p-slider [(ngModel)]=\\\"val3\\\" [style]=\\\"{'width':'14em'}\\\" [animate]=\\\"true\\\"></p-slider>\\n\\n    <h3>Step: {{val4}}</h3>\\n    <p-slider [(ngModel)]=\\\"val4\\\" [style]=\\\"{'width':'14em'}\\\" [step]=\\\"20\\\"></p-slider>\\n\\n    <h3>Range: {{rangeValues[0] + ' - ' + rangeValues[1]}}</h3>\\n    <p-slider [(ngModel)]=\\\"rangeValues\\\" [style]=\\\"{'width':'14em'}\\\" [range]=\\\"true\\\"></p-slider>\\n\\n    <h3>Vertical: {{val5}}</h3>\\n    <p-slider [(ngModel)]=\\\"val5\\\" [style]=\\\"{'height':'14em'}\\\" orientation=\\\"vertical\\\"></p-slider>\\n</div>\\n\\n<div class=\\\"content-section documentation\\\">\\n    <p-tabView>\\n        <p-tabPanel header=\\\"Documentation\\\">\\n            <h3>Import</h3>\\n<pre>\\n<code class=\\\"language-typescript\\\" pCode ngNonBindable>\\nimport &#123;SliderModule&#125; from 'primeng/slider';\\n</code>\\n</pre>\\n\\n            <h3>Getting Started</h3>\\n            <p>Two-way binding is defined using the standard <i>ngModel</i> directive.</p>\\n<pre>\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\n&lt;p-slider [(ngModel)]=\\\"val\\\"&gt;&lt;/p-slider&gt;\\n</code>\\n</pre>\\n\\n<pre>\\n<code class=\\\"language-typescript\\\" pCode ngNonBindable>\\nexport class MyModel &#123;\\n\\n    val: number;\\n\\n&#125;\\n</code>\\n</pre>\\n\\n            <h3>Model Driven Forms</h3>\\n            <p>Slider can be used in a model driven form as well.</p>\\n<pre>\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\n&lt;p-slider formControlName=\\\"age\\\"&gt;&lt;/p-slider&gt;\\n</code>\\n</pre>\\n\\n            <h3>Min-Max</h3>\\n            <p>Boundaries are specified with <i>min</i> and <i>max</i> attributes.</p>\\n<pre>\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\n&lt;p-slider [(ngModel)]=\\\"val\\\" [min]=\\\"0\\\" [max]=\\\"100\\\"&gt;&lt;/p-slider&gt;\\n</code>\\n</pre>\\n\\n            <h3>Step</h3>\\n            <p>Step factor is 1 by default and can be customized with <i>step</i> option.</p>\\n<pre>\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\n&lt;p-slider [(ngModel)]=\\\"val\\\" [step]=\\\"10\\\"&gt;&lt;/p-slider&gt;\\n</code>\\n</pre>\\n\\n            <h3>Range</h3>\\n            <p>Range slider provides two handles to define two values. In this case, value binding should refer to an array.</p>\\n<pre>\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\n&lt;p-slider [(ngModel)]=\\\"rangeValues\\\" [range]=\\\"true\\\"&gt;&lt;/p-slider&gt;\\n</code>\\n</pre>\\n\\n<pre>\\n<code class=\\\"language-typescript\\\" pCode ngNonBindable>\\nexport class MyModel &#123;\\n\\n    rangeValues: number[];\\n\\n&#125;\\n</code>\\n</pre>\\n\\n            <h3>Orientation</h3>\\n            <p>Sliders supports two <i>orientation</i>, horizontal is the default and other alternative is vertical.</p>\\n<pre>\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\n&lt;p-slider [(ngModel)]=\\\"val\\\" orientation=\\\"vertical\\\"&gt;&lt;/p-slider&gt;\\n</code>\\n</pre>\\n\\n            <h3>Properties</h3>\\n            <div class=\\\"doc-tablewrapper\\\">\\n                <table class=\\\"doc-table\\\">\\n                    <thead>\\n                        <tr>\\n                            <th>Name</th>\\n                            <th>Type</th>\\n                            <th>Default</th>\\n                            <th>Description</th>\\n                        </tr>\\n                    </thead>\\n                    <tbody>\\n                        <tr>\\n                            <td>animate</td>\\n                            <td>boolean</td>\\n                            <td>false</td>\\n                            <td>When enabled, displays an animation on click of the slider bar.</td>\\n                        </tr>\\n                        <tr>\\n                            <td>disabled</td>\\n                            <td>boolean</td>\\n                            <td>false</td>\\n                            <td>When present, it specifies that the element should be disabled.</td>\\n                        </tr>\\n                        <tr>\\n                            <td>min</td>\\n                            <td>number</td>\\n                            <td>0</td>\\n                            <td>Mininum boundary value.</td>\\n                        </tr>\\n                        <tr>\\n                            <td>max</td>\\n                            <td>number</td>\\n                            <td>100</td>\\n                            <td>Maximum boundary value.</td>\\n                        </tr>\\n                        <tr>\\n                            <td>orientation</td>\\n                            <td>string</td>\\n                            <td>horizontal</td>\\n                            <td>Orientation of the slider, valid values are horizontal and vertical.</td>\\n                        </tr>\\n                        <tr>\\n                            <td>step</td>\\n                            <td>number</td>\\n                            <td>1</td>\\n                            <td>Step factor to increment/decrement the value.</td>\\n                        </tr>\\n                        <tr>\\n                            <td>range</td>\\n                            <td>boolean</td>\\n                            <td>false</td>\\n                            <td>When specified, allows two boundary values to be picked.</td>\\n                        </tr>\\n                        <tr>\\n                            <td>style</td>\\n                            <td>string</td>\\n                            <td>null</td>\\n                            <td>Inline style of the component.</td>\\n                        </tr>\\n                        <tr>\\n                            <td>styleClass</td>\\n                            <td>string</td>\\n                            <td>null</td>\\n                            <td>Style class of the component.</td>\\n                        </tr>\\n                        <tr>\\n                            <td>tabindex</td>\\n                            <td>number</td>\\n                            <td>0</td>\\n                            <td>Index of the element in tabbing order.</td>\\n                        </tr>\\n                        <tr>\\n                            <td>ariaLabelledBy</td>\\n                            <td>string</td>\\n                            <td>null</td>\\n                            <td>Establishes relationships between the component and label(s) where its value should be one or more element IDs.</td>\\n                        </tr>\\n                    </tbody>\\n                </table>\\n            </div>\\n\\n            <h3>Events</h3>\\n            <div class=\\\"doc-tablewrapper\\\">\\n                <table class=\\\"doc-table\\\">\\n                    <thead>\\n                        <tr>\\n                            <th>Name</th>\\n                            <th>Parameters</th>\\n                            <th>Description</th>\\n                        </tr>\\n                    </thead>\\n                    <tbody>\\n                        <tr>\\n                            <td>onChange</td>\\n                            <td>\\n                                event.originalEvent: Slide event <br />\\n                                event.value: New value <br />\\n                                event.values: Values in range mode <br />\\n                            </td>\\n                            <td>Callback to invoke on value change via slide.</td>\\n                        </tr>\\n                        <tr>\\n                            <td>onSlideEnd</td>\\n                            <td>\\n                                event.originalEvent: Mouseup event<br />\\n                                event.value: New value \\n                            </td>\\n                            <td>Callback to invoke when slide stops.</td>\\n                        </tr>\\n                    </tbody>\\n                </table>\\n            </div>\\n<pre>\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\n&lt;p-slider [(ngModel)]=\\\"val\\\" (onChange)=\\\"handleChange($event)\\\"&gt;&lt;/p-slider&gt;\\n</code>\\n</pre>\\n\\n<pre>\\n<code class=\\\"language-typescript\\\" pCode ngNonBindable>\\nhandleChange(e) &#123;\\n    //e.value is the new value\\n&#125;\\n</code>\\n</pre>\\n\\n            <h3>Styling</h3>\\n            <p>Following is the list of structural style classes, for theming classes visit <a href=\\\"#\\\" [routerLink]=\\\"['/theming']\\\">theming page</a>.</p>\\n            <div class=\\\"doc-tablewrapper\\\">\\n                <table class=\\\"doc-table\\\">\\n                    <thead>\\n                        <tr>\\n                            <th>Name</th>\\n                            <th>Element</th>\\n                        </tr>\\n                    </thead>\\n                    <tbody>\\n                        <tr>\\n                            <td>ui-slider</td>\\n                            <td>Container element</td>\\n                        </tr>\\n                        <tr>\\n                            <td>ui-slider-handle</td>\\n                            <td>Handle element</td>\\n                        </tr>\\n                    </tbody>\\n                </table>\\n            </div>\\n\\n            <h3>Dependencies</h3>\\n            <p>None.</p>\\n        </p-tabPanel>\\n\\n        <p-tabPanel header=\\\"Source\\\">\\n            <a href=\\\"https://github.com/primefaces/primeng/tree/master/src/app/showcase/components/slider\\\" class=\\\"btn-viewsource\\\" target=\\\"_blank\\\">\\n                <span>View on GitHub</span>\\n            </a>\\n            <a href=\\\"https://stackblitz.com/edit/primeng-slider-demo\\\" class=\\\"btn-viewsource\\\" style=\\\"margin-left: .5em;\\\" target=\\\"_blank\\\">\\n                <span>Edit in StackBlitz</span>\\n            </a>\\n<pre>\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\n&lt;h3 class=\\\"first\\\"&gt;Basic: {{val1}}&lt;/h3&gt;\\n&lt;p-slider [(ngModel)]=\\\"val1\\\" [style]=\\\"&#123;'width':'14em'&#125;\\\"&gt;&lt;/p-slider&gt;\\n\\n&lt;h3&gt;Input: {{val2}}&lt;/h3&gt;\\n&lt;input type=\\\"text\\\" pInputText [(ngModel)]=\\\"val2\\\" style=\\\"width:14em\\\"/&gt;\\n&lt;p-slider [(ngModel)]=\\\"val2\\\" [style]=\\\"&#123;'width':'14em'&#125;\\\"&gt;&lt;/p-slider&gt;\\n\\n&lt;h3&gt;Animate: {{val3}}&lt;/h3&gt;\\n&lt;p-slider [(ngModel)]=\\\"val3\\\" [style]=\\\"&#123;'width':'14em'&#125;\\\" [animate]=\\\"true\\\"&gt;&lt;/p-slider&gt;\\n\\n&lt;h3&gt;Step: {{val4}}&lt;/h3&gt;\\n&lt;p-slider [(ngModel)]=\\\"val4\\\" [style]=\\\"&#123;'width':'14em'&#125;\\\" [step]=\\\"20\\\"&gt;&lt;/p-slider&gt;\\n\\n&lt;h3&gt;Range: {{rangeValues[0] + ' - ' + rangeValues[1]}}&lt;/h3&gt;\\n&lt;p-slider [(ngModel)]=\\\"rangeValues\\\" [style]=\\\"&#123;'width':'14em'&#125;\\\" [range]=\\\"true\\\"&gt;&lt;/p-slider&gt;\\n\\n&lt;h3&gt;Vertical: {{val5}}&lt;/h3&gt;\\n&lt;p-slider [(ngModel)]=\\\"val5\\\" [style]=\\\"&#123;'height':'14em'&#125;\\\" orientation=\\\"vertical\\\"&gt;&lt;/p-slider&gt;\\n</code>\\n</pre>\\n\\n<pre>\\n<code class=\\\"language-typescript\\\" pCode ngNonBindable>\\nexport class SliderDemo &#123;\\n\\n    val1: number;\\n\\n    val2: number = 50;\\n\\n    val3: number;\\n\\n    val4: number;\\n\\n    val5: number;\\n\\n    rangeValues: number[] = [20,80];\\n&#125;\\n</code>\\n</pre>\\n        </p-tabPanel>\\n        <p-tabPanel header=\\\"StackBlitz\\\">\\n            <ng-template pTemplate=\\\"content\\\">\\n                <iframe src=\\\"https://stackblitz.com/edit/primeng-slider-demo?embed=1\\\" style=\\\"width: 100%; height: 768px; border: none;\\\"></iframe>\\n            </ng-template>\\n        </p-tabPanel>\\n    </p-tabView>\\n</div>\\n\";","import {NgModule} from '@angular/core';\nimport {RouterModule} from '@angular/router'\nimport {SliderDemo} from './sliderdemo';\n\n@NgModule({\n\timports: [\n\t\tRouterModule.forChild([\n\t\t\t{path:'',component: SliderDemo}\n\t\t])\n\t],\n\texports: [\n\t\tRouterModule\n\t]\n})\nexport class SliderDemoRoutingModule {}\n","import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {FormsModule} from '@angular/forms';\nimport {SliderDemo} from './sliderdemo';\nimport {SliderDemoRoutingModule} from './sliderdemo-routing.module';\nimport {SliderModule} from 'primeng/slider';\nimport {InputTextModule} from 'primeng/inputtext';\nimport {TabViewModule} from 'primeng/tabview';\nimport {CodeHighlighterModule} from 'primeng/codehighlighter';\n\n@NgModule({\n\timports: [\n\t\tCommonModule,\n        FormsModule,\n\t\tSliderDemoRoutingModule,\n        SliderModule,\n        InputTextModule,\n        TabViewModule,\n        CodeHighlighterModule\n\t],\n\tdeclarations: [\n\t\tSliderDemo\n\t]\n})\nexport class SliderDemoModule {}\n","import {Component} from '@angular/core';\n\n@Component({\n    templateUrl: './sliderdemo.html'\n})\nexport class SliderDemo {\n\n    val1: number;\n\n    val2: number = 50;\n\n    val3: number;\n\n    val4: number;\n\n    val5: number;\n\n    rangeValues: number[] = [20,80];\n}"]}