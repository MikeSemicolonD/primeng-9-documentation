{"version":3,"sources":["webpack:///src/app/showcase/components/gmap/gmapdemo.html","webpack:///src/app/components/checkbox/checkbox.ts","webpack:///src/app/components/checkbox/public_api.ts","webpack:///src/app/showcase/components/gmap/gmapdemo-routing.module.ts","webpack:///src/app/showcase/components/gmap/gmapdemo.module.ts","webpack:///src/app/showcase/components/gmap/gmapdemo.ts"],"names":["CHECKBOX_VALUE_ACCESSOR","provide","useExisting","Checkbox","multi","cd","checkboxIcon","onChange","onModelChange","onModelTouched","focused","checked","onClick","event","checkbox","focus","preventDefault","disabled","readonly","updateModel","binary","addValue","removeValue","model","formControl","setValue","emit","originalEvent","handleChange","target","isChecked","indexOf","value","filter","val","onFocus","onBlur","inputViewChild","nativeElement","writeValue","markForCheck","registerOnChange","fn","registerOnTouched","setDisabledState","selector","template","providers","changeDetection","Default","CheckboxModule","imports","exports","declarations","GMapDemoRoutingModule","forChild","path","component","GMapDemoModule","GMapDemo","messageService","ngOnInit","options","center","lat","lng","zoom","initOverlays","infoWindow","google","maps","InfoWindow","handleMapClick","dialogVisible","selectedPosition","latLng","handleOverlayClick","isMarker","overlay","getTitle","undefined","title","setContent","open","map","setCenter","getPosition","add","severity","summary","detail","addMarker","overlays","push","Marker","position","markerTitle","draggable","handleDragEnd","length","Polygon","paths","strokeOpacity","strokeWeight","fillColor","fillOpacity","Circle","radius","Polyline","geodesic","strokeColor","zoomIn","setZoom","getZoom","zoomOut","clear"],"mappings":"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","file":"components-gmap-gmapdemo-module-es5.js","sourcesContent":["export default \"<div class=\\\"content-section introduction\\\">\\n    <div>\\n        <span class=\\\"feature-title\\\">GMap</span>\\n        <span>GMap component provides integration with Google Maps API. This sample demontrates\\n        various uses cases like binding, overlays and events. Click the map to add a new item.</span>\\n    </div>\\n</div>\\n\\n<div class=\\\"content-section implementation\\\">\\n    <p-toast></p-toast>\\n\\n    <p-gmap #gmap [style]=\\\"{'width':'100%','height':'320px', 'margin-bottom': '1em'}\\\" [options]=\\\"options\\\" [overlays]=\\\"overlays\\\"\\n       (onMapClick)=\\\"handleMapClick($event)\\\" (onOverlayClick)=\\\"handleOverlayClick($event)\\\" (onOverlayDragEnd)=\\\"handleDragEnd($event)\\\"></p-gmap>\\n\\n    <button type=\\\"button\\\" pButton label=\\\"Clear\\\" icon=\\\"pi pi-times\\\" (click)=\\\"clear()\\\" style=\\\"margin-right:.25em\\\"></button>\\n    <button type=\\\"button\\\" pButton label=\\\"Zoom In\\\" icon=\\\"pi pi-plus\\\" (click)=\\\"zoomIn(gmap.getMap())\\\" style=\\\"margin-right:.25em\\\"></button>\\n    <button type=\\\"button\\\" pButton label=\\\"Zoom Out\\\" icon=\\\"pi pi-minus\\\" (click)=\\\"zoomOut(gmap.getMap())\\\"></button>\\n\\n    <p-dialog showEffect=\\\"fade\\\" [(visible)]=\\\"dialogVisible\\\" header=\\\"New Location\\\" [style]=\\\"{width: '300px'}\\\">\\n        <div class=\\\"p-grid ui-fluid\\\" *ngIf=\\\"selectedPosition\\\">\\n            <div class=\\\"p-col-2\\\"><label for=\\\"title\\\">Label</label></div>\\n            <div class=\\\"p-col-10\\\"><input type=\\\"text\\\" pInputText id=\\\"title\\\" [(ngModel)]=\\\"markerTitle\\\"></div>\\n\\n            <div class=\\\"p-col-2\\\"><label for=\\\"lat\\\">Lat</label></div>\\n            <div class=\\\"p-col-10\\\"><input id=\\\"lat\\\" type=\\\"text\\\" readonly pInputText [ngModel]=\\\"selectedPosition.lat()\\\"></div>\\n\\n            <div class=\\\"p-col-2\\\"><label for=\\\"lng\\\">Lng</label></div>\\n            <div class=\\\"p-col-10\\\"><input id=\\\"lng\\\" type=\\\"text\\\" readonly pInputText [ngModel]=\\\"selectedPosition.lng()\\\"></div>\\n\\n            <div class=\\\"p-col-2\\\"><label for=\\\"drg\\\">Drag</label></div>\\n            <div class=\\\"p-col-10\\\"><p-checkbox [(ngModel)]=\\\"draggable\\\" binary=\\\"true\\\" [style]=\\\"{'margin-top':'.25em'}\\\"></p-checkbox></div>\\n        </div>\\n        <p-footer>\\n            <div class=\\\"ui-dialog-buttonpane ui-helper-clearfix\\\">\\n                <button type=\\\"button\\\" pButton label=\\\"Add Marker\\\" icon=\\\"pi pi-plus\\\" (click)=\\\"addMarker()\\\"></button>\\n            </div>\\n        </p-footer>\\n    </p-dialog>\\n</div>\\n\\n<div class=\\\"content-section documentation\\\">\\n    <p-tabView>\\n        <p-tabPanel header=\\\"Documentation\\\">\\n            <h3>Import</h3>\\n<pre>\\n<code class=\\\"language-typescript\\\" pCode ngNonBindable>\\nimport &#123;GMapModule&#125; from 'primeng/gmap';\\n</code>\\n</pre>\\n\\n            <h3>Getting Started</h3>\\n            <p>A map is initialized with options and dimensions. Refer to the google maps api for the list of available options.</p>\\n<pre>\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\n&lt;p-gmap [options]=\\\"options\\\" [style]=\\\"&#123;'width':'100%','height':'320px'&#125;\\\" &gt;&lt;/p-gmap&gt;\\n</code>\\n</pre>\\n\\n<pre>\\n<code class=\\\"language-typescript\\\" pCode ngNonBindable>\\nexport class MyModel &#123;\\n\\n    options: any;\\n\\n    overlays: any[];\\n\\n    ngOnInit() &#123;\\n        this.options = &#123;\\n            center: &#123;lat: 36.890257, lng: 30.707417&#125;,\\n            zoom: 12\\n        &#125;;\\n    &#125;\\n\\n&#125;\\n</code>\\n</pre>\\n\\n            <h3>Overlays</h3>\\n            <p>GMap can display any type of overlay such as markers, polygons and circles. Overlay instances are bound using the overlays property array. Overlays are aware\\n            of one-way binding so whenever the array changes, gmap updates itself.</p>\\n<pre>\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\n&lt;p-gmap [options]=\\\"options\\\" [overlays]=\\\"overlays\\\" [style]=\\\"&#123;'width':'100%','height':'320px'&#125;\\\" &gt;&lt;/p-gmap&gt;\\n</code>\\n</pre>\\n\\n<pre>\\n<code class=\\\"language-typescript\\\" pCode ngNonBindable>\\nexport class MyModel &#123;\\n\\n    options: any;\\n\\n    overlays: any[];\\n\\n    ngOnInit() &#123;\\n        this.options = &#123;\\n            center: &#123;lat: 36.890257, lng: 30.707417&#125;,\\n            zoom: 12\\n        &#125;;\\n\\n        this.overlays = [\\n            new google.maps.Marker(&#123;position: &#123;lat: 36.879466, lng: 30.667648&#125;, title:\\\"Konyaalti\\\"&#125;),\\n            new google.maps.Marker(&#123;position: &#123;lat: 36.883707, lng: 30.689216&#125;, title:\\\"Ataturk Park\\\"&#125;),\\n            new google.maps.Marker(&#123;position: &#123;lat: 36.885233, lng: 30.702323&#125;, title:\\\"Oldtown\\\"&#125;),\\n            new google.maps.Polygon(&#123;paths: [\\n                &#123;lat: 36.9177, lng: 30.7854&#125;,&#123;lat: 36.8851, lng: 30.7802&#125;,&#123;lat: 36.8829, lng: 30.8111&#125;,&#123;lat: 36.9177, lng: 30.8159&#125;\\n            ], strokeOpacity: 0.5, strokeWeight: 1,fillColor: '#1976D2', fillOpacity: 0.35\\n            &#125;),\\n            new google.maps.Circle(&#123;center: &#123;lat: 36.90707, lng: 30.56533&#125;, fillColor: '#1976D2', fillOpacity: 0.35, strokeWeight: 1, radius: 1500&#125;),\\n            new google.maps.Polyline(&#123;path: [&#123;lat: 36.86149, lng: 30.63743&#125;,&#123;lat: 36.86341, lng: 30.72463&#125;], geodesic: true, strokeColor: '#FF0000', strokeOpacity: 0.5, strokeWeight: 2&#125;)\\n        ];\\n    &#125;\\n&#125;\\n</code>\\n</pre>\\n\\n            <h3>Events</h3>\\n            <p>GMap provides common callbacks to hook into events including map click, overlay click and overlay dragging.</p>\\n<pre>\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\n&lt;p-gmap [options]=\\\"options\\\" [overlays]=\\\"overlays\\\" [style]=\\\"&#123;'width':'100%','height':'320px'&#125;\\\"\\n            (onMapClick)=\\\"handleMapClick($event)\\\" (onOverlayClick)=\\\"handleOverlayClick($event)\\\"&gt;&lt;/p-gmap&gt;\\n</code>\\n</pre>\\n\\n<pre>\\n<code class=\\\"language-typescript\\\" pCode ngNonBindable>\\nexport class MyModel &#123;\\n\\n    options: any;\\n\\n    overlays: any[];\\n\\n    ngOnInit() &#123;\\n        this.options = &#123;\\n            center: &#123;lat: 36.890257, lng: 30.707417&#125;,\\n            zoom: 12\\n        &#125;;\\n\\n        this.overlays = [\\n            new google.maps.Marker(&#123;position: &#123;lat: 36.879466, lng: 30.667648&#125;, title:\\\"Konyaalti\\\"&#125;),\\n            new google.maps.Marker(&#123;position: &#123;lat: 36.883707, lng: 30.689216&#125;, title:\\\"Ataturk Park\\\"&#125;),\\n            new google.maps.Marker(&#123;position: &#123;lat: 36.885233, lng: 30.702323&#125;, title:\\\"Oldtown\\\"&#125;),\\n            new google.maps.Polygon(&#123;paths: [\\n                &#123;lat: 36.9177, lng: 30.7854&#125;,&#123;lat: 36.8851, lng: 30.7802&#125;,&#123;lat: 36.8829, lng: 30.8111&#125;,&#123;lat: 36.9177, lng: 30.8159&#125;\\n            ], strokeOpacity: 0.5, strokeWeight: 1,fillColor: '#1976D2', fillOpacity: 0.35\\n            &#125;),\\n            new google.maps.Circle(&#123;center: &#123;lat: 36.90707, lng: 30.56533&#125;, fillColor: '#1976D2', fillOpacity: 0.35, strokeWeight: 1, radius: 1500&#125;),\\n            new google.maps.Polyline(&#123;path: [&#123;lat: 36.86149, lng: 30.63743&#125;,&#123;lat: 36.86341, lng: 30.72463&#125;], geodesic: true, strokeColor: '#FF0000', strokeOpacity: 0.5, strokeWeight: 2&#125;)\\n        ];\\n    &#125;\\n\\n    handleMapClick(event) &#123;\\n        //event: MouseEvent of Google Maps api\\n    &#125;\\n\\n    handleOverlayClick(event) &#123;\\n        //event.originalEvent: MouseEvent of Google Maps api\\n        //event.overlay: Clicked overlay\\n        //event.map: Map instance\\n    &#125;\\n&#125;\\n</code>\\n</pre>\\n\\n            <h3>Google Maps API</h3>\\n            <p>In case you need to access the map instance directly, use the getMap() method.</p>\\n<pre>\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\n&lt;p-gmap #gmap [options]=\\\"options\\\"&gt;&lt;/p-gmap&gt;\\n\\n&lt;button type=\\\"button\\\" pButton label=\\\"Zoom In\\\" icon=\\\"pi-search-plus\\\" (click)=\\\"zoomIn(gmap.getMap())\\\"&gt;&lt;/button&gt;\\n</code>\\n</pre>\\n\\n<pre>\\n<code class=\\\"language-typescript\\\" pCode ngNonBindable>\\nexport class MyModel &#123;\\n\\n    options: any;\\n\\n    overlays: any[];\\n\\n    ngOnInit() &#123;\\n        this.options = &#123;\\n            center: &#123;lat: 36.890257, lng: 30.707417&#125;,\\n            zoom: 12\\n        &#125;;\\n    &#125;\\n\\n    zoomIn(map) &#123;\\n        map.setZoom(map.getZoom()+1);\\n    &#125;\\n&#125;\\n</code>\\n</pre>\\n            <p>Another option is to to get the map object directly after init via (onMapReady) event.\\n               In the example below, google.maps.Map is used for adjusting map bounds to markers.</p>\\n<pre>\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\n&lt;p-gmap #gmap [options]=\\\"options\\\" [overlays]=\\\"overlays\\\" [style]=\\\"mapStyle\\\"\\n    (onMapReady)=\\\"setMap($event)\\\"&gt;&lt;/p-gmap&gt;\\n</code>\\n</pre>\\n            <p>Then from your component you would write</p>\\n<pre>\\n<code class=\\\"language-typescript\\\" pCode ngNonBindable>\\nexport class MyModel &#123;\\n\\n    options: any;\\n\\n    overlays: any[];\\n\\n    map: google.maps.Map;\\n\\n    setMap(event) &#123;\\n        this.map = event.map;\\n    &#125;\\n\\n    ngOnInit() &#123;\\n        let bounds = new google.maps.LatLngBounds();\\n        this.overlays = [\\n            new google.maps.Marker(&#123;position: &#123;lat: 36.879466, lng: 30.667648&#125;, title:\\\"Konyaalti\\\"&#125;),\\n            new google.maps.Marker(&#123;position: &#123;lat: 36.883707, lng: 30.689216&#125;, title:\\\"Ataturk Park\\\"&#125;),\\n            new google.maps.Marker(&#123;position: &#123;lat: 36.885233, lng: 30.702323&#125;, title:\\\"Oldtown\\\"&#125;),\\n        ]\\n        // ... extend bounds\\n        this.overlays.forEach(marker => &#123;\\n            bounds.extend(marker.getPosition());\\n        &#125;);\\n\\n        setTimeout(()=> &#123; // map will need some time to load\\n            this.map.fitBounds(bounds); // Map object used directly\\n        &#125;, 1000);\\n    &#125;\\n&#125;\\n</code>\\n</pre>\\n\\n            <h3>Properties</h3>\\n            <div class=\\\"doc-tablewrapper\\\">\\n                <table class=\\\"doc-table\\\">\\n                    <thead>\\n                    <tr>\\n                        <th>Name</th>\\n                        <th>Type</th>\\n                        <th>Default</th>\\n                        <th>Description</th>\\n                    </tr>\\n                    </thead>\\n                    <tbody>\\n                        <tr>\\n                            <td>options</td>\\n                            <td>any</td>\\n                            <td>null</td>\\n                            <td>Google Maps API configuration object.</td>\\n                        </tr>\\n                        <tr>\\n                            <td>overlays</td>\\n                            <td>array</td>\\n                            <td>null</td>\\n                            <td>An array of overlays to display.</td>\\n                        </tr>\\n                        <tr>\\n                            <td>style</td>\\n                            <td>string</td>\\n                            <td>null</td>\\n                            <td>Inline style of the component.</td>\\n                        </tr>\\n                        <tr>\\n                            <td>styleClass</td>\\n                            <td>string</td>\\n                            <td>null</td>\\n                            <td>Style class of the component.</td>\\n                        </tr>\\n                    </tbody>\\n                </table>\\n            </div>\\n\\n            <h3>Events</h3>\\n            <div class=\\\"doc-tablewrapper\\\">\\n                <table class=\\\"doc-table\\\">\\n                    <thead>\\n                        <tr>\\n                            <th>Name</th>\\n                            <th>Parameters</th>\\n                            <th>Description</th>\\n                        </tr>\\n                    </thead>\\n                    <tbody>\\n                        <tr>\\n                            <td>onMapClick</td>\\n                            <td>event: Google Maps MouseEvent</td>\\n                            <td>Callback to invoke when map is clicked except markers.</td>\\n                        </tr>\\n                        <tr>\\n                            <td>onMapDragEnd</td>\\n                            <td>originalEvent: Google Maps dragend<br></td>\\n                            <td>Callback to invoke when map drag (i.e. pan) has ended.</td>\\n                        </tr>\\n                        <tr>\\n                            <td>onMapReady</td>\\n                            <td>event.map: Google Maps Instance</td>\\n                            <td>Callback to invoke when the map is ready to be used.</td>\\n                        </tr>\\n                        <tr>\\n                            <td>onOverlayClick</td>\\n                            <td>originalEvent: Google Maps MouseEvent <br>\\n                                overlay: Clicked overlay <br>\\n                                map: Map instance <br></td>\\n                            <td>Callback to invoke when an overlay is clicked.</td>\\n                        </tr>\\n                        <tr>\\n                            <td>onOverlayDblClick</td>\\n                            <td>originalEvent: Google Maps MouseEvent <br>\\n                                overlay: Clicked overlay <br>\\n                                map: Map instance <br></td>\\n                            <td>Callback to invoke when an overlay is double clicked.</td>\\n                        </tr>\\n                        <tr>\\n                            <td>onOverlayDrag</td>\\n                            <td>originalEvent: Google Maps MouseEvent <br>\\n                                overlay: Clicked overlay <br>\\n                                map: Map instance <br></td>\\n                            <td>Callback to invoke when an overlay is being dragged.</td>\\n                        </tr>\\n                        <tr>\\n                            <td>onOverlayDragEnd</td>\\n                            <td>originalEvent: Google Maps MouseEvent <br>\\n                                overlay: Clicked overlay <br>\\n                                map: Map instance <br></td>\\n                            <td>Callback to invoke when an overlay drag ends.</td>\\n                        </tr>\\n                        <tr>\\n                            <td>onOverlayDragStart</td>\\n                            <td>originalEvent: Google Maps MouseEvent <br>\\n                                overlay: Clicked overlay <br>\\n                                map: Map instance <br></td>\\n                            <td>Callback to invoke when an overlay drag starts.</td>\\n                        </tr>\\n                        <tr>\\n                            <td>onZoomChanged</td>\\n                            <td>originalEvent: Google Maps zoom_changed</td>\\n                            <td>Callback to invoke when zoom level has changed.</td>\\n                        </tr>\\n                    </tbody>\\n                </table>\\n            </div>\\n\\n            <h3>Dependencies</h3>\\n            <p>Google Maps API.</p>\\n        </p-tabPanel>\\n\\n        <p-tabPanel header=\\\"Source\\\">\\n            <a href=\\\"https://github.com/primefaces/primeng/tree/master/src/app/showcase/components/gmap\\\" class=\\\"btn-viewsource\\\" target=\\\"_blank\\\">\\n                <span>View on GitHub</span>\\n            </a>\\n<pre>\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\n&lt;p-toast [style]=\\\"&#123;marginTop: '80px'&#125;\\\"&gt;&lt;/p-toast&gt;\\n\\n&lt;p-gmap #gmap [style]=\\\"&#123;'width':'100%','height':'320px', 'margin-bottom': '1em'&#125;\\\" [options]=\\\"options\\\" [overlays]=\\\"overlays\\\"\\n       (onMapClick)=\\\"handleMapClick($event)\\\" (onOverlayClick)=\\\"handleOverlayClick($event)\\\" (onOverlayDragEnd)=\\\"handleDragEnd($event)\\\"&gt;&lt;/p-gmap&gt;\\n\\n&lt;button type=\\\"button\\\" pButton label=\\\"Clear\\\" icon=\\\"pi pi-times\\\" (click)=\\\"clear()\\\" style=\\\"margin-right:.25em\\\"&gt;&lt;/button&gt;\\n&lt;button type=\\\"button\\\" pButton label=\\\"Zoom In\\\" icon=\\\"pi pi-plus\\\" (click)=\\\"zoomIn(gmap.getMap())\\\" style=\\\"margin-right:.25em\\\"&gt;&lt;/button&gt;\\n&lt;button type=\\\"button\\\" pButton label=\\\"Zoom Out\\\" icon=\\\"pi pi-minus\\\" (click)=\\\"zoomOut(gmap.getMap())\\\"&gt;&lt;/button&gt;\\n\\n&lt;p-dialog showEffect=\\\"fade\\\" [(visible)]=\\\"dialogVisible\\\" header=\\\"New Location\\\" [style]=\\\"&#123;width: '300px'&#125;\\\">&gt;\\n    &lt;div class=\\\"p-grid ui-fluid\\\" *ngIf=\\\"selectedPosition\\\"&gt;\\n        &lt;div class=\\\"p-col-2\\\"&gt;&lt;label for=\\\"title\\\"&gt;Label&lt;/label&gt;&lt;/div&gt;\\n        &lt;div class=\\\"p-col-10\\\"&gt;&lt;input type=\\\"text\\\" pInputText id=\\\"title\\\" [(ngModel)]=\\\"markerTitle\\\"&gt;&lt;/div&gt;\\n\\n        &lt;div class=\\\"p-col-2\\\"&gt;&lt;label for=\\\"lat\\\"&gt;Lat&lt;/label&gt;&lt;/div&gt;\\n        &lt;div class=\\\"p-col-10\\\"&gt;&lt;input id=\\\"lat\\\" type=\\\"text\\\" readonly pInputText [ngModel]=\\\"selectedPosition.lat()\\\"&gt;&lt;/div&gt;\\n\\n        &lt;div class=\\\"p-col-2\\\"&gt;&lt;label for=\\\"lng\\\"&gt;Lng&lt;/label&gt;&lt;/div&gt;\\n        &lt;div class=\\\"p-col-10\\\"&gt;&lt;input id=\\\"lng\\\" type=\\\"text\\\" readonly pInputText [ngModel]=\\\"selectedPosition.lng()\\\"&gt;&lt;/div&gt;\\n\\n        &lt;div class=\\\"p-col-2\\\"&gt;&lt;label for=\\\"drg\\\"&gt;Drag&lt;/label&gt;&lt;/div&gt;\\n        &lt;div class=\\\"p-col-10\\\"&gt;&lt;p-checkbox [(ngModel)]=\\\"draggable\\\" binary=\\\"true\\\" [style]=\\\"&#123;'margin-top':'.25em'&#125;\\\"&gt;&lt;/p-checkbox&gt;&lt;/div&gt;\\n    &lt;/div&gt;\\n    &lt;p-footer&gt;\\n        &lt;div class=\\\"ui-dialog-buttonpane ui-helper-clearfix\\\"&gt;\\n            &lt;button type=\\\"button\\\" pButton label=\\\"Add Marker\\\" icon=\\\"pi-plus\\\" (click)=\\\"addMarker()\\\"&gt;&lt;/button&gt;\\n        &lt;/div&gt;\\n    &lt;/p-footer&gt;\\n&lt;/p-dialog&gt;\\n</code>\\n</pre>\\n\\n<pre>\\n<code class=\\\"language-typescript\\\" pCode ngNonBindable>\\nexport class GMapDemo implements OnInit &#123;\\n\\n    options: any;\\n\\n    overlays: any[];\\n\\n    dialogVisible: boolean;\\n\\n    markerTitle: string;\\n\\n    selectedPosition: any;\\n\\n    infoWindow: any;\\n\\n    draggable: boolean;\\n\\n    constructor(private messageService: MessageService) &#123;&#125;\\n\\n    ngOnInit() &#123;\\n        this.options = &#123;\\n            center: &#123;lat: 36.890257, lng: 30.707417&#125;,\\n            zoom: 12\\n        &#125;;\\n\\n        this.initOverlays();\\n\\n        this.infoWindow = new google.maps.InfoWindow();\\n    &#125;\\n\\n    handleMapClick(event) &#123;\\n        this.dialogVisible = true;\\n        this.selectedPosition = event.latLng;\\n    &#125;\\n\\n    handleOverlayClick(event) &#123;\\n        let isMarker = event.overlay.getTitle != undefined;\\n\\n        if (isMarker) &#123;\\n            let title = event.overlay.getTitle();\\n            this.infoWindow.setContent('<div>' + title + '</div>');\\n            this.infoWindow.open(event.map, event.overlay);\\n            event.map.setCenter(event.overlay.getPosition());\\n\\n            this.messageService.add(&#123;severity:'info', summary:'Marker Selected', detail: title&#125;);\\n        &#125;\\n        else &#123;\\n            this.messageService.add(&#123;severity:'info', summary:'Shape Selected', detail: ''&#125;);\\n        &#125;\\n    &#125;\\n\\n    addMarker() &#123;\\n        this.overlays.push(new google.maps.Marker(&#123;position:&#123;lat: this.selectedPosition.lat(), lng: this.selectedPosition.lng()&#125;, title:this.markerTitle, draggable: this.draggable&#125;));\\n        this.markerTitle = null;\\n        this.dialogVisible = false;\\n    &#125;\\n\\n    handleDragEnd(event) &#123;\\n        this.messageService.add(&#123;severity:'info', summary:'Marker Dragged', detail: event.overlay.getTitle()&#125;);\\n    &#125;\\n\\n    initOverlays() &#123;\\n        if (!this.overlays||!this.overlays.length) &#123;\\n            this.overlays = [\\n                new google.maps.Marker(&#123;position: &#123;lat: 36.879466, lng: 30.667648&#125;, title:\\\"Konyaalti\\\"&#125;),\\n                new google.maps.Marker(&#123;position: &#123;lat: 36.883707, lng: 30.689216&#125;, title:\\\"Ataturk Park\\\"&#125;),\\n                new google.maps.Marker(&#123;position: &#123;lat: 36.885233, lng: 30.702323&#125;, title:\\\"Oldtown\\\"&#125;),\\n                new google.maps.Polygon(&#123;paths: [\\n                    &#123;lat: 36.9177, lng: 30.7854&#125;,&#123;lat: 36.8851, lng: 30.7802&#125;,&#123;lat: 36.8829, lng: 30.8111&#125;,&#123;lat: 36.9177, lng: 30.8159&#125;\\n                ], strokeOpacity: 0.5, strokeWeight: 1,fillColor: '#1976D2', fillOpacity: 0.35\\n                &#125;),\\n                new google.maps.Circle(&#123;center: &#123;lat: 36.90707, lng: 30.56533&#125;, fillColor: '#1976D2', fillOpacity: 0.35, strokeWeight: 1, radius: 1500&#125;),\\n                new google.maps.Polyline(&#123;path: [&#123;lat: 36.86149, lng: 30.63743&#125;,&#123;lat: 36.86341, lng: 30.72463&#125;], geodesic: true, strokeColor: '#FF0000', strokeOpacity: 0.5, strokeWeight: 2&#125;)\\n            ];\\n        &#125;\\n    &#125;\\n\\n    zoomIn(map) &#123;\\n        map.setZoom(map.getZoom()+1);\\n    &#125;\\n\\n    zoomOut(map) &#123;\\n        map.setZoom(map.getZoom()-1);\\n    &#125;\\n\\n    clear() &#123;\\n        this.overlays = [];\\n    &#125;\\n&#125;\\n</code>\\n</pre>\\n        </p-tabPanel>\\n    </p-tabView>\\n</div>\\n\";","import {NgModule,Component,Input,Output,EventEmitter,forwardRef,ChangeDetectorRef,ViewChild,ElementRef,ChangeDetectionStrategy} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {NG_VALUE_ACCESSOR, ControlValueAccessor, FormControl} from '@angular/forms';\n\nexport const CHECKBOX_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => Checkbox),\n  multi: true\n};\n\n@Component({\n    selector: 'p-checkbox',\n    template: `\n        <div [ngStyle]=\"style\" [ngClass]=\"{'ui-chkbox ui-widget': true,'ui-chkbox-readonly': readonly}\" [class]=\"styleClass\">\n            <div class=\"ui-helper-hidden-accessible\">\n                <input #cb type=\"checkbox\" [attr.id]=\"inputId\" [attr.name]=\"name\" [readonly]=\"readonly\" [value]=\"value\" [checked]=\"checked\" (focus)=\"onFocus()\" (blur)=\"onBlur()\"\n                [ngClass]=\"{'ui-state-focus':focused}\" (change)=\"handleChange($event)\" [disabled]=\"disabled\" [attr.tabindex]=\"tabindex\" [attr.aria-labelledby]=\"ariaLabelledBy\" [attr.required]=\"required\">\n            </div>\n            <div class=\"ui-chkbox-box ui-widget ui-corner-all ui-state-default\" (click)=\"onClick($event,cb,true)\"\n                        [ngClass]=\"{'ui-state-active':checked,'ui-state-disabled':disabled,'ui-state-focus':focused}\" role=\"checkbox\" [attr.aria-checked]=\"checked\">\n                <span class=\"ui-chkbox-icon ui-clickable\" [ngClass]=\"checked ? checkboxIcon : null\"></span>\n            </div>\n        </div>\n        <label (click)=\"onClick($event,cb,true)\" [class]=\"labelStyleClass\"\n                [ngClass]=\"{'ui-chkbox-label': true, 'ui-label-active':checked, 'ui-label-disabled':disabled, 'ui-label-focus':focused}\"\n                *ngIf=\"label\" [attr.for]=\"inputId\">{{label}}</label>\n    `,\n    providers: [CHECKBOX_VALUE_ACCESSOR],\n    changeDetection: ChangeDetectionStrategy.Default\n})\nexport class Checkbox implements ControlValueAccessor {\n\n    @Input() value: any;\n\n    @Input() name: string;\n\n    @Input() disabled: boolean;\n    \n    @Input() binary: boolean;\n    \n    @Input() label: string;\n\n    @Input() ariaLabelledBy: string;\n\n    @Input() tabindex: number;\n\n    @Input() inputId: string;\n    \n    @Input() style: any;\n\n    @Input() styleClass: string;\n\n    @Input() labelStyleClass: string;\n    \n    @Input() formControl: FormControl;\n    \n    @Input() checkboxIcon: string = 'pi pi-check';\n    \n    @Input() readonly: boolean;\n\n    @Input() required: boolean;\n\n    @ViewChild('cb') inputViewChild: ElementRef;\n\n    @Output() onChange: EventEmitter<any> = new EventEmitter();\n    \n    model: any;\n    \n    onModelChange: Function = () => {};\n    \n    onModelTouched: Function = () => {};\n        \n    focused: boolean = false;\n    \n    checked: boolean = false;\n\n    constructor(private cd: ChangeDetectorRef) {}\n\n    onClick(event,checkbox,focus:boolean) {\n        event.preventDefault();\n        \n        if (this.disabled || this.readonly) {\n            return;\n        }\n        \n        this.checked = !this.checked;\n        this.updateModel(event);\n        \n        if (focus) {\n            checkbox.focus();\n        }\n    }\n    \n    updateModel(event) {\n        if (!this.binary) {\n            if (this.checked)\n                this.addValue();\n            else\n                this.removeValue();\n\n            this.onModelChange(this.model);\n            \n            if (this.formControl) {\n                this.formControl.setValue(this.model);\n            }\n        }\n        else {\n            this.onModelChange(this.checked);\n        }\n        \n        this.onChange.emit({checked:this.checked, originalEvent: event});\n    }\n    \n    handleChange(event) {\n        if (!this.readonly) {\n            this.checked = event.target.checked;\n            this.updateModel(event);\n        }\n    }\n\n    isChecked(): boolean {\n        if (this.binary)\n            return this.model;\n        else\n            return this.model && this.model.indexOf(this.value) > -1;\n    }\n\n    removeValue() {\n        this.model = this.model.filter(val => val !== this.value);\n    }\n\n    addValue() {\n        if (this.model)\n            this.model = [...this.model, this.value];\n        else\n            this.model = [this.value];\n    }\n    \n    onFocus() {\n        this.focused = true;\n    }\n\n    onBlur() {\n        this.focused = false;\n        this.onModelTouched();\n    }\n\n    focus() {\n        this.inputViewChild.nativeElement.focus();\n    }\n     \n    writeValue(model: any) : void {\n        this.model = model;\n        this.checked = this.isChecked();\n        this.cd.markForCheck();\n    }\n    \n    registerOnChange(fn: Function): void {\n        this.onModelChange = fn;\n    }\n\n    registerOnTouched(fn: Function): void {\n        this.onModelTouched = fn;\n    }\n    \n    setDisabledState(val: boolean): void {\n        this.disabled = val;\n    }\n}\n\n@NgModule({\n    imports: [CommonModule],\n    exports: [Checkbox],\n    declarations: [Checkbox]\n})\nexport class CheckboxModule { }\n","export * from './checkbox';","import {NgModule} from '@angular/core';\nimport {RouterModule} from '@angular/router'\nimport {GMapDemo} from './gmapdemo';\n\n@NgModule({\n\timports: [\n\t\tRouterModule.forChild([\n\t\t\t{path:'',component: GMapDemo}\n\t\t])\n\t],\n\texports: [\n\t\tRouterModule\n\t]\n})\nexport class GMapDemoRoutingModule {}\n","import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {FormsModule} from '@angular/forms';\nimport {GMapDemo} from './gmapdemo';\nimport {GMapDemoRoutingModule} from './gmapdemo-routing.module';\nimport {GMapModule} from 'primeng/gmap';\nimport {ToastModule} from 'primeng/toast';\nimport {CheckboxModule} from 'primeng/checkbox';\nimport {DialogModule} from 'primeng/dialog';\nimport {InputTextModule} from 'primeng/inputtext';\nimport {ButtonModule} from 'primeng/button';\nimport {TabViewModule} from 'primeng/tabview';\nimport {CodeHighlighterModule} from 'primeng/codehighlighter';\n\n@NgModule({\n\timports: [\n\t\tCommonModule,\n        FormsModule,\n\t\tGMapDemoRoutingModule,\n        GMapModule,\n        ToastModule,\n        InputTextModule,\n        CheckboxModule,\n        DialogModule,\n        ButtonModule,\n        TabViewModule,\n        CodeHighlighterModule\n\t],\n\tdeclarations: [\n\t\tGMapDemo\n\t]\n})\nexport class GMapDemoModule {}\n","import {Component,OnInit} from '@angular/core';\nimport {MessageService} from 'primeng/api';\n\ndeclare var google: any;\n\n@Component({\n    templateUrl: './gmapdemo.html',\n    providers: [MessageService],\n    styles: [`\n        .p-col-2 {\n            display: flex;\n            align-self: center;\n        }\n    `]\n})\nexport class GMapDemo implements OnInit {\n    \n    options: any;\n    \n    overlays: any[];\n    \n    dialogVisible: boolean;\n    \n    markerTitle: string;\n    \n    selectedPosition: any;\n    \n    infoWindow: any;\n    \n    draggable: boolean;\n    \n    constructor(private messageService: MessageService) {}\n\n    ngOnInit() {\n        this.options = {\n            center: {lat: 36.890257, lng: 30.707417},\n            zoom: 12\n        };\n        \n        this.initOverlays();\n        this.infoWindow = new google.maps.InfoWindow();\n    }\n    \n    handleMapClick(event) {\n        this.dialogVisible = true;\n        this.selectedPosition = event.latLng;\n    }\n    \n    handleOverlayClick(event) {\n        let isMarker = event.overlay.getTitle != undefined;\n        \n        if (isMarker) {\n            let title = event.overlay.getTitle();\n            this.infoWindow.setContent('<div>' + title + '</div>');\n            this.infoWindow.open(event.map, event.overlay);\n            event.map.setCenter(event.overlay.getPosition());\n            \n            this.messageService.add({severity:'info', summary:'Marker Selected', detail: title});\n        }\n        else {\n            this.messageService.add({severity:'info', summary:'Shape Selected', detail: ''});\n        }\n    }\n    \n    addMarker() {\n        this.overlays.push(new google.maps.Marker({position:{lat: this.selectedPosition.lat(), lng: this.selectedPosition.lng()}, title:this.markerTitle, draggable: this.draggable}));\n        this.markerTitle = null;\n        this.dialogVisible = false;\n    }\n    \n    handleDragEnd(event) {\n        this.messageService.add({severity:'info', summary:'Marker Dragged', detail: event.overlay.getTitle()});\n    }\n    \n    initOverlays() {\n        if (!this.overlays||!this.overlays.length) {\n            this.overlays = [\n                new google.maps.Marker({position: {lat: 36.879466, lng: 30.667648}, title:\"Konyaalti\"}),\n                new google.maps.Marker({position: {lat: 36.883707, lng: 30.689216}, title:\"Ataturk Park\"}),\n                new google.maps.Marker({position: {lat: 36.885233, lng: 30.702323}, title:\"Oldtown\"}),\n                new google.maps.Polygon({paths: [\n                    {lat: 36.9177, lng: 30.7854},{lat: 36.8851, lng: 30.7802},{lat: 36.8829, lng: 30.8111},{lat: 36.9177, lng: 30.8159}\n                ], strokeOpacity: 0.5, strokeWeight: 1,fillColor: '#1976D2', fillOpacity: 0.35\n                }),\n                new google.maps.Circle({center: {lat: 36.90707, lng: 30.56533}, fillColor: '#1976D2', fillOpacity: 0.35, strokeWeight: 1, radius: 1500}),\n                new google.maps.Polyline({path: [{lat: 36.86149, lng: 30.63743},{lat: 36.86341, lng: 30.72463}], geodesic: true, strokeColor: '#FF0000', strokeOpacity: 0.5, strokeWeight: 2})\n            ];\n        }\n    }\n    \n    zoomIn(map) {\n        map.setZoom(map.getZoom()+1);\n    }\n    \n    zoomOut(map) {\n        map.setZoom(map.getZoom()-1);\n    }\n    \n    clear() {\n        this.overlays = [];\n    }\n}\n"]}