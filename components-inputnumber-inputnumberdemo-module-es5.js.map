{"version":3,"sources":["webpack:///src/app/showcase/components/inputnumber/inputnumberdemo.html","webpack:///src/app/components/dynamicdialog/public_api.ts","webpack:///src/app/components/inputnumber/inputnumber.ts","webpack:///src/app/components/inputnumber/public_api.ts","webpack:///src/app/components/public_api.ts","webpack:///src/app/showcase/components/inputnumber/inputnumberdemo-routing.module.ts","webpack:///src/app/showcase/components/inputnumber/inputnumberdemo.module.ts","webpack:///src/app/showcase/components/inputnumber/inputnumberdemo.ts"],"names":["INPUTNUMBER_VALUE_ACCESSOR","provide","useExisting","InputNumber","multi","el","showButtons","format","buttonLayout","useGrouping","incrementButtonIcon","decrementButtonIcon","mode","step","onFocus","onBlur","onModelChange","onModelTouched","ngOnInit","numberFormat","Intl","NumberFormat","locale","getOptions","numerals","reverse","index","Map","map","d","i","_numeral","RegExp","join","_decimal","getDecimalExpression","_group","getGroupingExpression","_minusSign","getMinusSignExpression","_currency","getCurrencyExpression","_suffix","suffix","_prefix","prefix","_index","get","formatValue","value","formatter","formattedValue","onInput","event","isSpecialChar","target","lastValue","onInputKeyDown","shiftKey","altKey","selectionStart","selectionEnd","inputValue","preventDefault","which","spin","isNumeralChar","charAt","newValueStr","deleteChar","decimalCharIndex","search","lastIndex","test","slice","input","nativeElement","setSelectionRange","updateValue","deleteRange","onInputKeyPress","code","keyCode","char","String","fromCharCode","isMinusSign","insert","onPaste","data","clipboardData","window","getData","filteredData","parseValue","toString","onInputClick","initCursor","onInputFocus","focused","emit","onInputBlur","newValue","validateValue","setAttribute","updateModel","onUpButtonMouseDown","focus","repeat","onUpButtonMouseUp","clearTimer","onUpButtonMouseLeave","onUpButtonKeyDown","onUpButtonKeyUp","onDownButtonMouseDown","onDownButtonMouseUp","onDownButtonMouseLeave","onDownButtonKeyUp","onDownButtonKeyDown","dir","currentValue","maxlength","length","updateInput","interval","timer","setTimeout","clearInterval","text","trim","maxFractionDigits","resolvedOptions","maximumFractionDigits","insertText","start","end","valueLength","operation","currentLength","newLength","valueStr","min","max","resetRegex","filteredText","replace","parsedValue","isNaN","writeValue","registerOnChange","fn","registerOnTouched","setDisabledState","val","disabled","localeMatcher","style","currency","currencyDisplay","minimumFractionDigits","minFractionDigits","filled","selector","template","changeDetection","Default","providers","InputNumberModule","imports","exports","declarations","InputNumberDemoRoutingModule","forChild","path","component","InputNumberDemoModule","InputNumberDemo","value1","value2","value3","value4","value5","value6","value7","value8","value9","value10","value11","value12","value13","value14","value15","value16","value17","value18","value19","value20","encapsulation","None"],"mappings":"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","file":"components-inputnumber-inputnumberdemo-module-es5.js","sourcesContent":["export default \"<div class=\\\"content-section introduction\\\">\\n    <div>\\n        <span class=\\\"feature-title\\\">InputNumber</span>\\n        <span>InputNumber is an input component to provide numerical input.</span>\\n    </div>\\n</div>\\n\\n<div class=\\\"content-section implementation\\\">\\n    <h3>Numerals</h3>\\n    <div class=\\\"p-grid ui-fluid\\\">\\n        <div class=\\\"p-col-12 p-md-3\\\">\\n            Integer Only\\n            <p-inputNumber [(ngModel)]=\\\"value1\\\">\\n            </p-inputNumber>\\n        </div>\\n        <div class=\\\"p-col-12 p-md-3\\\">\\n            Without Grouping\\n            <p-inputNumber [(ngModel)]=\\\"value2\\\" mode=\\\"decimal\\\" [useGrouping]=\\\"false\\\">\\n            </p-inputNumber>\\n        </div>\\n        <div class=\\\"p-col-12 p-md-3\\\">\\n            Min-Max Fraction Digits\\n            <p-inputNumber [(ngModel)]=\\\"value3\\\" mode=\\\"decimal\\\" [minFractionDigits]=\\\"2\\\" [maxFractionDigits]=\\\"5\\\">\\n            </p-inputNumber>\\n        </div>\\n        <div class=\\\"p-col-12 p-md-3\\\">\\n            Min-Max Boundaries\\n            <p-inputNumber [(ngModel)]=\\\"value4\\\" mode=\\\"decimal\\\" [min]=\\\"0\\\" [max]=\\\"100\\\">\\n            </p-inputNumber>\\n        </div>\\n        <div class=\\\"p-col-12 p-md-3\\\">\\n            User Locale\\n            <p-inputNumber [(ngModel)]=\\\"value5\\\" [minFractionDigits]=\\\"2\\\">\\n            </p-inputNumber>\\n        </div>\\n        <div class=\\\"p-col-12 p-md-3\\\">\\n            United State Locale\\n            <p-inputNumber [(ngModel)]=\\\"value6\\\" mode=\\\"decimal\\\" locale=\\\"en-US\\\" [minFractionDigits]=\\\"2\\\">\\n            </p-inputNumber>\\n        </div>\\n        <div class=\\\"p-col-12 p-md-3\\\">\\n            German Locale\\n            <p-inputNumber [(ngModel)]=\\\"value7\\\" mode=\\\"decimal\\\" locale=\\\"de-DE\\\" [minFractionDigits]=\\\"2\\\">\\n            </p-inputNumber>\\n        </div>\\n        <div class=\\\"p-col-12 p-md-3\\\">\\n            Indian Locale\\n            <p-inputNumber [(ngModel)]=\\\"value8\\\" mode=\\\"decimal\\\" locale=\\\"en-IN\\\" [minFractionDigits]=\\\"2\\\">\\n            </p-inputNumber>\\n        </div>\\n    </div>\\n    <h3>Currency</h3>\\n    <div class=\\\"p-grid ui-fluid\\\">\\n        <div class=\\\"p-col-12 p-md-3\\\">\\n            United States\\n            <p-inputNumber [(ngModel)]=\\\"value9\\\" mode=\\\"currency\\\" currency=\\\"USD\\\" locale=\\\"en-US\\\">\\n            </p-inputNumber>\\n        </div>\\n        <div class=\\\"p-col-12 p-md-3\\\">\\n            Germany\\n            <p-inputNumber [(ngModel)]=\\\"value10\\\" mode=\\\"currency\\\" currency=\\\"EUR\\\" locale=\\\"de-DE\\\">\\n            </p-inputNumber>\\n        </div>\\n        <div class=\\\"p-col-12 p-md-3\\\">\\n            India\\n            <p-inputNumber [(ngModel)]=\\\"value11\\\" mode=\\\"currency\\\" currency=\\\"INR\\\" currencyDisplay=\\\"code\\\" locale=\\\"en-IN\\\">\\n            </p-inputNumber>\\n        </div>\\n        <div class=\\\"p-col-12 p-md-3\\\">\\n            Japan\\n            <p-inputNumber [(ngModel)]=\\\"value12\\\" mode=\\\"currency\\\" currency=\\\"JPY\\\" locale=\\\"jp-JP\\\">\\n            </p-inputNumber>\\n        </div>\\n    </div>\\n    <h3>Prefix and Suffix</h3>\\n    <div class=\\\"p-grid ui-fluid\\\">\\n        <div class=\\\"p-col-12 p-md-3\\\">\\n            Mile\\n            <p-inputNumber [(ngModel)]=\\\"value13\\\" suffix=\\\" mi\\\">\\n            </p-inputNumber>\\n        </div>\\n        <div class=\\\"p-col-12 p-md-3\\\">\\n            Percent\\n            <p-inputNumber [(ngModel)]=\\\"value14\\\" prefix=\\\"%\\\">\\n            </p-inputNumber>\\n        </div>\\n        <div class=\\\"p-col-12 p-md-3\\\">\\n            Expiry\\n            <p-inputNumber [(ngModel)]=\\\"value15\\\" prefix=\\\"Expires in \\\" suffix=\\\" days\\\">\\n            </p-inputNumber>\\n        </div>\\n        <div class=\\\"p-col-12 p-md-3\\\">\\n            Temperature\\n            <p-inputNumber [(ngModel)]=\\\"value16\\\" prefix=\\\"&uarr; \\\" suffix=\\\"℃\\\" [min]=\\\"0\\\" [max]=\\\"40\\\">\\n            </p-inputNumber>\\n        </div>\\n    </div>\\n    <h3>Buttons</h3>\\n    <div class=\\\"p-grid ui-fluid\\\">\\n        <div class=\\\"p-col-12 p-md-3\\\">\\n            Stacked\\n            <p-inputNumber [(ngModel)]=\\\"value17\\\" [showButtons]=\\\"true\\\" mode=\\\"currency\\\" currency=\\\"USD\\\">\\n            </p-inputNumber>\\n        </div>\\n        <div class=\\\"p-col-12 p-md-3\\\">\\n            Horizontal with Step\\n            <p-inputNumber [(ngModel)]=\\\"value18\\\" [showButtons]=\\\"true\\\" buttonLayout=\\\"horizontal\\\" spinnerMode=\\\"horizontal\\\" [step]=\\\"0.25\\\"\\n            decrementButtonClass=\\\"ui-button-danger\\\" incrementButtonClass=\\\"ui-button-success\\\" incrementButtonIcon=\\\"pi pi-plus\\\" decrementButtonIcon=\\\"pi pi-minus\\\" mode=\\\"currency\\\" currency=\\\"EUR\\\">\\n            </p-inputNumber>\\n        </div>\\n        <div class=\\\"p-col-12 p-md-3\\\">\\n            <div>Vertical</div>\\n            <p-inputNumber [(ngModel)]=\\\"value19\\\" [showButtons]=\\\"true\\\" buttonLayout=\\\"vertical\\\" spinnerMode=\\\"vertical\\\"\\n            decrementButtonClass=\\\"ui-button-secondary\\\" incrementButtonClass=\\\"ui-button-secondary\\\" incrementButtonIcon=\\\"pi pi-plus\\\" decrementButtonIcon=\\\"pi pi-minus\\\">\\n            </p-inputNumber>\\n        </div>\\n        <div class=\\\"p-col-12 p-md-3\\\">\\n            Min-Max Boundaries\\n            <p-inputNumber [(ngModel)]=\\\"value20\\\" mode=\\\"decimal\\\" [showButtons]=\\\"true\\\" [min]=\\\"0\\\" [max]=\\\"100\\\">\\n            </p-inputNumber>\\n        </div>\\n    </div>\\n</div>\\n\\n<div class=\\\"content-section documentation\\\">\\n    <p-tabView>\\n        <p-tabPanel header=\\\"Documentation\\\">\\n            <h3>Import</h3>\\n<pre>\\n<code class=\\\"language-typescript\\\" pCode ngNonBindable>\\nimport &#123;InputNumberModule&#125; from 'primeng/inputnumber';\\n</code>\\n</pre>\\n\\n            <h3>Getting Started</h3>\\n            <p>InputNumber is used with the standard v-model directive. Component always provides a number type although formatting on the input is a string.</p>   \\n<pre>\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\n&lt;p-inputNumber [(ngModel)]=\\\"val\\\"&gt;&lt;/p-inputNumber&gt;\\n</code>\\n</pre>\\n\\n            <h3>Decimal Mode</h3>\\n            <p>Format is defined using the <i>mode</i> property, \\\"decimal\\\" is the default value allowing only integers when there is no other configuration.</p>   \\n<pre>\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\n&lt;p-inputNumber [(ngModel)]=\\\"val\\\" mode=\\\"decimal\\\"&gt;&lt;/p-inputNumber&gt;\\n</code>\\n</pre>\\n            <p>Fractions are configured with the <i>minFractionDigits</i> property. Optionally <i>maxFractionDigits</i> can be used to defined a boundary for the maximum digits.</p>\\n<pre>\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\n&lt;p-inputNumber [(ngModel)]=\\\"val\\\" mode=\\\"decimal\\\" [minFractionDigits]=\\\"2\\\"&gt;&lt;/p-inputNumber&gt;\\n&lt;p-inputNumber [(ngModel)]=\\\"val\\\" mode=\\\"decimal\\\" [minFractionDigits]=\\\"2\\\" [maxFracionDigits]=\\\"2\\\"&gt;&lt;/p-inputNumber&gt;\\n</code>\\n</pre>\\n\\n            <p><i>locale</i> option is available to set the localization information such as grouping and decimal symbols where default value is the browser locale. Locales are defined per <a href=\\\"https://tools.ietf.org/html/rfc5646\\\">BCP Language Tag</a>.</p>\\n<pre>\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\nUser Locale\\n&lt;p-inputNumber [(ngModel)]=\\\"value1\\\" mode=\\\"decimal\\\" [minFractionDigits]=\\\"2\\\"&gt;&lt;/p-inputNumber&gt;\\n\\nUnited State Locale\\n&lt;p-inputNumber [(ngModel)]=\\\"value2\\\" mode=\\\"decimal\\\" locale=\\\"en-US\\\" [minFractionDigits]=\\\"2\\\"&gt;&lt;/p-inputNumber&gt;\\n\\nGerman Locale\\n&lt;p-inputNumber [(ngModel)]=\\\"value3\\\" mode=\\\"decimal\\\" locale=\\\"de-DE\\\" [minFractionDigits]=\\\"2\\\"&gt;&lt;/p-inputNumber&gt;\\n\\nIndian Locale\\n&lt;p-inputNumber [(ngModel)]=\\\"value4\\\" mode=\\\"decimal\\\" locale=\\\"en-IN\\\" [minFractionDigits]=\\\"2\\\"&gt;&lt;/p-inputNumber&gt;\\n</code>\\n</pre>\\n\\n            <h3>Currency</h3>\\n            <p>Currency formatting is specified by setting the <i>mode</i> option to currency and <i>currency</i> property. In addition <i>currencyDisplay</i> option\\n                allows how the currency is displayed, valid values are \\\"symbol\\\" (default) or \\\"code\\\".</p> \\n<pre>\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\nUser Locale\\n&lt;p-inputNumber [(ngModel)]=\\\"value1\\\" mode=\\\"currency\\\"&gt;&lt;/p-inputNumber&gt;\\n\\nUnited State Locale\\n&lt;p-inputNumber [(ngModel)]=\\\"value2\\\" mode=\\\"currency\\\" currency=\\\"USD\\\" locale=\\\"en-US\\\"&gt;&lt;/p-inputNumber&gt;\\n\\nGerman Locale\\n&lt;p-inputNumber [(ngModel)]=\\\"value3\\\" mode=\\\"currency\\\" currency=\\\"EUR\\\" locale=\\\"de-DE\\\"&gt;&lt;/p-inputNumber&gt;\\n\\nIndian Locale\\n&lt;p-inputNumber [(ngModel)]=\\\"value4\\\" mode=\\\"currency\\\" currency=\\\"INR\\\" locale=\\\"en-IN\\\"&gt;&lt;/p-inputNumber&gt;\\n</code>\\n</pre>\\n\\n            <h3>Prefix and Suffix</h3>\\n            <p>Custom texts e.g. units can be placed before or after the input section with the <i>prefix</i> and <i>suffix</i> properties.</p> \\n<pre>\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\nMile\\n&lt;p-inputNumber [(ngModel)]=\\\"value1\\\" suffix=\\\" mi\\\"&gt;&lt;/p-inputNumber&gt;\\n\\nPercent\\n&lt;p-inputNumber [(ngModel)]=\\\"value2\\\" prefix=\\\"%\\\"&gt;&lt;/p-inputNumber&gt;\\n\\nExpiry\\n&lt;p-inputNumber [(ngModel)]=\\\"value3\\\" prefix=\\\"Expires in \\\" suffix=\\\" days\\\"&gt;&lt;/p-inputNumber&gt;\\n\\nTemperature\\n&lt;p-inputNumber [(ngModel)]=\\\"value4\\\" prefix=\\\"&uarr; \\\" suffix=\\\"℃\\\" :min=\\\"0\\\" :max=\\\"40\\\"&gt;&lt;/p-inputNumber&gt;\\n</code>\\n</pre>\\n\\n            <h3>Buttons</h3>\\n            <p>Spinner buttons is enabled using the <i>showButtons</i> options and layout is defined with the <i>buttonLayout</i>. Default value is \\\"stacked\\\" whereas\\n                \\\"horizontal\\\" and \\\"stacked\\\" are alternatives. Note that even there are no buttons, up and down arrow keys can be used to spin the values with keyboard.</p> \\n<pre>\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\nStacked\\n&lt;p-inputNumber [(ngModel)]=\\\"value1\\\" [showButtons]=\\\"true\\\" mode=\\\"currency\\\" currency=\\\"USD\\\"&gt;&lt;/p-inputNumber&gt;\\n\\nHorizontal\\n&lt;p-inputNumber [(ngModel)]=\\\"value2\\\" [showButtons]=\\\"true\\\" buttonLayout=\\\"horizontal\\\" spinnerMode=\\\"horizontal\\\"\\n    decrementButtonClass=\\\"ui-button-danger\\\" incrementButtonClass=\\\"ui-button-success\\\" incrementButtonIcon=\\\"pi pi-plus\\\" decrementButtonIcon=\\\"pi pi-minus\\\" mode=\\\"currency\\\" currency=\\\"EUR\\\"&gt;&lt;/p-inputNumber&gt;\\n\\nVertical\\n&lt;p-inputNumber [(ngModel)]=\\\"value3\\\" mode=\\\"decimal\\\" [showButtons]=\\\"true\\\" buttonLayout=\\\"vertical\\\" spinnerMode=\\\"vertical\\\"\\n    decrementButtonClass=\\\"ui-button-secondary\\\" incrementButtonClass=\\\"ui-button-secondary\\\" incrementButtonIcon=\\\"pi pi-plus\\\" decrementButtonIcon=\\\"pi pi-minus\\\"&gt;&lt;/p-inputNumber&gt;\\n</code>\\n</pre>\\n\\n            <h3>Step</h3>\\n            <p>Step factor is 1 by default and can be customized with <i>step</i> option.</p> \\n<pre>\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\n&lt;p-inputNumber [(ngModel)]=\\\"val\\\" [step]=\\\"0.25\\\"&gt;&lt;/p-inputNumber&gt;\\n</code>\\n</pre>\\n    \\n            <h3>Min and Max Boundaries</h3>\\n            <p>Value to be entered can be restricted by configuring the <i>min</i> and <i>max</i> options.</p>\\n<pre>\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\n&lt;p-inputNumber [(ngModel)]=\\\"val\\\" [min]=\\\"0\\\" [max]=\\\"100\\\"&gt;&lt;/p-inputNumber&gt;\\n</code>\\n</pre>\\n\\n            <h3>Properties</h3>\\n            <div class=\\\"doc-tablewrapper\\\">\\n                <table class=\\\"doc-table\\\">\\n                    <thead>\\n                        <tr>\\n                            <th>Name</th>\\n                            <th>Type</th>\\n                            <th>Default</th>\\n                            <th>Description</th>\\n                        </tr>\\n                    </thead>\\n                    <tbody>\\n                        <tr>\\n                            <td>value</td>\\n                            <td>number</td>\\n                            <td>null</td>\\n                            <td>Value of the component.</td>\\n                        </tr>\\n                        <tr>\\n                            <td>format</td>\\n                            <td>boolean</td>\\n                            <td>true</td>\\n                            <td>Whether to format the value.</td>\\n                        </tr>\\n                        <tr>\\n                            <td>showButtons</td>\\n                            <td>boolean</td>\\n                            <td>false</td>\\n                            <td>Displays spinner buttons.</td>\\n                        </tr>\\n                        <tr>\\n                            <td>buttonLayout</td>\\n                            <td>string</td>\\n                            <td>stacked</td>\\n                            <td>Layout of the buttons, valid values are \\\"stacked\\\" (default), \\\"horizontal\\\" and \\\"vertical\\\".</td>\\n                        </tr>\\n                        <tr>\\n                            <td>incrementButtonClass</td>\\n                            <td>string</td>\\n                            <td>null</td>\\n                            <td>Style class of the increment button.</td>\\n                        </tr>\\n                        <tr>\\n                            <td>decrementButtonClass</td>\\n                            <td>string</td>\\n                            <td>null</td>\\n                            <td>Style class of the decrement button.</td>\\n                        </tr>\\n                        <tr>\\n                            <td>incrementButtonIcon</td>\\n                            <td>string</td>\\n                            <td>pi pi-chevron-up</td>\\n                            <td>Style class of the increment button.</td>\\n                        </tr>\\n                        <tr>\\n                            <td>decrementButtonIcon</td>\\n                            <td>string</td>\\n                            <td>pi pi-chevron-down</td>\\n                            <td>Style class of the decrement button.</td>\\n                        </tr>\\n                        <tr>\\n                            <td>locale</td>\\n                            <td>string</td>\\n                            <td>null</td>\\n                            <td>Locale to be used in formatting.</td>\\n                        </tr>\\n                        <tr>\\n                            <td>localeMatcher</td>\\n                            <td>string</td>\\n                            <td>best fit</td>\\n                            <td>The locale matching algorithm to use. Possible values are \\\"lookup\\\" and \\\"best fit\\\"; the default is \\\"best fit\\\".\\n                                See <a href=\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#Locale_negotiation\\\">Locale Negotation</a> for details.\\n                            </td>\\n                        </tr>\\n                        <tr>\\n                            <td>mode</td>\\n                            <td>string</td>\\n                            <td>decimal</td>\\n                            <td>Defines the behavior of the component, valid values are \\\"decimal\\\" and \\\"currency\\\".</td>\\n                        </tr>\\n                        <tr>\\n                            <td>prefix</td>\\n                            <td>string</td>\\n                            <td>null</td>\\n                            <td>Text to display before the value.</td>\\n                        </tr>\\n                        <tr>\\n                            <td>suffix</td>\\n                            <td>string</td>\\n                            <td>decimal</td>\\n                            <td>Text to display after the value.</td>\\n                        </tr>\\n                        <tr>\\n                            <td>currency</td>\\n                            <td>string</td>\\n                            <td>null</td>\\n                            <td>The currency to use in currency formatting. Possible values are the <a href=\\\"https://www.currency-iso.org/en/home/tables/table-a1.html\\\">ISO 4217 currency codes</a>,\\n                                such as \\\"USD\\\" for the US dollar, \\\"EUR\\\" for the euro, or \\\"CNY\\\" for the Chinese RMB.\\n                                There is no default value; if the style is \\\"currency\\\", the currency property must be provided.</td>\\n                        </tr>\\n                        <tr>\\n                            <td>currencyDisplay</td>\\n                            <td>string</td>\\n                            <td>symbol</td>\\n                            <td>How to display the currency in currency formatting. Possible values are \\\"symbol\\\" to use a localized currency symbol such as €,\\n                                ü\\\"code\\\" to use the ISO currency code, \\\"name\\\" to use a localized currency name such as \\\"dollar\\\"; the default is \\\"symbol\\\".</td>\\n                        </tr>\\n                        <tr>\\n                            <td>useGrouping</td>\\n                            <td>boolean</td>\\n                            <td>true</td>\\n                            <td>Whether to use grouping separators, such as thousands separators or thousand/lakh/crore separators.</td>\\n                        </tr>\\n                        <tr>\\n                            <td>minFractionDigits</td>\\n                            <td>number</td>\\n                            <td>null</td>\\n                            <td>The minimum number of fraction digits to use. Possible values are from 0 to 20; the default for plain number and percent formatting is 0; the default for currency formatting is the number of\\n                                minor unit digits provided by the <a href=\\\"https://www.currency-iso.org/en/home/tables/table-a1.html\\\">ISO 4217 currency code list</a> (2 if the list doesn't provide that information).</td>\\n                        </tr>\\n                        <tr>\\n                            <td>maxFractionDigits</td>\\n                            <td>number</td>\\n                            <td>null</td>\\n                            <td>The maximum number of fraction digits to use. Possible values are from 0 to 20; the default for plain\\n                                number formatting is the larger of minimumFractionDigits and 3; the default for currency formatting\\n                                is the larger of minimumFractionDigits and the number of minor unit digits provided by the <a href=\\\"https://www.currency-iso.org/en/home/tables/table-a1.html\\\">ISO 4217 currency code list</a>\\n                                (2 if the list doesn't provide that information).</td>\\n                        </tr>\\n                        <tr>\\n                            <td>min</td>\\n                            <td>number</td>\\n                            <td>null</td>\\n                            <td>Mininum boundary value.</td>\\n                        </tr>\\n                        <tr>\\n                            <td>max</td>\\n                            <td>number</td>\\n                            <td>null</td>\\n                            <td>Maximum boundary value.</td>\\n                        </tr>\\n                        <tr>\\n                            <td>step</td>\\n                            <td>number</td>\\n                            <td>1</td>\\n                            <td>Step factor to increment/decrement the value.</td>\\n                        </tr>\\n                        <tr>\\n                            <td>inputId</td>\\n                            <td>string</td>\\n                            <td>null</td>\\n                            <td>Identifier of the focus input to match a label defined for the component.</td>\\n                        </tr>\\n                        <tr>\\n                            <td>placeholder</td>\\n                            <td>string</td>\\n                            <td>null</td>\\n                            <td>Advisory information to display on input.</td>\\n                        </tr>\\n                        <tr>\\n                            <td>size</td>\\n                            <td>number</td>\\n                            <td>null</td>\\n                            <td>Size of the input field.</td>\\n                        </tr>\\n                        <tr>\\n                            <td>maxlength</td>\\n                            <td>number</td>\\n                            <td>null</td>\\n                            <td>Maximum number of character allows in the input field.</td>\\n                        </tr>\\n                        <tr>\\n                            <td>tabindex</td>\\n                            <td>number</td>\\n                            <td>null</td>\\n                            <td>Specifies tab order of the element.</td>\\n                        </tr>\\n                        <tr>\\n                            <td>title</td>\\n                            <td>string</td>\\n                            <td>null</td>\\n                            <td>Title text of the input text.</td>\\n                        </tr>\\n                        <tr>\\n                            <td>ariaLabel</td>\\n                            <td>string</td>\\n                            <td>null</td>\\n                            <td>Used to define a string that labels the current element.</td>\\n                        </tr>\\n                        <tr>\\n                            <td>ariaRequired</td>\\n                            <td>boolean</td>\\n                            <td>false</td>\\n                            <td>Used to indicate that user input is required on an element before a form can be submitted.</td>\\n                        </tr>\\n                        <tr>\\n                            <td>name</td>\\n                            <td>string</td>\\n                            <td>null</td>\\n                            <td>Name of the input field.</td>\\n                        </tr>\\n                        <tr>\\n                            <td>autocomplete</td>\\n                            <td>string</td>\\n                            <td>null</td>\\n                            <td>Used to define a string that autocomplete attribute the current element.</td>\\n                        </tr>\\n                    </tbody>\\n                </table>\\n            </div>\\n            \\n            <h3>Events</h3>\\n            <div class=\\\"doc-tablewrapper\\\">\\n                <table class=\\\"doc-table\\\">\\n                    <thead>\\n                        <tr>\\n                            <th>Name</th>\\n                            <th>Parameters</th>\\n                            <th>Description</th>\\n                        </tr>\\n                    </thead>\\n                    <tbody>\\n                        <tr>\\n                            <td>onFocus</td>\\n                            <td>event: Browser event</td>\\n                            <td>Callback to invoke when input receives focus.</td>\\n                        </tr> \\n                        <tr>\\n                            <td>onBlur</td>\\n                            <td>event: Browser event</td>\\n                            <td>Callback to invoke when input loses focus.</td>\\n                        </tr>   \\n                    </tbody>\\n                </table>\\n            </div>\\n\\n            <h3>Styling</h3>\\n            <p>Following is the list of structural style classes, for theming classes visit <a href=\\\"#\\\" [routerLink]=\\\"['/theming']\\\">theming</a> page.</p>\\n            <div class=\\\"doc-tablewrapper\\\">\\n                <table class=\\\"doc-table\\\">\\n                    <thead>\\n                        <tr>\\n                            <th>Name</th>\\n                            <th>Element</th>\\n                        </tr>\\n                    </thead>\\n                    <tbody>\\n                        <tr>\\n                            <td>ui-inputnumber</td>\\n                            <td>Container element</td>\\n                        </tr>\\n                        <tr>\\n                            <td>ui-inputnumber-stacked</td>\\n                            <td>Container element with stacked buttons.</td>\\n                        </tr>\\n                        <tr>\\n                            <td>ui-inputnumber-horizontal</td>\\n                            <td>Container element with horizontal buttons.</td>\\n                        </tr>\\n                        <tr>\\n                            <td>ui-inputnumber-vertical</td>\\n                            <td>Container element with vertical buttons.</td>\\n                        </tr>\\n                        <tr>\\n                            <td>ui-inputnumber-input</td>\\n                            <td>Input element</td>\\n                        </tr>\\n                        <tr>\\n                            <td>ui-inputnumber-button</td>\\n                            <td>Input element</td>\\n                        </tr>\\n                        <tr>\\n                            <td>ui-inputnumber-button-up</td>\\n                            <td>Increment button</td>\\n                        </tr>\\n                        <tr>\\n                            <td>ui-inputnumber-button-down</td>\\n                            <td>Decrement button</td>\\n                        </tr>\\n                        <tr>\\n                            <td>ui-inputnumber-button-icon</td>\\n                            <td>Button icon</td>\\n                        </tr>\\n                    </tbody>\\n                </table>\\n            </div>\\n            <h3>Dependencies</h3>\\n            <p>None.</p>\\n        </p-tabPanel>\\n\\n        <p-tabPanel header=\\\"Source\\\">\\n            <a href=\\\"https://github.com/primefaces/primeng/tree/master/src/app/showcase/components/inputnumber\\\" class=\\\"btn-viewsource\\\" target=\\\"_blank\\\">\\n                <span>View on GitHub</span>\\n            </a>\\n            <a href=\\\"https://stackblitz.com/edit/primeng-inputnumber-demo\\\" class=\\\"btn-viewsource\\\" style=\\\"margin-left: .5em;\\\" target=\\\"_blank\\\">\\n                <span>Edit in StackBlitz</span>\\n            </a>\\n<pre>\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\n&lt;div class=\\\"p-grid ui-fluid\\\"&gt;\\n&lt;h3&gt;Numerals&lt;/h3&gt;\\n&lt;div class=\\\"p-grid ui-fluid\\\"&gt;\\n    &lt;div class=\\\"p-col-12 p-md-3\\\"&gt;\\n        Integer Only\\n        &lt;p-inputNumber [(ngModel)]=\\\"value1\\\"&gt;\\n        &lt;/p-inputNumber&gt;\\n        &#123;&#123;value1&#125;&#125;\\n    &lt;/div&gt;\\n    &lt;div class=\\\"p-col-12 p-md-3\\\"&gt;\\n        Without Grouping\\n        &lt;p-inputNumber [(ngModel)]=\\\"value2\\\" mode=\\\"decimal\\\" [useGrouping]=\\\"false\\\"&gt;\\n        &lt;/p-inputNumber&gt;\\n    &lt;/div&gt;\\n    &lt;div class=\\\"p-col-12 p-md-3\\\"&gt;\\n        Min-Max Fraction Digits\\n        &lt;p-inputNumber [(ngModel)]=\\\"value3\\\" mode=\\\"decimal\\\" [minFractionDigits]=\\\"2\\\" [maxFractionDigits]=\\\"5\\\"&gt;\\n        &lt;/p-inputNumber&gt;\\n    &lt;/div&gt;\\n    &lt;div class=\\\"p-col-12 p-md-3\\\"&gt;\\n        Min-Max Boundaries\\n        &lt;p-inputNumber [(ngModel)]=\\\"value4\\\" mode=\\\"decimal\\\" [min]=\\\"0\\\" [max]=\\\"100\\\"&gt;\\n        &lt;/p-inputNumber&gt;\\n    &lt;/div&gt;\\n    &lt;div class=\\\"p-col-12 p-md-3\\\"&gt;\\n        User Locale\\n        &lt;p-inputNumber [(ngModel)]=\\\"value5\\\" [minFractionDigits]=\\\"2\\\"&gt;\\n        &lt;/p-inputNumber&gt;\\n    &lt;/div&gt;\\n    &lt;div class=\\\"p-col-12 p-md-3\\\"&gt;\\n        United State Locale\\n        &lt;p-inputNumber [(ngModel)]=\\\"value6\\\" mode=\\\"decimal\\\" locale=\\\"en-US\\\" [minFractionDigits]=\\\"2\\\"&gt;\\n        &lt;/p-inputNumber&gt;\\n    &lt;/div&gt;\\n    &lt;div class=\\\"p-col-12 p-md-3\\\"&gt;\\n        German Locale\\n        &lt;p-inputNumber [(ngModel)]=\\\"value7\\\" mode=\\\"decimal\\\" locale=\\\"de-DE\\\" [minFractionDigits]=\\\"2\\\"&gt;\\n        &lt;/p-inputNumber&gt;\\n    &lt;/div&gt;\\n    &lt;div class=\\\"p-col-12 p-md-3\\\"&gt;\\n        Indian Locale\\n        &lt;p-inputNumber [(ngModel)]=\\\"value8\\\" mode=\\\"decimal\\\" locale=\\\"en-IN\\\" [minFractionDigits]=\\\"2\\\"&gt;\\n        &lt;/p-inputNumber&gt;\\n    &lt;/div&gt;\\n&lt;/div&gt;\\n&lt;h3&gt;Currency&lt;/h3&gt;\\n&lt;div class=\\\"p-grid ui-fluid\\\"&gt;\\n    &lt;div class=\\\"p-col-12 p-md-3\\\"&gt;\\n        United States\\n        &lt;p-inputNumber [(ngModel)]=\\\"value9\\\" mode=\\\"currency\\\" currency=\\\"USD\\\" locale=\\\"en-US\\\"&gt;\\n        &lt;/p-inputNumber&gt;\\n    &lt;/div&gt;\\n    &lt;div class=\\\"p-col-12 p-md-3\\\"&gt;\\n        Germany\\n        &lt;p-inputNumber [(ngModel)]=\\\"value10\\\" mode=\\\"currency\\\" currency=\\\"EUR\\\" locale=\\\"de-DE\\\"&gt;\\n        &lt;/p-inputNumber&gt;\\n    &lt;/div&gt;\\n    &lt;div class=\\\"p-col-12 p-md-3\\\"&gt;\\n        India\\n        &lt;p-inputNumber [(ngModel)]=\\\"value11\\\" mode=\\\"currency\\\" currency=\\\"INR\\\" currencyDisplay=\\\"code\\\" locale=\\\"en-IN\\\"&gt;\\n        &lt;/p-inputNumber&gt;\\n    &lt;/div&gt;\\n    &lt;div class=\\\"p-col-12 p-md-3\\\"&gt;\\n        Japan\\n        &lt;p-inputNumber [(ngModel)]=\\\"value12\\\" mode=\\\"currency\\\" currency=\\\"JPY\\\" locale=\\\"jp-JP\\\"&gt;\\n        &lt;/p-inputNumber&gt;\\n    &lt;/div&gt;\\n&lt;/div&gt;\\n&lt;h3&gt;Prefix and Suffix&lt;/h3&gt;\\n&lt;div class=\\\"p-grid ui-fluid\\\"&gt;\\n    &lt;div class=\\\"p-col-12 p-md-3\\\"&gt;\\n        Mile\\n        &lt;p-inputNumber [(ngModel)]=\\\"value13\\\" suffix=\\\" mi\\\"&gt;\\n        &lt;/p-inputNumber&gt;\\n    &lt;/div&gt;\\n    &lt;div class=\\\"p-col-12 p-md-3\\\"&gt;\\n        Percent\\n        &lt;p-inputNumber [(ngModel)]=\\\"value14\\\" prefix=\\\"%\\\"&gt;\\n        &lt;/p-inputNumber&gt;\\n    &lt;/div&gt;\\n    &lt;div class=\\\"p-col-12 p-md-3\\\"&gt;\\n        Expiry\\n        &lt;p-inputNumber [(ngModel)]=\\\"value15\\\" prefix=\\\"Expires in \\\" suffix=\\\" days\\\"&gt;\\n        &lt;/p-inputNumber&gt;\\n    &lt;/div&gt;\\n    &lt;div class=\\\"p-col-12 p-md-3\\\"&gt;\\n        Temperature\\n        &lt;p-inputNumber [(ngModel)]=\\\"value16\\\" prefix=\\\"&uarr; \\\" suffix=\\\"℃\\\" [min]=\\\"0\\\" [max]=\\\"40\\\"&gt;\\n        &lt;/p-inputNumber&gt;\\n    &lt;/div&gt;\\n&lt;/div&gt;\\n&lt;h3&gt;Buttons&lt;/h3&gt;\\n&lt;div class=\\\"p-grid ui-fluid\\\"&gt;\\n    &lt;div class=\\\"p-col-12 p-md-3\\\"&gt;\\n        Stacked\\n        &lt;p-inputNumber [(ngModel)]=\\\"value17\\\" [showButtons]=\\\"true\\\" mode=\\\"currency\\\" currency=\\\"USD\\\"&gt;\\n        &lt;/p-inputNumber&gt;\\n    &lt;/div&gt;\\n    &lt;div class=\\\"p-col-12 p-md-3\\\"&gt;\\n        Horizontal with Step\\n        &lt;p-inputNumber [(ngModel)]=\\\"value18\\\" [showButtons]=\\\"true\\\" buttonLayout=\\\"horizontal\\\" spinnerMode=\\\"horizontal\\\" [step]=\\\"0.25\\\"\\n        decrementButtonClass=\\\"ui-button-danger\\\" incrementButtonClass=\\\"ui-button-success\\\" incrementButtonIcon=\\\"pi pi-plus\\\" decrementButtonIcon=\\\"pi pi-minus\\\" mode=\\\"currency\\\" currency=\\\"EUR\\\"&gt;\\n        &lt;/p-inputNumber&gt;\\n    &lt;/div&gt;\\n    &lt;div class=\\\"p-col-12 p-md-3\\\"&gt;\\n        &lt;div&gt;Vertical&lt;/div&gt;\\n        &lt;p-inputNumber [(ngModel)]=\\\"value19\\\" [showButtons]=\\\"true\\\" buttonLayout=\\\"vertical\\\" spinnerMode=\\\"vertical\\\"\\n        decrementButtonClass=\\\"ui-button-secondary\\\" incrementButtonClass=\\\"ui-button-secondary\\\" incrementButtonIcon=\\\"pi pi-plus\\\" decrementButtonIcon=\\\"pi pi-minus\\\"&gt;\\n        &lt;/p-inputNumber&gt;\\n    &lt;/div&gt;\\n    &lt;div class=\\\"p-col-12 p-md-3\\\"&gt;\\n        Min-Max Boundaries\\n        &lt;p-inputNumber [(ngModel)]=\\\"value20\\\" mode=\\\"decimal\\\" [showButtons]=\\\"true\\\" [min]=\\\"0\\\" [max]=\\\"100\\\"&gt;\\n        &lt;/p-inputNumber&gt;\\n    &lt;/div&gt;\\n&lt;/div&gt;\\n</code>\\n</pre>\\n\\n<pre>\\n<code class=\\\"language-typescript\\\" pCode ngNonBindable>\\nexport class InputNumberDemo &#123;\\n    value1: number = 42723;\\n\\n    value2: number = 58151;\\n\\n    value3: number = 2351.35;\\n\\n    value4: number = 50;\\n\\n    value5: number = 151351;\\n\\n    value6: number = 115744;\\n\\n    value7: number = 635524;\\n\\n    value8: number = 732762;\\n\\n    value9: number = 1500;\\n\\n    value10: number = 2500;\\n\\n    value11: number = 4250;\\n\\n    value12: number = 5002;\\n\\n    value13: number = 20;\\n\\n    value14: number = 50;\\n\\n    value15: number = 10;\\n\\n    value16: number = 20;\\n\\n    value17: number = 20;\\n\\n    value18: number = 10.50;\\n\\n    value19: number = 25;\\n\\n    value20: number = 50;\\n&#125;\\n</code>\\n</pre>\\n        </p-tabPanel>\\n        <p-tabPanel header=\\\"StackBlitz\\\">\\n            <ng-template pTemplate=\\\"content\\\">\\n                <iframe src=\\\"https://stackblitz.com/edit/primeng-inputnumber-demo?embed=1\\\" style=\\\"width: 100%; height: 768px; border: none;\\\"></iframe>\\n            </ng-template>\\n        </p-tabPanel>\\n    </p-tabView>\\n</div>\\n\";","export * from './dialogservice';\nexport * from './dynamicdialog';\nexport * from './dynamicdialog-config';\nexport * from './dynamicdialog-injector';\nexport * from './dynamicdialog-ref';\nexport * from './dynamicdialog';","\nimport {NgModule,Component,ChangeDetectionStrategy, Input, ElementRef, ViewChild, OnInit, EventEmitter, Output, forwardRef} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {InputTextModule} from 'primeng/inputtext';\nimport { ButtonModule } from 'primeng/button';\nimport { NG_VALUE_ACCESSOR, ControlValueAccessor } from '@angular/forms';\n\nexport const INPUTNUMBER_VALUE_ACCESSOR: any = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => InputNumber),\n    multi: true\n};\n@Component({\n    selector: 'p-inputNumber',\n    template: `\n        <span [ngClass]=\"{'ui-inputnumber ui-widget': true, 'ui-inputwrapper-filled': this.filled(), 'ui-inputwrapper-focus': this.focused,\n                'ui-inputnumber-buttons-stacked': this.showButtons && this.buttonLayout === 'stacked', 'ui-inputnumber-buttons-horizontal': this.showButtons && this.buttonLayout === 'horizontal',\n                'ui-inputnumber-buttons-vertical': this.showButtons && this.buttonLayout === 'vertical'}\">\n            <input #input class=\"ui-inputnumber-input\" pInputText [value]=\"formattedValue()\" [attr.placeholder]=\"placeholder\" [attr.title]=\"title\" [attr.id]=\"inputId\"\n                [attr.size]=\"size\" [attr.name]=\"name\" [attr.autocomplete]=\"autocomplete\" [attr.maxlength]=\"maxlength\" [attr.tabindex]=\"tabindex\" [attr.aria-label]=\"ariaLabel\"\n                [attr.aria-required]=\"ariaRequired\" [disabled]=\"disabled\" [attr.required]=\"required\" [attr.aria-valumin]=\"min\" [attr.aria-valuemax]=\"max\"\n                (input)=\"onInput($event)\" (keydown)=\"onInputKeyDown($event)\" (keypress)=\"onInputKeyPress($event)\" (paste)=\"onPaste($event)\" (click)=\"onInputClick()\"\n                (focus)=\"onInputFocus($event)\" (blur)=\"onInputBlur($event)\">\n            <span class=\"ui-inputnumber-button-group\" *ngIf=\"showButtons && buttonLayout === 'stacked'\">\n                <button type=\"button\" pButton [ngClass]=\"{'ui-inputnumber-button ui-inputnumber-button-up': true}\" [class]=\"incrementButtonClass\" [icon]=\"incrementButtonIcon\" [disabled]=\"disabled\"\n                    (mousedown)=\"this.onUpButtonMouseDown($event)\" (mouseup)=\"onUpButtonMouseUp()\" (mouseleave)=\"onUpButtonMouseLeave()\" (keydown)=\"onUpButtonKeyDown($event)\" (keyup)=\"onUpButtonKeyUp()\"></button>\n                <button type=\"button\" pButton [ngClass]=\"{'ui-inputnumber-button ui-inputnumber-button-down': true}\" [class]=\"decrementButtonClass\" [icon]=\"decrementButtonIcon\" [disabled]=\"disabled\"\n                    (mousedown)=\"this.onDownButtonMouseDown($event)\" (mouseup)=\"onDownButtonMouseUp()\" (mouseleave)=\"onDownButtonMouseLeave()\" (keydown)=\"onDownButtonKeyDown($event)\" (keyup)=\"onDownButtonKeyUp()\"></button>\n            </span>\n            <button type=\"button\" pButton [ngClass]=\"{'ui-inputnumber-button ui-inputnumber-button-up': true}\" [class]=\"incrementButtonClass\" [icon]=\"incrementButtonIcon\" *ngIf=\"showButtons && buttonLayout !== 'stacked'\" [disabled]=\"disabled\"\n                (mousedown)=\"this.onUpButtonMouseDown($event)\" (mouseup)=\"onUpButtonMouseUp()\" (mouseleave)=\"onUpButtonMouseLeave()\" (keydown)=\"onUpButtonKeyDown($event)\" (keyup)=\"onUpButtonKeyUp()\"></button>\n            <button type=\"button\" pButton [ngClass]=\"{'ui-inputnumber-button ui-inputnumber-button-down': true}\" [class]=\"decrementButtonClass\" [icon]=\"decrementButtonIcon\" *ngIf=\"showButtons && buttonLayout !== 'stacked'\" [disabled]=\"disabled\"\n                (mousedown)=\"this.onDownButtonMouseDown($event)\" (mouseup)=\"onDownButtonMouseUp()\" (mouseleave)=\"onDownButtonMouseLeave()\" (keydown)=\"onDownButtonKeyDown($event)\" (keyup)=\"onDownButtonKeyUp()\"></button>\n        </span>\n    `,\n    changeDetection: ChangeDetectionStrategy.Default,\n    providers: [INPUTNUMBER_VALUE_ACCESSOR]\n})\nexport class InputNumber implements OnInit,ControlValueAccessor {\n    @Input() showButtons: boolean = false;\n\n    @Input() format: boolean = true;\n\n    @Input() buttonLayout: string = \"stacked\";\n\n    @Input() prefix: string;\n\n    @Input() locale: string;\n\n    @Input() suffix: string;\n\n    @Input() localeMatcher: string;\n\n    @Input() currency: string;\n\n    @Input() currencyDisplay: string;\n\n    @Input() useGrouping: boolean = true;\n\n    @Input() disabled: boolean;\n\n    @Input() inputId: string;\n\n    @Input() styleClass: string;\n\n    @Input() placeholder: string;\n\n    @Input() size: number;\n\n    @Input() maxlength: number;\n\n    @Input() tabindex: string;\n\n    @Input() title: string;\n\n    @Input() ariaLabel: string;\n\n    @Input() ariaRequired: boolean;\n\n    @Input() name: string;\n\n    @Input() required: boolean;\n\n    @Input() autocomplete: string;\n\n    @Input() min: number;\n\n    @Input() max: number;\n\n    @Input() minFractionDigits: number;\n\n    @Input() maxFractionDigits: number;\n\n    @Input() incrementButtonClass: string;\n\n    @Input() decrementButtonClass: string;\n\n    @Input() incrementButtonIcon: string = 'pi pi-chevron-up';\n\n    @Input() decrementButtonIcon: string = 'pi pi-chevron-down';\n\n    @Input() mode: string = \"decimal\";\n\n    @Input() step: number = 1;\n\n    @ViewChild('input') input: ElementRef;\n\n    @Output() onFocus: EventEmitter<any> = new EventEmitter();\n\n    @Output() onBlur: EventEmitter<any> = new EventEmitter();\n\n    value: number;\n\n    onModelChange: Function = () => {};\n\n    onModelTouched: Function = () => {};\n\n    focused: boolean;\n\n    isSpecialChar: boolean;\n\n    timer: any;\n\n    lastValue: string;\n\n    _numeral: any;\n\n    numberFormat: any;\n\n    _decimal: any;\n\n    _group: any;\n\n    _minusSign: any;\n\n    _currency: any;\n\n    _prefix: any;\n\n    _suffix: any;\n\n    _index: any;\n\n    constructor(public el: ElementRef) {}\n\n    ngOnInit() {\n        this.numberFormat = new Intl.NumberFormat(this.locale, this.getOptions());\n        const numerals = [...new Intl.NumberFormat(this.locale, {useGrouping: false}).format(9876543210)].reverse();\n        const index = new Map(numerals.map((d, i) => [d, i]));\n        this._numeral = new RegExp(`[${numerals.join('')}]`, 'g');\n        this._decimal = this.getDecimalExpression();\n        this._group = this.getGroupingExpression();\n        this._minusSign = this.getMinusSignExpression();\n        this._currency = this.getCurrencyExpression();\n        this._suffix = new RegExp(`[${this.suffix||''}]`, 'g');\n        this._prefix = new RegExp(`[${this.prefix||''}]`, 'g');\n        this._index = d => index.get(d);\n    }\n\n    formatValue(value) {\n        if (value != null) {\n            if (this.format) {\n                let formatter = new Intl.NumberFormat(this.locale, this.getOptions());\n                let formattedValue = formatter.format(value);\n                if (this.prefix) {\n                    formattedValue = this.prefix + formattedValue;\n                }\n\n                if (this.suffix) {\n                    formattedValue = formattedValue + this.suffix;\n                }\n\n                return formattedValue;\n            }\n\n            return value;\n        }\n\n        return '';\n    }\n\n    formattedValue() {\n        return this.formatValue(this.value);\n    }\n\n    onInput(event) {\n        if (this.isSpecialChar) {\n            event.target.value = this.lastValue;\n        }\n        this.isSpecialChar = false;\n    }\n\n    onInputKeyDown(event) {\n        this.lastValue = event.target.value;\n        if (event.shiftKey || event.altKey) {\n            this.isSpecialChar = true;\n            return;\n        }\n\n        let selectionStart = event.target.selectionStart;\n        let selectionEnd = event.target.selectionEnd;\n        let inputValue = event.target.value;\n\n        if (event.altKey) {\n            event.preventDefault();\n        }\n\n        switch (event.which) {\n            //up\n            case 38:\n                this.spin(event, 1);\n                event.preventDefault();\n            break;\n\n            //down\n            case 40:\n                this.spin(event, -1);\n                event.preventDefault();\n            break;\n\n            //left\n            case 37:\n                if (!this.isNumeralChar(inputValue.charAt(selectionStart - 1))) {\n                    event.preventDefault();\n                }\n            break;\n\n            //right\n            case 39:\n                if (!this.isNumeralChar(inputValue.charAt(selectionStart))) {\n                    event.preventDefault();\n                }\n            break;\n\n            //backspace\n            case 8: {\n                event.preventDefault();\n                let newValueStr = null;\n\n                if (selectionStart === selectionEnd) {\n                    let deleteChar = inputValue.charAt(selectionStart - 1);\n                    let decimalCharIndex = inputValue.search(this._decimal);\n                    this._decimal.lastIndex = 0;\n\n                    if (this.isNumeralChar(deleteChar)) {\n                        if (this._group.test(deleteChar)) {\n                            this._group.lastIndex = 0;\n                            newValueStr = inputValue.slice(0, selectionStart - 2) + inputValue.slice(selectionStart - 1);\n                        }\n                        else if (this._decimal.test(deleteChar)) {\n                            this._decimal.lastIndex = 0;\n                            this.input.nativeElement.setSelectionRange(selectionStart - 1, selectionStart - 1);\n                        }\n                        else if (decimalCharIndex > 0 && selectionStart > decimalCharIndex) {\n                            newValueStr = inputValue.slice(0, selectionStart - 1) + '0' + inputValue.slice(selectionStart);\n                        }\n                        else {\n                            newValueStr = inputValue.slice(0, selectionStart - 1) + inputValue.slice(selectionStart);\n                        }\n                    }\n\n                    if (newValueStr != null) {\n                        this.updateValue(event, newValueStr, 'delete-single');\n                    }\n                }\n                else {\n                    newValueStr = this.deleteRange(inputValue, selectionStart, selectionEnd);\n                    this.updateValue(event, newValueStr, 'delete-range');\n                }\n\n                break;\n            }\n\n            default:\n            break;\n        }\n    }\n\n    onInputKeyPress(event) {\n        event.preventDefault();\n        let code = event.which || event.keyCode;\n        let char = String.fromCharCode(code);\n\n        if ((48 <= code && code <= 57) || this.isMinusSign(char)) {\n            this.insert(event, char);\n        }\n    }\n\n    onPaste(event) {\n        event.preventDefault();\n        let data = (event.clipboardData || window['clipboardData']).getData('Text');\n        if (data) {\n            let filteredData = this.parseValue(data);\n            if (filteredData != null) {\n                this.insert(event, filteredData.toString());\n            }\n        }\n    }\n\n    onInputClick() {\n        this.initCursor();\n    }\n\n    onInputFocus(event) {\n        this.focused = true;\n        this.onFocus.emit(event);\n    }\n\n    onInputBlur(event) {\n        this.focused = false;\n\n        let newValue = this.validateValue(this.parseValue(this.input.nativeElement.value));\n        this.input.nativeElement.value = this.formatValue(newValue);\n        this.input.nativeElement.setAttribute('aria-valuenow', newValue);\n        this.updateModel(event, newValue);\n\n        this.onBlur.emit(event);\n    }\n\n    onUpButtonMouseDown(event) {\n        this.input.nativeElement.focus();\n        this.repeat(event, null, 1);\n        event.preventDefault();\n    }\n\n    onUpButtonMouseUp() {\n        this.clearTimer();\n    }\n\n    onUpButtonMouseLeave() {\n        this.clearTimer();\n    }\n\n    onUpButtonKeyDown(event) {\n        if (event.keyCode === 32 || event.keyCode === 13) {\n            this.repeat(event, null, 1);\n        }\n    }\n\n    onUpButtonKeyUp() {\n        this.clearTimer();\n    }\n\n    onDownButtonMouseDown(event) {\n        this.input.nativeElement.focus();\n        this.repeat(event, null, -1);\n        event.preventDefault();\n    }\n\n    onDownButtonMouseUp() {\n        this.clearTimer();\n    }\n\n    onDownButtonMouseLeave() {\n        this.clearTimer();\n    }\n\n    onDownButtonKeyUp() {\n        this.clearTimer();\n    }\n\n    onDownButtonKeyDown(event) {\n        if (event.keyCode === 32 || event.keyCode === 13) {\n            this.repeat(event, null, -1);\n        }\n    }\n\n    spin(event, dir) {\n        let step = this.step * dir;\n        let currentValue = this.parseValue(this.input.nativeElement.value) || 0;\n        let newValue = this.validateValue(currentValue + step);\n        if (this.maxlength && this.maxlength < this.formatValue(newValue).length) {\n            return;\n        }\n        \n        this.updateInput(newValue, 'spin');\n        this.updateModel(event, newValue);\n    }\n\n    repeat(event, interval, dir) {\n        let i = interval || 500;\n\n        this.clearTimer();\n        this.timer = setTimeout(() => {\n            this.repeat(event, 40, dir);\n        }, i);\n\n        this.spin(event, dir);\n    }\n\n    clearTimer() {\n        if (this.timer) {\n            clearInterval(this.timer);\n        }\n    }\n\n    insert(event, text) {\n        let selectionStart = this.input.nativeElement.selectionStart;\n        let selectionEnd = this.input.nativeElement.selectionEnd;\n        let inputValue = this.input.nativeElement.value.trim();\n        let maxFractionDigits = this.numberFormat.resolvedOptions().maximumFractionDigits;\n        let newValueStr;\n        let decimalCharIndex = inputValue.search(this._decimal);\n        this._decimal.lastIndex = 0;\n\n        if (decimalCharIndex > 0 && selectionStart > decimalCharIndex) {\n            if ((selectionStart + text.length - (decimalCharIndex + 1)) <= maxFractionDigits) {\n                newValueStr = inputValue.slice(0, selectionStart) + text + inputValue.slice(selectionStart + text.length);\n                this.updateValue(event, newValueStr, 'insert');\n            }\n        }\n        else {\n            newValueStr = this.insertText(inputValue, text, selectionStart, selectionEnd);\n            this.updateValue(event, newValueStr, 'insert');\n        }\n    }\n\n    insertText(value, text, start, end) {\n        let newValueStr;\n\n        if ((end - start) === value.length)\n            newValueStr = text;\n        else if (start === 0)\n            newValueStr = text + value.slice(end);\n        else if (end === value.length)\n            newValueStr = value.slice(0, start) + text;\n        else\n            newValueStr = value.slice(0, start) + text + value.slice(end);\n\n        return newValueStr;\n    }\n\n    initCursor() {\n        let selectionStart = this.input.nativeElement.selectionStart;\n        let inputValue = this.input.nativeElement.value;\n        let valueLength = inputValue.length;\n        let index = null;\n\n        let char = inputValue.charAt(selectionStart);\n        if (this.isNumeralChar(char)) {\n            return;\n        }\n\n        //left\n        let i = selectionStart - 1;\n        while (i >= 0) {\n            char = inputValue.charAt(i);\n            if (this.isNumeralChar(char)) {\n                index = i;\n                break;\n            }\n            else {\n                i--;\n            }\n        }\n\n        if (index !== null) {\n            this.input.nativeElement.setSelectionRange(index + 1, index + 1);\n        }\n        else {\n            i = selectionStart + 1;\n            while (i < valueLength) {\n                char = inputValue.charAt(i);\n                if (this.isNumeralChar(char)) {\n                    index = i;\n                    break;\n                }\n                else {\n                    i++;\n                }\n            }\n\n            if (index !== null) {\n                this.input.nativeElement.setSelectionRange(index, index);\n            }\n        }\n    }\n\n    updateInput(value, operation) {\n        let currentLength = this.input.nativeElement.value.length;\n\n        if (currentLength === 0) {\n            this.input.nativeElement.value = this.formatValue(value);\n            this.input.nativeElement.setSelectionRange(0, 0);\n            this.initCursor();\n            this.input.nativeElement.setSelectionRange(this.input.nativeElement.selectionStart + 1, this.input.nativeElement.selectionStart + 1);\n        }\n        else {\n            let selectionStart = this.input.nativeElement.selectionEnd;\n            let selectionEnd = this.input.nativeElement.selectionEnd;\n            let formattedValue = this.formatValue(value);\n            if (this.maxlength && this.maxlength < formattedValue.length) {\n                return;\n            }\n            \n            this.input.nativeElement.value = this.formatValue(value);\n            let newLength = this.input.nativeElement.value.length;\n\n            if (newLength === currentLength) {\n                if (operation === 'insert')\n                    this.input.nativeElement.setSelectionRange(selectionEnd + 1, selectionEnd + 1);\n                else if (operation === 'delete-single')\n                    this.input.nativeElement.setSelectionRange(selectionEnd - 1, selectionEnd - 1);\n                else if (operation === 'delete-range')\n                    this.input.nativeElement.setSelectionRange(selectionStart, selectionStart);\n                else if (operation === 'spin')\n                    this.input.nativeElement.setSelectionRange(selectionStart, selectionEnd);\n            }\n            else {\n                selectionEnd = selectionEnd + (newLength - currentLength);\n                this.input.nativeElement.setSelectionRange(selectionEnd, selectionEnd);\n            }\n        }\n\n        this.input.nativeElement.setAttribute('aria-valuenow', value);\n    }\n\n    updateModel(event, value) {\n        this.value = value;\n        this.onModelChange(value);\n    }\n\n    updateValue(event, valueStr, operation) {\n        if (valueStr != null) {\n            let newValue = this.parseValue(valueStr);\n            this.updateInput(newValue, operation);\n        }\n    }\n\n    validateValue(value) {\n        if (this.min !== null && value < this.min) {\n            return this.min;\n        }\n\n        if (this.max !== null && value > this.max) {\n            return this.max;\n        }\n\n        return value;\n    }\n\n    deleteRange(value, start, end) {\n        let newValueStr;\n\n        if ((end - start) === value.length)\n            newValueStr = '';\n        else if (start === 0)\n            newValueStr = value.slice(end);\n        else if (end === value.length)\n            newValueStr = value.slice(0, start);\n        else\n            newValueStr = value.slice(0, start) + value.slice(end);\n\n        return newValueStr;\n    }\n\n    isNumeralChar(char) {\n        if (char.length === 1 && (this._numeral.test(char) || this._decimal.test(char) || this._group.test(char) || this._minusSign.test(char))) {\n            this.resetRegex();\n            return true;\n        }\n\n        return false;\n    }\n\n    isMinusSign(char) {\n        if (this._minusSign.test(char)) {\n            this._minusSign.lastIndex = 0;\n            return true;\n        }\n\n        return false;\n    }\n\n    parseValue(text) {\n        let filteredText = text.trim()\n                            .replace(/\\s/g, '')\n                            .replace(this._currency, '')\n                            .replace(this._group, '')\n                            .replace(this._suffix, '')\n                            .replace(this._prefix, '')\n                            .replace(this._minusSign, '-')\n                            .replace(this._decimal, '.')\n                            .replace(this._numeral, this._index);\n\n        if (filteredText) {\n            let parsedValue = +filteredText;\n            return isNaN(parsedValue) ? null : parsedValue;\n        }\n\n        return null;\n    }\n\n    writeValue(value: any) : void {\n        this.value = value;\n    }\n\n    registerOnChange(fn: Function): void {\n        this.onModelChange = fn;\n    }\n\n    registerOnTouched(fn: Function): void {\n        this.onModelTouched = fn;\n    }\n\n    setDisabledState(val: boolean): void {\n        this.disabled = val;\n    }\n\n    getOptions() {\n        return {\n            localeMatcher: this.localeMatcher,\n            style: this.mode,\n            currency: this.currency,\n            currencyDisplay: this.currencyDisplay,\n            useGrouping: this.useGrouping,\n            minimumFractionDigits: this.minFractionDigits,\n            maximumFractionDigits: this.maxFractionDigits\n        };\n    }\n\n    getDecimalExpression() {\n        const formatter = new Intl.NumberFormat(this.locale, {useGrouping: false});\n        return new RegExp(`[${formatter.format(1.1).trim().replace(this._numeral, '')}]`, 'g');\n    }\n\n    getGroupingExpression() {\n        const formatter = new Intl.NumberFormat(this.locale, {useGrouping: true});\n        return new RegExp(`[${formatter.format(1000).trim().replace(this._numeral, '')}]`, 'g');\n    }\n\n    getMinusSignExpression() {\n        const formatter = new Intl.NumberFormat(this.locale, {useGrouping: false});\n        return new RegExp(`[${formatter.format(-1).trim().replace(this._numeral, '')}]`, 'g');\n    }\n\n    getCurrencyExpression() {\n        if (this.currency) {\n            const formatter = new Intl.NumberFormat(this.locale, {style: 'currency', currency: this.currency, currencyDisplay: this.currencyDisplay});\n            return new RegExp(`[${formatter.format(1).replace(/\\s/g, '').replace(this._numeral, '').replace(this._decimal, '').replace(this._group, '')}]`, 'g');\n        }\n\n        return new RegExp(`[]`,'g');\n    }\n\n    filled() {\n        return (this.value != null && this.value.toString().length > 0)\n    }\n\n    resetRegex() {\n        this._numeral.lastIndex =  0;\n        this._decimal.lastIndex =  0;\n        this._group.lastIndex =  0;\n        this._minusSign.lastIndex =  0;\n    }\n}\n\n@NgModule({\n    imports: [CommonModule,InputTextModule, ButtonModule],\n    exports: [InputNumber],\n    declarations: [InputNumber]\n})\nexport class InputNumberModule { }\n","export * from './inputnumber';","export * from 'primeng/accordion';\nexport * from 'primeng/autocomplete';\nexport * from 'primeng/blockui';\nexport * from 'primeng/breadcrumb';\nexport * from 'primeng/button';\nexport * from 'primeng/calendar';\nexport * from 'primeng/captcha';\nexport * from 'primeng/card';\nexport * from 'primeng/carousel';\nexport * from 'primeng/chart';\nexport * from 'primeng/checkbox';\nexport * from 'primeng/chips';\nexport * from 'primeng/codehighlighter';\nexport * from 'primeng/colorpicker';\nexport * from 'primeng/api';\nexport * from 'primeng/confirmdialog';\nexport * from 'primeng/contextmenu';\nexport * from 'primeng/dataview';\nexport * from 'primeng/defer';\nexport * from 'primeng/dialog';\nexport * from 'primeng/dragdrop';\nexport * from 'primeng/dropdown';\nexport * from 'primeng/dynamicdialog';\nexport * from 'primeng/editor';\nexport * from 'primeng/fieldset';\nexport * from 'primeng/fileupload';\nexport * from 'primeng/focustrap';\nexport * from 'primeng/fullcalendar';\nexport * from 'primeng/galleria';\nexport * from 'primeng/gmap';\nexport * from 'primeng/inplace';\nexport * from 'primeng/inputmask';\nexport * from 'primeng/inputnumber';\nexport * from 'primeng/inputswitch';\nexport * from 'primeng/inputtext';\nexport * from 'primeng/inputtextarea';\nexport * from 'primeng/keyfilter';\nexport * from 'primeng/lightbox';\nexport * from 'primeng/listbox';\nexport * from 'primeng/megamenu';\nexport * from 'primeng/menu';\nexport * from 'primeng/menubar';\nexport * from 'primeng/message';\nexport * from 'primeng/messages';\nexport * from 'primeng/multiselect';\nexport * from 'primeng/orderlist';\nexport * from 'primeng/organizationchart';\nexport * from 'primeng/overlaypanel';\nexport * from 'primeng/paginator';\nexport * from 'primeng/panel';\nexport * from 'primeng/panelmenu';\nexport * from 'primeng/password';\nexport * from 'primeng/picklist';\nexport * from 'primeng/progressbar';\nexport * from 'primeng/progressspinner';\nexport * from 'primeng/radiobutton';\nexport * from 'primeng/rating';\nexport * from 'primeng/scrollpanel';\nexport * from 'primeng/selectbutton';\nexport * from 'primeng/sidebar';\nexport * from 'primeng/slidemenu';\nexport * from 'primeng/slider';\nexport * from 'primeng/spinner';\nexport * from 'primeng/splitbutton';\nexport * from 'primeng/steps';\nexport * from 'primeng/table';\nexport * from 'primeng/tabmenu';\nexport * from 'primeng/tabview';\nexport * from 'primeng/terminal';\nexport * from 'primeng/tieredmenu';\nexport * from 'primeng/toast';\nexport * from 'primeng/togglebutton';\nexport * from 'primeng/toolbar';\nexport * from 'primeng/tooltip';\nexport * from 'primeng/tree';\nexport * from 'primeng/treetable';\nexport * from 'primeng/tristatecheckbox';\nexport * from 'primeng/virtualscroller';","import {NgModule} from '@angular/core';\nimport {RouterModule} from '@angular/router'\nimport {InputNumberDemo} from './inputnumberdemo';\n\n@NgModule({\n\timports: [\n\t\tRouterModule.forChild([\n\t\t\t{path:'',component: InputNumberDemo}\n\t\t])\n\t],\n\texports: [\n\t\tRouterModule\n\t]\n})\nexport class InputNumberDemoRoutingModule {}\n","import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {FormsModule} from '@angular/forms';\nimport {InputNumberDemo} from './inputnumberdemo';\nimport {InputNumberDemoRoutingModule} from './inputnumberdemo-routing.module';\nimport {TabViewModule} from 'primeng/tabview';\nimport {CodeHighlighterModule} from 'primeng/codehighlighter';\nimport { InputNumberModule } from 'src/app/components/public_api';\n\n@NgModule({\n\timports: [\n\t\tCommonModule,\n        FormsModule,\n\t\tInputNumberDemoRoutingModule,\n        InputNumberModule,\n        TabViewModule,\n        CodeHighlighterModule\n\t],\n\tdeclarations: [\n\t\tInputNumberDemo\n\t]\n})\nexport class InputNumberDemoModule {}\n","import {Component, ViewEncapsulation} from '@angular/core';\n\n@Component({\n    templateUrl: './inputnumberdemo.html',\n    styles: [`\n        .ui-inputnumber {\n            margin-top: 1em;\n        }\n    `],\n    encapsulation: ViewEncapsulation.None\n})\nexport class InputNumberDemo {\n    value1: number = 42723;\n\n    value2: number = 58151;\n\n    value3: number = 2351.35;\n\n    value4: number = 50;\n\n    value5: number = 151351;\n\n    value6: number = 115744;\n\n    value7: number = 635524;\n\n    value8: number = 732762;\n\n    value9: number = 1500;\n\n    value10: number = 2500;\n\n    value11: number = 4250;\n\n    value12: number = 5002;\n\n    value13: number = 20;\n\n    value14: number = 50;\n\n    value15: number = 10;\n\n    value16: number = 20;\n\n    value17: number = 20;\n\n    value18: number = 10.50;\n\n    value19: number = 25;\n\n    value20: number = 50;\n}"]}