{"version":3,"sources":["webpack:///src/app/components/tree/public_api.ts","webpack:///src/app/components/tree/tree.ts"],"names":["UITreeNode","tree","ngOnInit","node","parent","parentNode","syncNodeOption","value","getNodeWithKey","key","getIcon","icon","expanded","children","length","expandedIcon","collapsedIcon","ICON_CLASS","isLeaf","isNodeLeaf","toggle","event","collapse","expand","virtualScroll","updateSerializedValue","onNodeExpand","emit","originalEvent","onNodeCollapse","onNodeClick","onNodeKeydown","which","onNodeTouchEnd","onNodeRightClick","isSelected","onDropPoint","position","preventDefault","dragNode","dragNodeIndex","dragNodeScope","isValidDropPointIndex","dragNodeTree","index","allowDrop","dropParams","createDropPointEventMetadata","validateDrop","onNodeDrop","dropNode","dropIndex","accept","processPointDrop","draghoverPrev","draghoverNext","newNodeList","dragNodeSubNodes","splice","push","dragDropService","stopDrag","subNodes","onDropPointDragOver","dataTransfer","dropEffect","onDropPointDragEnter","onDropPointDragLeave","onDragStart","draggableNodes","draggable","setData","startDrag","scope","draggableScope","onDragStop","onDropNodeDragOver","droppableNodes","stopPropagation","onDropNode","droppable","createDropNodeEventMetadata","processNodeDrop","draghoverNode","onDropNodeDragEnter","onDropNodeDragLeave","rect","currentTarget","getBoundingClientRect","x","left","width","y","Math","floor","top","height","onKeyDown","nodeElement","target","parentElement","nodeName","listElement","focusNode","nextNodeElement","nextElementSibling","nextSiblingAncestor","findNextSiblingOfAncestor","previousElementSibling","findLastVisibleDescendant","parentNodeElement","getParentNodeElement","Array","from","find","el","hasClass","childrenListElement","lastChildElement","tagName","element","focus","Tree","selector","template","selectionChange","onNodeSelect","onNodeUnselect","onNodeContextMenuSelect","layout","metaKeySelection","propagateSelectionUp","propagateSelectionDown","loadingIcon","emptyMessage","filterBy","filterMode","trackBy","item","onFilter","dragStartSubscription","dragStart$","subscribe","dragStopSubscription","dragStop$","dragHover","ngOnChanges","simpleChange","ngAfterContentInit","templates","templateMap","forEach","name","serializedValue","serializeNodes","getRootNode","nodes","level","visible","rowNode","eventTarget","selectionMode","selectable","hasFilteredNodes","findIndexInSelection","selected","isCheckboxSelectionMode","propagateDown","selection","filter","val","i","propagateUp","metaSelection","nodeTouched","metaKey","ctrlKey","isSingleSelectionMode","isMultipleSelectionMode","contextMenu","className","indexOf","show","areNodesEqual","selectedNode","parentNodes","option","_node","filteredNodes","matchedNode","select","selectedCount","childPartialSelected","child","partialSelected","leaf","getTemplateForNode","type","onDragOver","onDrop","onDragEnter","onDragLeave","isValidDragScope","allow","dragScope","dropScope","droppableScope","s","ds","_filter","filterValue","searchFields","split","filterText","removeAccents","toLocaleLowerCase","filterLocale","isStrictMode","copyNode","paramsWithoutNode","findFilteredNodes","isFilterMatched","filteredValue","matched","childNodes","childNode","copyChildNode","field","fieldValue","String","resolveFieldData","getBlockableElement","nativeElement","ngOnDestroy","unsubscribe","Function","changeDetection","Default","TreeModule","imports","exports","declarations"],"mappings":"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","file":"default~components-inputnumber-inputnumberdemo-module~components-responsive-responsivedemo-module~co~8c9490f0-es5.js","sourcesContent":["export * from './tree';","import {NgModule,Component,Input,AfterContentInit,OnDestroy,Output,EventEmitter,OnInit,OnChanges,\n    ContentChildren,QueryList,TemplateRef,Inject,ElementRef,forwardRef,ChangeDetectionStrategy,SimpleChanges} from '@angular/core';\nimport {ScrollingModule} from '@angular/cdk/scrolling';\nimport {Optional} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {TreeNode} from 'primeng/api';\nimport {SharedModule} from 'primeng/api';\nimport {PrimeTemplate} from 'primeng/api';\nimport {TreeDragDropService} from 'primeng/api';\nimport {Subscription} from 'rxjs';\nimport {BlockableUI} from 'primeng/api';\nimport {ObjectUtils} from 'primeng/utils';\nimport {DomHandler} from 'primeng/dom';\n\n@Component({\n    selector: 'p-treeNode',\n    template: `\n        <ng-template [ngIf]=\"node\">\n            <li *ngIf=\"tree.droppableNodes\" class=\"ui-treenode-droppoint\" [ngClass]=\"{'ui-treenode-droppoint-active ui-state-highlight':draghoverPrev}\"\n            (drop)=\"onDropPoint($event,-1)\" (dragover)=\"onDropPointDragOver($event)\" (dragenter)=\"onDropPointDragEnter($event,-1)\" (dragleave)=\"onDropPointDragLeave($event)\"></li>\n            <li *ngIf=\"!tree.horizontal\" role=\"treeitem\" [ngClass]=\"['ui-treenode',node.styleClass||'', isLeaf() ? 'ui-treenode-leaf': '']\">\n                <div class=\"ui-treenode-content\" [style.paddingLeft]=\"(level * 1.5)  + 'em'\" (click)=\"onNodeClick($event)\" (contextmenu)=\"onNodeRightClick($event)\" (touchend)=\"onNodeTouchEnd()\"\n                    (drop)=\"onDropNode($event)\" (dragover)=\"onDropNodeDragOver($event)\" (dragenter)=\"onDropNodeDragEnter($event)\" (dragleave)=\"onDropNodeDragLeave($event)\"\n                    [draggable]=\"tree.draggableNodes\" (dragstart)=\"onDragStart($event)\" (dragend)=\"onDragStop($event)\" [attr.tabindex]=\"0\"\n                    [ngClass]=\"{'ui-treenode-selectable':tree.selectionMode && node.selectable !== false,'ui-treenode-dragover':draghoverNode, 'ui-treenode-content-selected':isSelected()}\"\n                    (keydown)=\"onKeyDown($event)\" [attr.aria-posinset]=\"this.index + 1\" [attr.aria-expanded]=\"this.node.expanded\" [attr.aria-selected]=\"isSelected()\" [attr.aria-label]=\"node.label\">\n                    <span *ngIf=\"!isLeaf()\" class=\"ui-tree-toggler pi ui-unselectable-text\" [ngClass]=\"{'pi-caret-right':!node.expanded,'pi-caret-down':node.expanded}\" (click)=\"toggle($event)\"></span\n                    ><div class=\"ui-chkbox\" *ngIf=\"tree.selectionMode == 'checkbox'\" [attr.aria-checked]=\"isSelected()\"><div class=\"ui-chkbox-box ui-widget ui-corner-all ui-state-default\" [ngClass]=\"{'ui-state-disabled': node.selectable === false}\">\n                        <span class=\"ui-chkbox-icon ui-clickable pi\"\n                            [ngClass]=\"{'pi-check':isSelected(),'pi-minus':node.partialSelected}\"></span></div></div\n                    ><span [class]=\"getIcon()\" *ngIf=\"node.icon||node.expandedIcon||node.collapsedIcon\"></span\n                    ><span class=\"ui-treenode-label ui-corner-all\"\n                        [ngClass]=\"{'ui-state-highlight':isSelected()}\">\n                            <span *ngIf=\"!tree.getTemplateForNode(node)\">{{node.label}}</span>\n                            <span *ngIf=\"tree.getTemplateForNode(node)\">\n                                <ng-container *ngTemplateOutlet=\"tree.getTemplateForNode(node); context: {$implicit: node}\"></ng-container>\n                            </span>\n                    </span>\n                </div>\n                <ul class=\"ui-treenode-children\" style=\"display: none;\" *ngIf=\"!tree.virtualScroll && node.children && node.expanded\" [style.display]=\"node.expanded ? 'block' : 'none'\" role=\"group\">\n                    <p-treeNode *ngFor=\"let childNode of node.children;let firstChild=first;let lastChild=last; let index=index; trackBy: tree.trackBy\" [node]=\"childNode\" [parentNode]=\"node\"\n                        [firstChild]=\"firstChild\" [lastChild]=\"lastChild\" [index]=\"index\" [style.height.px]=\"tree.virtualNodeHeight\" [level]=\"level + 1\"></p-treeNode>\n                </ul>\n            </li>\n            <li *ngIf=\"tree.droppableNodes&&lastChild\" class=\"ui-treenode-droppoint\" [ngClass]=\"{'ui-treenode-droppoint-active ui-state-highlight':draghoverNext}\"\n            (drop)=\"onDropPoint($event,1)\" (dragover)=\"onDropPointDragOver($event)\" (dragenter)=\"onDropPointDragEnter($event,1)\" (dragleave)=\"onDropPointDragLeave($event)\"></li>\n            <table *ngIf=\"tree.horizontal\" [class]=\"node.styleClass\">\n                <tbody>\n                    <tr>\n                        <td class=\"ui-treenode-connector\" *ngIf=\"!root\">\n                            <table class=\"ui-treenode-connector-table\">\n                                <tbody>\n                                    <tr>\n                                        <td [ngClass]=\"{'ui-treenode-connector-line':!firstChild}\"></td>\n                                    </tr>\n                                    <tr>\n                                        <td [ngClass]=\"{'ui-treenode-connector-line':!lastChild}\"></td>\n                                    </tr>\n                                </tbody>\n                            </table>\n                        </td>\n                        <td class=\"ui-treenode\" [ngClass]=\"{'ui-treenode-collapsed':!node.expanded}\">\n                            <div class=\"ui-treenode-content ui-state-default ui-corner-all\" tabindex=\"0\"\n                                [ngClass]=\"{'ui-treenode-selectable':tree.selectionMode,'ui-state-highlight':isSelected()}\" (click)=\"onNodeClick($event)\" (contextmenu)=\"onNodeRightClick($event)\"\n                                (touchend)=\"onNodeTouchEnd()\" (keydown)=\"onNodeKeydown($event)\">\n                                <span class=\"ui-tree-toggler pi pi-fw ui-unselectable-text\" [ngClass]=\"{'pi-plus':!node.expanded,'pi-minus':node.expanded}\" *ngIf=\"!isLeaf()\"\n                                        (click)=\"toggle($event)\"></span\n                                ><span [class]=\"getIcon()\" *ngIf=\"node.icon||node.expandedIcon||node.collapsedIcon\"></span\n                                ><span class=\"ui-treenode-label ui-corner-all\">\n                                        <span *ngIf=\"!tree.getTemplateForNode(node)\">{{node.label}}</span>\n                                        <span *ngIf=\"tree.getTemplateForNode(node)\">\n                                        <ng-container *ngTemplateOutlet=\"tree.getTemplateForNode(node); context: {$implicit: node}\"></ng-container>\n                                        </span>\n                                </span>\n                            </div>\n                        </td>\n                        <td class=\"ui-treenode-children-container\" *ngIf=\"node.children && node.expanded\" [style.display]=\"node.expanded ? 'table-cell' : 'none'\">\n                            <div class=\"ui-treenode-children\">\n                                <p-treeNode *ngFor=\"let childNode of node.children;let firstChild=first;let lastChild=last; trackBy: tree.trackBy\" [node]=\"childNode\"\n                                        [firstChild]=\"firstChild\" [lastChild]=\"lastChild\"></p-treeNode>\n                            </div>\n                        </td>\n                    </tr>\n                </tbody>\n            </table>\n        </ng-template>\n    `\n})\nexport class UITreeNode implements OnInit {\n\n    static ICON_CLASS: string = 'ui-treenode-icon ';\n\n    @Input() rowNode: any;\n\n    @Input() node: TreeNode;\n\n    @Input() parentNode: TreeNode;\n\n    @Input() root: boolean;\n\n    @Input() index: number;\n\n    @Input() firstChild: boolean;\n\n    @Input() lastChild: boolean;\n\n    @Input() level: number;\n\n    tree: Tree;\n\n    constructor(@Inject(forwardRef(() => Tree)) tree) {\n        this.tree = tree as Tree;\n    }\n\n    draghoverPrev: boolean;\n\n    draghoverNext: boolean;\n\n    draghoverNode: boolean\n\n    ngOnInit() {\n        this.node.parent = this.parentNode;\n\n        if (this.parentNode) {\n            this.tree.syncNodeOption(this.node, this.tree.value, 'parent', this.tree.getNodeWithKey(this.parentNode.key, this.tree.value));\n        }\n    }\n\n    getIcon() {\n        let icon: string;\n\n        if (this.node.icon)\n            icon = this.node.icon;\n        else\n            icon = this.node.expanded && this.node.children && this.node.children.length ? this.node.expandedIcon : this.node.collapsedIcon;\n\n        return UITreeNode.ICON_CLASS + ' ' + icon;\n    }\n\n    isLeaf() {\n        return this.tree.isNodeLeaf(this.node);\n    }\n\n    toggle(event: Event) {\n        if (this.node.expanded)\n            this.collapse(event);\n        else\n            this.expand(event);\n    }\n\n    expand(event: Event) {\n        this.node.expanded = true;\n        if (this.tree.virtualScroll) {\n            this.tree.updateSerializedValue();\n        }\n        this.tree.onNodeExpand.emit({originalEvent: event, node: this.node});\n    }\n\n    collapse(event: Event) {\n        this.node.expanded = false;\n        if (this.tree.virtualScroll) {\n            this.tree.updateSerializedValue();\n        }\n        this.tree.onNodeCollapse.emit({originalEvent: event, node: this.node});\n    }\n\n    onNodeClick(event: MouseEvent) {\n        this.tree.onNodeClick(event, this.node);\n    }\n\n    onNodeKeydown(event: KeyboardEvent) {\n        if (event.which === 13) {\n            this.tree.onNodeClick(event, this.node);\n        }\n    }\n\n    onNodeTouchEnd() {\n        this.tree.onNodeTouchEnd();\n    }\n\n    onNodeRightClick(event: MouseEvent) {\n        this.tree.onNodeRightClick(event, this.node);\n    }\n\n    isSelected() {\n        return this.tree.isSelected(this.node);\n    }\n\n    onDropPoint(event: Event, position: number) {\n        event.preventDefault();\n        let dragNode = this.tree.dragNode;\n        let dragNodeIndex = this.tree.dragNodeIndex;\n        let dragNodeScope = this.tree.dragNodeScope;\n        let isValidDropPointIndex = this.tree.dragNodeTree === this.tree ? (position === 1 || dragNodeIndex !== this.index - 1) : true;\n\n        if (this.tree.allowDrop(dragNode, this.node, dragNodeScope) && isValidDropPointIndex) {\n            let dropParams = {...this.createDropPointEventMetadata(position)};\n\n            if (this.tree.validateDrop) {\n                this.tree.onNodeDrop.emit({\n                    originalEvent: event,\n                    dragNode: dragNode,\n                    dropNode: this.node,\n                    dropIndex: this.index,\n                    accept: () => {\n                        this.processPointDrop(dropParams);\n                    }\n                });\n            }\n            else {\n                this.processPointDrop(dropParams);\n                this.tree.onNodeDrop.emit({\n                    originalEvent: event,\n                    dragNode: dragNode,\n                    dropNode: this.node,\n                    dropIndex: this.index\n                });\n            }\n        }\n\n        this.draghoverPrev = false;\n        this.draghoverNext = false;\n    }\n\n    processPointDrop(event) {\n        let newNodeList = event.dropNode.parent ? event.dropNode.parent.children : this.tree.value;\n        event.dragNodeSubNodes.splice(event.dragNodeIndex, 1);\n        let dropIndex = this.index;\n\n        if (event.position < 0) {\n            dropIndex = (event.dragNodeSubNodes === newNodeList) ? ((event.dragNodeIndex > event.index) ? event.index : event.index - 1) : event.index;\n            newNodeList.splice(dropIndex, 0, event.dragNode);\n        }\n        else {\n            dropIndex = newNodeList.length;\n            newNodeList.push(event.dragNode);\n        }\n\n        this.tree.dragDropService.stopDrag({\n            node: event.dragNode,\n            subNodes: event.dropNode.parent ? event.dropNode.parent.children : this.tree.value,\n            index: event.dragNodeIndex\n        });\n    }\n\n    createDropPointEventMetadata(position) {\n        return {\n            dragNode: this.tree.dragNode,\n            dragNodeIndex:  this.tree.dragNodeIndex,\n            dragNodeSubNodes: this.tree.dragNodeSubNodes,\n            dropNode: this.node,\n            index: this.index,\n            position: position\n        };\n    }\n\n    onDropPointDragOver(event) {\n        event.dataTransfer.dropEffect = 'move';\n        event.preventDefault();\n    }\n\n    onDropPointDragEnter(event: Event, position: number) {\n        if (this.tree.allowDrop(this.tree.dragNode, this.node, this.tree.dragNodeScope)) {\n            if (position < 0)\n                this.draghoverPrev = true;\n            else\n                this.draghoverNext = true;\n        }\n    }\n\n    onDropPointDragLeave(event: Event) {\n        this.draghoverPrev = false;\n        this.draghoverNext = false;\n    }\n\n    onDragStart(event) {\n        if (this.tree.draggableNodes && this.node.draggable !== false) {\n            event.dataTransfer.setData(\"text\", \"data\");\n\n            this.tree.dragDropService.startDrag({\n                tree: this,\n                node: this.node,\n                subNodes: this.node.parent ? this.node.parent.children : this.tree.value,\n                index: this.index,\n                scope: this.tree.draggableScope\n            });\n        }\n        else {\n            event.preventDefault();\n        }\n    }\n\n    onDragStop(event) {\n        this.tree.dragDropService.stopDrag({\n            node: this.node,\n            subNodes: this.node.parent ? this.node.parent.children : this.tree.value,\n            index: this.index\n        });\n    }\n\n    onDropNodeDragOver(event) {\n        event.dataTransfer.dropEffect = 'move';\n        if (this.tree.droppableNodes) {\n            event.preventDefault();\n            event.stopPropagation();\n        }\n    }\n\n    onDropNode(event) {\n        if (this.tree.droppableNodes && this.node.droppable !== false) {\n            event.preventDefault();\n            event.stopPropagation();\n            let dragNode = this.tree.dragNode;\n\n            if (this.tree.allowDrop(dragNode, this.node, this.tree.dragNodeScope)) {\n                let dropParams = {...this.createDropNodeEventMetadata()};\n\n                if (this.tree.validateDrop) {\n                    this.tree.onNodeDrop.emit({\n                        originalEvent: event,\n                        dragNode: dragNode,\n                        dropNode: this.node,\n                        index: this.index,\n                        accept: () => {\n                            this.processNodeDrop(dropParams);\n                        }\n                    });\n                }\n                else {\n                    this.processNodeDrop(dropParams);\n                    this.tree.onNodeDrop.emit({\n                        originalEvent: event,\n                        dragNode: dragNode,\n                        dropNode: this.node,\n                        index: this.index\n                    });\n                }\n            }\n        }\n\n        this.draghoverNode = false;\n    }\n\n    createDropNodeEventMetadata() {\n        return {\n            dragNode: this.tree.dragNode,\n            dragNodeIndex:  this.tree.dragNodeIndex,\n            dragNodeSubNodes: this.tree.dragNodeSubNodes,\n            dropNode: this.node\n        };\n    }\n\n    processNodeDrop(event) {\n        let dragNodeIndex = event.dragNodeIndex;\n        event.dragNodeSubNodes.splice(dragNodeIndex, 1);\n\n        if (event.dropNode.children)\n            event.dropNode.children.push(event.dragNode);\n        else\n            event.dropNode.children = [event.dragNode];\n\n        this.tree.dragDropService.stopDrag({\n            node: event.dragNode,\n            subNodes: event.dropNode.parent ? event.dropNode.parent.children : this.tree.value,\n            index: dragNodeIndex\n        });\n\n\n    }\n\n    onDropNodeDragEnter(event) {\n        if (this.tree.droppableNodes && this.node.droppable !== false && this.tree.allowDrop(this.tree.dragNode, this.node, this.tree.dragNodeScope)) {\n            this.draghoverNode = true;\n        }\n    }\n\n    onDropNodeDragLeave(event) {\n        if (this.tree.droppableNodes) {\n            let rect = event.currentTarget.getBoundingClientRect();\n            if (event.x > rect.left + rect.width || event.x < rect.left || event.y >= Math.floor(rect.top + rect.height) || event.y < rect.top) {\n               this.draghoverNode = false;\n            }\n        }\n    }\n\n    onKeyDown(event: KeyboardEvent) {\n        const nodeElement = (<HTMLDivElement> event.target).parentElement.parentElement;\n\n        if (nodeElement.nodeName !== 'P-TREENODE') {\n            return;\n        }\n\n        switch (event.which) {\n            //down arrow\n            case 40:\n                const listElement = (this.tree.droppableNodes) ? nodeElement.children[1].children[1] : nodeElement.children[0].children[1];\n                if (listElement && listElement.children.length > 0) {\n                    this.focusNode(listElement.children[0]);\n                }\n                else {\n                    const nextNodeElement = nodeElement.nextElementSibling;\n                    if (nextNodeElement) {\n                        this.focusNode(nextNodeElement);\n                    }\n                    else {\n                        let nextSiblingAncestor = this.findNextSiblingOfAncestor(nodeElement);\n                        if (nextSiblingAncestor) {\n                            this.focusNode(nextSiblingAncestor);\n                        }\n                    }\n                }\n\n                event.preventDefault();\n            break;\n\n            //up arrow\n            case 38:\n                if (nodeElement.previousElementSibling) {\n                    this.focusNode(this.findLastVisibleDescendant(nodeElement.previousElementSibling));\n                }\n                else {\n                    let parentNodeElement = this.getParentNodeElement(nodeElement);\n                    if (parentNodeElement) {\n                        this.focusNode(parentNodeElement);\n                    }\n                }\n\n                event.preventDefault();\n            break;\n\n            //right arrow\n            case 39:\n                if (!this.node.expanded && !this.tree.isNodeLeaf(this.node)) {\n                    this.expand(event);\n                }\n\n                event.preventDefault();\n            break;\n\n            //left arrow\n            case 37:\n                if (this.node.expanded) {\n                    this.collapse(event);\n                }\n                else {\n                    let parentNodeElement = this.getParentNodeElement(nodeElement);\n                    if (parentNodeElement) {\n                        this.focusNode(parentNodeElement);\n                    }\n                }\n\n                event.preventDefault();\n            break;\n\n            //enter\n            case 13:\n                this.tree.onNodeClick(event, this.node);\n                event.preventDefault();\n            break;\n\n            default:\n                //no op\n            break;\n        }\n    }\n\n    findNextSiblingOfAncestor(nodeElement) {\n        let parentNodeElement = this.getParentNodeElement(nodeElement);\n        if (parentNodeElement) {\n            if (parentNodeElement.nextElementSibling)\n                return parentNodeElement.nextElementSibling;\n            else\n                return this.findNextSiblingOfAncestor(parentNodeElement);\n        }\n        else {\n            return null;\n        }\n    }\n\n    findLastVisibleDescendant(nodeElement) {\n        const listElement = <HTMLElement> Array.from(nodeElement.children).find(el => DomHandler.hasClass(el, 'ui-treenode'));\n        const childrenListElement = listElement.children[1];\n        if (childrenListElement && childrenListElement.children.length > 0) {\n            const lastChildElement = childrenListElement.children[childrenListElement.children.length - 1];\n\n            return this.findLastVisibleDescendant(lastChildElement);\n        }\n        else {\n            return nodeElement;\n        }\n    }\n\n    getParentNodeElement(nodeElement) {\n        const parentNodeElement = nodeElement.parentElement.parentElement.parentElement;\n\n        return parentNodeElement.tagName === 'P-TREENODE' ? parentNodeElement : null;\n    }\n\n    focusNode(element) {\n        if (this.tree.droppableNodes)\n            element.children[1].children[0].focus();\n        else\n            element.children[0].children[0].focus();\n    }\n}\n\n@Component({\n    selector: 'p-tree',\n    template: `\n        <div [ngClass]=\"{'ui-tree ui-widget ui-widget-content ui-corner-all':true,'ui-tree-selectable':selectionMode,\n                'ui-treenode-dragover':dragHover,'ui-tree-loading': loading, 'ui-tree-flex-scrollable': scrollHeight === 'flex'}\" \n            [ngStyle]=\"style\" [class]=\"styleClass\" *ngIf=\"!horizontal\"\n            (drop)=\"onDrop($event)\" (dragover)=\"onDragOver($event)\" (dragenter)=\"onDragEnter($event)\" (dragleave)=\"onDragLeave($event)\">\n            <div class=\"ui-tree-loading-mask ui-widget-overlay\" *ngIf=\"loading\"></div>\n            <div class=\"ui-tree-loading-content\" *ngIf=\"loading\">\n                <i [class]=\"'ui-tree-loading-icon pi-spin ' + loadingIcon\"></i>\n            </div>\n            <div *ngIf=\"filter\" class=\"ui-tree-filter-container\">\n                <input #filter type=\"text\" autocomplete=\"off\" class=\"ui-tree-filter ui-inputtext ui-widget ui-state-default ui-corner-all\" [attr.placeholder]=\"filterPlaceholder\"\n                    (keydown.enter)=\"$event.preventDefault()\" (input)=\"_filter($event)\">\n                    <span class=\"ui-tree-filter-icon pi pi-search\"></span>\n            </div>\n            <ng-container *ngIf=\"!virtualScroll; else virtualScrollList\">\n                <div class=\"ui-tree-wrapper\" [style.max-height]=\"scrollHeight\">\n                    <ul class=\"ui-tree-container\" *ngIf=\"getRootNode()\" role=\"tree\" [attr.aria-label]=\"ariaLabel\" [attr.aria-labelledby]=\"ariaLabelledBy\">\n                        <p-treeNode *ngFor=\"let node of getRootNode(); let firstChild=first;let lastChild=last; let index=index; trackBy: trackBy\" [node]=\"node\"\n                                    [firstChild]=\"firstChild\" [lastChild]=\"lastChild\" [index]=\"index\" [level]=\"0\"></p-treeNode>\n                    </ul>\n                </div>\n            </ng-container>\n            <ng-template #virtualScrollList>\n                <cdk-virtual-scroll-viewport class=\"ui-tree-wrapper\" [style.height]=\"scrollHeight\" [itemSize]=\"virtualNodeHeight\" [minBufferPx]=\"minBufferPx\" [maxBufferPx]=\"maxBufferPx\">\n                    <ul class=\"ui-tree-container\" *ngIf=\"getRootNode()\" role=\"tree\" [attr.aria-label]=\"ariaLabel\" [attr.aria-labelledby]=\"ariaLabelledBy\">\n                        <p-treeNode *cdkVirtualFor=\"let rowNode of serializedValue; let firstChild=first; let lastChild=last; let index=index; trackBy: trackBy\"  [level]=\"rowNode.level\"\n                                    [rowNode]=\"rowNode\" [node]=\"rowNode.node\" [firstChild]=\"firstChild\" [lastChild]=\"lastChild\" [index]=\"index\" [style.height.px]=\"virtualNodeHeight\"></p-treeNode>\n                    </ul>\n                </cdk-virtual-scroll-viewport>\n            </ng-template>\n            <div class=\"ui-tree-empty-message\" *ngIf=\"!loading && (value == null || value.length === 0)\">{{emptyMessage}}</div>\n        </div>\n        <div [ngClass]=\"{'ui-tree ui-tree-horizontal ui-widget ui-widget-content ui-corner-all':true,'ui-tree-selectable':selectionMode}\"  [ngStyle]=\"style\" [class]=\"styleClass\" *ngIf=\"horizontal\">\n            <div class=\"ui-tree-loading ui-widget-overlay\" *ngIf=\"loading\"></div>\n            <div class=\"ui-tree-loading-content\" *ngIf=\"loading\">\n                <i [class]=\"'ui-tree-loading-icon pi-spin ' + loadingIcon\"></i>\n            </div>\n            <table *ngIf=\"value&&value[0]\">\n                <p-treeNode [node]=\"value[0]\" [root]=\"true\"></p-treeNode>\n            </table>\n            <div class=\"ui-tree-empty-message\" *ngIf=\"!loading && (value == null || value.length === 0)\">{{emptyMessage}}</div>\n        </div>\n    `,\n    changeDetection: ChangeDetectionStrategy.Default\n})\nexport class Tree implements OnInit,AfterContentInit,OnChanges,OnDestroy,BlockableUI {\n\n    @Input() value: TreeNode[];\n\n    @Input() selectionMode: string;\n\n    @Input() selection: any;\n\n    @Output() selectionChange: EventEmitter<any> = new EventEmitter();\n\n    @Output() onNodeSelect: EventEmitter<any> = new EventEmitter();\n\n    @Output() onNodeUnselect: EventEmitter<any> = new EventEmitter();\n\n    @Output() onNodeExpand: EventEmitter<any> = new EventEmitter();\n\n    @Output() onNodeCollapse: EventEmitter<any> = new EventEmitter();\n\n    @Output() onNodeContextMenuSelect: EventEmitter<any> = new EventEmitter();\n\n    @Output() onNodeDrop: EventEmitter<any> = new EventEmitter();\n\n    @Input() style: any;\n\n    @Input() styleClass: string;\n\n    @Input() contextMenu: any;\n\n    @Input() layout: string = 'vertical';\n\n    @Input() draggableScope: any;\n\n    @Input() droppableScope: any;\n\n    @Input() draggableNodes: boolean;\n\n    @Input() droppableNodes: boolean;\n\n    @Input() metaKeySelection: boolean = true;\n\n    @Input() propagateSelectionUp: boolean = true;\n\n    @Input() propagateSelectionDown: boolean = true;\n\n    @Input() loading: boolean;\n\n    @Input() loadingIcon: string = 'pi pi-spinner';\n\n    @Input() emptyMessage: string = 'No records found';\n\n    @Input() ariaLabel: string;\n\n    @Input() ariaLabelledBy: string;\n\n    @Input() validateDrop: boolean;\n\n    @Input() filter: boolean;\n\n    @Input() filterBy: string = 'label';\n\n    @Input() filterMode: string = 'lenient';\n\n    @Input() filterPlaceholder: string;\n\n    @Input() filterLocale: string;\n\n    @Input() scrollHeight: string;\n\n    @Input() virtualScroll: boolean;\n\n    @Input() virtualNodeHeight: string;\n\n    @Input() minBufferPx: number;\n\n    @Input() maxBufferPx: number;\n\n    @Input() trackBy: Function = (index: number, item: any) => item;\n\n    @Output() onFilter: EventEmitter<any> = new EventEmitter();\n\n    @ContentChildren(PrimeTemplate) templates: QueryList<any>;\n\n    serializedValue: any[];\n\n    public templateMap: any;\n\n    public nodeTouched: boolean;\n\n    public dragNodeTree: Tree;\n\n    public dragNode: TreeNode;\n\n    public dragNodeSubNodes: TreeNode[];\n\n    public dragNodeIndex: number;\n\n    public dragNodeScope: any;\n\n    public dragHover: boolean;\n\n    public dragStartSubscription: Subscription;\n\n    public dragStopSubscription: Subscription;\n\n    public filteredNodes: TreeNode[];\n\n    constructor(public el: ElementRef, @Optional() public dragDropService: TreeDragDropService) {}\n\n    ngOnInit() {\n        if (this.droppableNodes) {\n            this.dragStartSubscription = this.dragDropService.dragStart$.subscribe(\n              event => {\n                this.dragNodeTree = event.tree;\n                this.dragNode = event.node;\n                this.dragNodeSubNodes = event.subNodes;\n                this.dragNodeIndex = event.index;\n                this.dragNodeScope = event.scope;\n            });\n\n            this.dragStopSubscription = this.dragDropService.dragStop$.subscribe(\n              event => {\n                this.dragNodeTree = null;\n                this.dragNode = null;\n                this.dragNodeSubNodes = null;\n                this.dragNodeIndex = null;\n                this.dragNodeScope = null;\n                this.dragHover = false;\n            });\n        }\n    }\n\n    ngOnChanges(simpleChange: SimpleChanges) {\n        if (simpleChange.value) {\n            this.updateSerializedValue();\n        }\n    }\n\n    get horizontal(): boolean {\n        return this.layout == 'horizontal';\n    }\n\n    ngAfterContentInit() {\n        if (this.templates.length) {\n            this.templateMap = {};\n        }\n\n        this.templates.forEach((item) => {\n            this.templateMap[item.name] = item.template;\n        });\n    }\n\n    updateSerializedValue() {\n        this.serializedValue = [];\n        this.serializeNodes(null, this.getRootNode(), 0, true);\n    }\n\n    serializeNodes(parent, nodes, level, visible) {\n        if (nodes && nodes.length) {\n            for(let node of nodes) {\n                node.parent = parent;\n                const rowNode = {\n                    node: node,\n                    parent: parent,\n                    level: level,\n                    visible: visible && (parent ? parent.expanded : true)\n                };\n                this.serializedValue.push(rowNode);\n\n                if (rowNode.visible && node.expanded) {\n                    this.serializeNodes(node, node.children, level + 1, rowNode.visible);\n                }\n            }\n        }\n    }\n\n    onNodeClick(event, node: TreeNode) {\n        let eventTarget = (<Element> event.target);\n\n        if (DomHandler.hasClass(eventTarget, 'ui-tree-toggler')) {\n            return;\n        }\n        else if (this.selectionMode) {\n            if (node.selectable === false) {\n                return;\n            }\n\n            if (this.hasFilteredNodes()) {\n                node = this.getNodeWithKey(node.key, this.value);\n\n                if (!node) {\n                    return;\n                }\n            }\n\n            let index = this.findIndexInSelection(node);\n            let selected = (index >= 0);\n\n            if (this.isCheckboxSelectionMode()) {\n                if (selected) {\n                    if (this.propagateSelectionDown)\n                        this.propagateDown(node, false);\n                    else\n                        this.selection = this.selection.filter((val,i) => i!=index);\n\n                    if (this.propagateSelectionUp && node.parent) {\n                        this.propagateUp(node.parent, false);\n                    }\n\n                    this.selectionChange.emit(this.selection);\n                    this.onNodeUnselect.emit({originalEvent: event, node: node});\n                }\n                else {\n                    if (this.propagateSelectionDown)\n                        this.propagateDown(node, true);\n                    else\n                        this.selection = [...this.selection||[],node];\n\n                    if (this.propagateSelectionUp && node.parent) {\n                        this.propagateUp(node.parent, true);\n                    }\n\n                    this.selectionChange.emit(this.selection);\n                    this.onNodeSelect.emit({originalEvent: event, node: node});\n                }\n            }\n            else {\n                let metaSelection = this.nodeTouched ? false : this.metaKeySelection;\n\n                if (metaSelection) {\n                    let metaKey = (event.metaKey||event.ctrlKey);\n\n                    if (selected && metaKey) {\n                        if (this.isSingleSelectionMode()) {\n                            this.selectionChange.emit(null);\n                        }\n                        else {\n                            this.selection = this.selection.filter((val,i) => i!=index);\n                            this.selectionChange.emit(this.selection);\n                        }\n\n                        this.onNodeUnselect.emit({originalEvent: event, node: node});\n                    }\n                    else {\n                        if (this.isSingleSelectionMode()) {\n                            this.selectionChange.emit(node);\n                        }\n                        else if (this.isMultipleSelectionMode()) {\n                            this.selection = (!metaKey) ? [] : this.selection||[];\n                            this.selection = [...this.selection,node];\n                            this.selectionChange.emit(this.selection);\n                        }\n\n                        this.onNodeSelect.emit({originalEvent: event, node: node});\n                    }\n                }\n                else {\n                    if (this.isSingleSelectionMode()) {\n                        if (selected) {\n                            this.selection = null;\n                            this.onNodeUnselect.emit({originalEvent: event, node: node});\n                        }\n                        else {\n                            this.selection = node;\n                            this.onNodeSelect.emit({originalEvent: event, node: node});\n                        }\n                    }\n                    else {\n                        if (selected) {\n                            this.selection = this.selection.filter((val,i) => i!=index);\n                            this.onNodeUnselect.emit({originalEvent: event, node: node});\n                        }\n                        else {\n                            this.selection = [...this.selection||[],node];\n                            this.onNodeSelect.emit({originalEvent: event, node: node});\n                        }\n                    }\n\n                    this.selectionChange.emit(this.selection);\n                }\n            }\n        }\n\n        this.nodeTouched = false;\n    }\n\n    onNodeTouchEnd() {\n        this.nodeTouched = true;\n    }\n\n    onNodeRightClick(event: MouseEvent, node: TreeNode) {\n        if (this.contextMenu) {\n            let eventTarget = (<Element> event.target);\n\n            if (eventTarget.className && eventTarget.className.indexOf('ui-tree-toggler') === 0) {\n                return;\n            }\n            else {\n                let index = this.findIndexInSelection(node);\n                let selected = (index >= 0);\n\n                if (!selected) {\n                    if (this.isSingleSelectionMode())\n                        this.selectionChange.emit(node);\n                    else\n                        this.selectionChange.emit([node]);\n                }\n\n                this.contextMenu.show(event);\n                this.onNodeContextMenuSelect.emit({originalEvent: event, node: node});\n            }\n        }\n    }\n\n    findIndexInSelection(node: TreeNode) {\n        let index: number = -1;\n\n        if (this.selectionMode && this.selection) {\n            if (this.isSingleSelectionMode()) {\n                let areNodesEqual = (this.selection.key && this.selection.key === node.key) || this.selection == node;\n                index = areNodesEqual ? 0 : - 1;\n            }\n            else {\n                for(let i = 0; i  < this.selection.length; i++) {\n                    let selectedNode = this.selection[i];\n                    let areNodesEqual = (selectedNode.key && selectedNode.key === node.key) || selectedNode == node;\n                    if (areNodesEqual) {\n                        index = i;\n                        break;\n                    }\n                }\n            }\n        }\n\n        return index;\n    }\n\n    syncNodeOption(node, parentNodes, option, value?: any) {\n        // to synchronize the node option between the filtered nodes and the original nodes(this.value)\n        const _node = this.hasFilteredNodes() ? this.getNodeWithKey(node.key, parentNodes) : null;\n        if (_node) {\n            _node[option] = value||node[option];\n        }\n    }\n\n    hasFilteredNodes() {\n        return this.filter && this.filteredNodes && this.filteredNodes.length;\n    }\n\n    getNodeWithKey(key: string, nodes: TreeNode[]) {\n        for (let node of nodes) {\n            if (node.key === key) {\n                return node;\n            }\n\n            if (node.children) {\n                let matchedNode = this.getNodeWithKey(key, node.children);\n                if (matchedNode) {\n                    return matchedNode;\n                }\n            }\n        }\n    }\n\n    propagateUp(node: TreeNode, select: boolean) {\n        if (node.children && node.children.length) {\n            let selectedCount: number = 0;\n            let childPartialSelected: boolean = false;\n            for(let child of node.children) {\n                if (this.isSelected(child)) {\n                    selectedCount++;\n                }\n                else if (child.partialSelected) {\n                    childPartialSelected = true;\n                }\n            }\n\n            if (select && selectedCount == node.children.length) {\n                this.selection = [...this.selection||[],node];\n                node.partialSelected = false;\n            }\n            else {\n                if (!select) {\n                    let index = this.findIndexInSelection(node);\n                    if (index >= 0) {\n                        this.selection = this.selection.filter((val,i) => i!=index);\n                    }\n                }\n\n                if (childPartialSelected || selectedCount > 0 && selectedCount != node.children.length)\n                    node.partialSelected = true;\n                else\n                    node.partialSelected = false;\n            }\n\n            this.syncNodeOption(node, this.filteredNodes, 'partialSelected');\n        }\n\n        let parent = node.parent;\n        if (parent) {\n            this.propagateUp(parent, select);\n        }\n    }\n\n    propagateDown(node: TreeNode, select: boolean) {\n        let index = this.findIndexInSelection(node);\n\n        if (select && index == -1) {\n            this.selection = [...this.selection||[],node];\n        }\n        else if (!select && index > -1) {\n            this.selection = this.selection.filter((val,i) => i!=index);\n        }\n\n        node.partialSelected = false;\n\n        this.syncNodeOption(node, this.filteredNodes, 'partialSelected');\n\n        if (node.children && node.children.length) {\n            for(let child of node.children) {\n                this.propagateDown(child, select);\n            }\n        }\n    }\n\n    isSelected(node: TreeNode) {\n        return this.findIndexInSelection(node) != -1;\n    }\n\n    isSingleSelectionMode() {\n        return this.selectionMode && this.selectionMode == 'single';\n    }\n\n    isMultipleSelectionMode() {\n        return this.selectionMode && this.selectionMode == 'multiple';\n    }\n\n    isCheckboxSelectionMode() {\n        return this.selectionMode && this.selectionMode == 'checkbox';\n    }\n\n    isNodeLeaf(node) {\n        return node.leaf == false ? false : !(node.children && node.children.length);\n    }\n\n    getRootNode() {\n        return this.filteredNodes ? this.filteredNodes : this.value;\n    }\n\n    getTemplateForNode(node: TreeNode): TemplateRef<any> {\n        if (this.templateMap)\n            return node.type ? this.templateMap[node.type] : this.templateMap['default'];\n        else\n            return null;\n    }\n\n    onDragOver(event) {\n        if (this.droppableNodes && (!this.value || this.value.length === 0)) {\n            event.dataTransfer.dropEffect = 'move';\n            event.preventDefault();\n        }\n    }\n\n    onDrop(event) {\n        if (this.droppableNodes && (!this.value || this.value.length === 0)) {\n            event.preventDefault();\n            let dragNode = this.dragNode;\n            if (this.allowDrop(dragNode, null, this.dragNodeScope)) {\n                let dragNodeIndex = this.dragNodeIndex;\n                this.dragNodeSubNodes.splice(dragNodeIndex, 1);\n                this.value = this.value||[];\n                this.value.push(dragNode);\n\n                this.dragDropService.stopDrag({\n                    node: dragNode\n                });\n            }\n        }\n    }\n\n    onDragEnter(event) {\n        if (this.droppableNodes && this.allowDrop(this.dragNode, null, this.dragNodeScope)) {\n            this.dragHover = true;\n        }\n    }\n\n    onDragLeave(event) {\n        if (this.droppableNodes) {\n            let rect = event.currentTarget.getBoundingClientRect();\n            if (event.x > rect.left + rect.width || event.x < rect.left || event.y > rect.top + rect.height || event.y < rect.top) {\n               this.dragHover = false;\n            }\n        }\n    }\n\n    allowDrop(dragNode: TreeNode, dropNode: TreeNode, dragNodeScope: any): boolean {\n        if (!dragNode) {\n            //prevent random html elements to be dragged\n            return false;\n        }\n        else if (this.isValidDragScope(dragNodeScope)) {\n            let allow: boolean = true;\n            if (dropNode) {\n                if (dragNode === dropNode) {\n                    allow = false;\n                }\n                else {\n                    let parent = dropNode.parent;\n                    while(parent != null) {\n                        if (parent === dragNode) {\n                            allow = false;\n                            break;\n                        }\n                        parent = parent.parent;\n                    }\n                }\n            }\n\n            return allow;\n        }\n        else {\n            return false;\n        }\n    }\n\n    isValidDragScope(dragScope: any): boolean {\n        let dropScope = this.droppableScope;\n\n        if (dropScope) {\n            if (typeof dropScope === 'string') {\n                if (typeof dragScope === 'string')\n                    return dropScope === dragScope;\n                else if (dragScope instanceof Array)\n                    return (<Array<any>>dragScope).indexOf(dropScope) != -1;\n            }\n            else if (dropScope instanceof Array) {\n                if (typeof dragScope === 'string') {\n                    return (<Array<any>>dropScope).indexOf(dragScope) != -1;\n                }\n                else if (dragScope instanceof Array) {\n                    for(let s of dropScope) {\n                        for(let ds of dragScope) {\n                            if (s === ds) {\n                                return true;\n                            }\n                        }\n                    }\n                }\n            }\n            return false;\n        }\n        else {\n            return true;\n        }\n    }\n\n    _filter(event) {\n        let filterValue = event.target.value;\n        if (filterValue === '') {\n            this.filteredNodes = null;\n        }\n        else {\n            this.filteredNodes = [];\n            const searchFields: string[] = this.filterBy.split(',');\n            const filterText = ObjectUtils.removeAccents(filterValue).toLocaleLowerCase(this.filterLocale);\n            const isStrictMode = this.filterMode === 'strict';\n            for(let node of this.value) {\n                let copyNode = {...node};\n                let paramsWithoutNode = {searchFields, filterText, isStrictMode};\n                if ((isStrictMode && (this.findFilteredNodes(copyNode, paramsWithoutNode) || this.isFilterMatched(copyNode, paramsWithoutNode))) ||\n                    (!isStrictMode && (this.isFilterMatched(copyNode, paramsWithoutNode) || this.findFilteredNodes(copyNode, paramsWithoutNode)))) {\n                    this.filteredNodes.push(copyNode);\n                }\n            }\n        }\n\n        this.updateSerializedValue();\n        this.onFilter.emit({\n            filter: filterValue,\n            filteredValue: this.filteredNodes\n        });\n    }\n\n    findFilteredNodes(node, paramsWithoutNode) {\n        if (node) {\n            let matched = false;\n            if (node.children) {\n                let childNodes = [...node.children];\n                node.children = [];\n                for (let childNode of childNodes) {\n                    let copyChildNode = {...childNode};\n                    if (this.isFilterMatched(copyChildNode, paramsWithoutNode)) {\n                        matched = true;\n                        node.children.push(copyChildNode);\n                    }\n                }\n            }\n\n            if (matched) {\n                node.expanded = true;\n                return true;\n            }\n        }\n    }\n\n    isFilterMatched(node, {searchFields, filterText, isStrictMode}) {\n        let matched = false;\n        for(let field of searchFields) {\n            let fieldValue = ObjectUtils.removeAccents(String(ObjectUtils.resolveFieldData(node, field))).toLocaleLowerCase(this.filterLocale);\n            if (fieldValue.indexOf(filterText) > -1) {\n                matched = true;\n            }\n        }\n\n        if (!matched || (isStrictMode && !this.isNodeLeaf(node))) {\n            matched = this.findFilteredNodes(node, {searchFields, filterText, isStrictMode}) || matched;\n        }\n\n        return matched;\n    }\n\n    getBlockableElement(): HTMLElement {\n      return this.el.nativeElement.children[0];\n    }\n\n    ngOnDestroy() {\n        if (this.dragStartSubscription) {\n            this.dragStartSubscription.unsubscribe();\n        }\n\n        if (this.dragStopSubscription) {\n            this.dragStopSubscription.unsubscribe();\n        }\n    }\n}\n@NgModule({\n    imports: [CommonModule,ScrollingModule],\n    exports: [Tree,SharedModule,ScrollingModule],\n    declarations: [Tree,UITreeNode]\n})\nexport class TreeModule { }\n"]}