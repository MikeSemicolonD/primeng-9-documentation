{"version":3,"sources":["./src/app/showcase/components/checkbox/checkboxdemo.html","./src/app/components/checkbox/checkbox.ts","./src/app/components/checkbox/public_api.ts","./src/app/showcase/components/checkbox/checkboxdemo-routing.module.ts","./src/app/showcase/components/checkbox/checkboxdemo.module.ts","./src/app/showcase/components/checkbox/checkboxdemo.ts"],"names":[],"mappings":";;;;;;;;;;AAAA;AAAe,gbAAiX,moBAAmoB,MAAM,oFAAoF,m1BAAm1B,KAAK,mCAAmC,SAAS,kTAAkT,oBAAoB,yBAAyB,0bAA0b,+EAA+E,IAAI,eAAe,MAAM,+EAA+E,IAAI,eAAe,wHAAwH,sCAAsC,UAAU,6SAA6S,mDAAmD,UAAU,sPAAsP,iGAAiG,IAAI,eAAe,MAAM,iGAAiG,IAAI,eAAe,8QAA8Q,uBAAuB,UAAU,sFAAsF,sDAAsD,IAAI,eAAe,uXAAuX,gBAAgB,MAAM,yCAAyC,IAAI,eAAe,QAAQ,kBAAkB,MAAM,+DAA+D,IAAI,eAAe,kuQAAkuQ,2JAA2J,sBAAsB,SAAS,OAAO,MAAM,yCAAyC,wBAAwB,UAAU,0BAA0B,IAAI,kHAAkH,IAAI,eAAe,IAAI,QAAQ,UAAU,0BAA0B,IAAI,4HAA4H,IAAI,eAAe,IAAI,QAAQ,UAAU,0BAA0B,IAAI,wHAAwH,IAAI,eAAe,IAAI,QAAQ,MAAM,QAAQ,yBAAyB,4EAA4E,MAAM,IAAI,SAAS,QAAQ,MAAM,gBAAgB,OAAO,MAAM,yCAAyC,wBAAwB,UAAU,0BAA0B,IAAI,kIAAkI,IAAI,eAAe,IAAI,QAAQ,UAAU,0BAA0B,IAAI,yHAAyH,IAAI,eAAe,IAAI,QAAQ,UAAU,0BAA0B,IAAI,sHAAsH,IAAI,eAAe,IAAI,QAAQ,UAAU,0BAA0B,IAAI,2IAA2I,IAAI,eAAe,IAAI,QAAQ,MAAM,QAAQ,6BAA6B,+EAA+E,KAAK,KAAK,SAAS,QAAQ,MAAM,YAAY,SAAS,IAAI,OAAO,MAAM,sDAAsD,IAAI,eAAe,sHAAsH,sCAAsC,gEAAgE,iCAAiC,QAAQ,qPAAqP,eAAe,cAAc,4FAA4F,E;;;;;;;;;;;;;;;;;;;;;ACA1tf;AACxG;AACuC;AAE7E,MAAM,uBAAuB,GAAQ;IAC1C,OAAO,EAAE,gEAAiB;IAC1B,WAAW,EAAE,gEAAU,CAAC,GAAG,EAAE,CAAC,QAAQ,CAAC;IACvC,KAAK,EAAE,IAAI;CACZ,CAAC;AAsBF,IAAa,QAAQ,GAArB,MAAa,QAAQ;IA8CjB,YAAoB,EAAqB;QAArB,OAAE,GAAF,EAAE,CAAmB;QApBhC,iBAAY,GAAW,aAAa,CAAC;QAQpC,aAAQ,GAAsB,IAAI,0DAAY,EAAE,CAAC;QAI3D,kBAAa,GAAa,GAAG,EAAE,GAAE,CAAC,CAAC;QAEnC,mBAAc,GAAa,GAAG,EAAE,GAAE,CAAC,CAAC;QAEpC,YAAO,GAAY,KAAK,CAAC;QAEzB,YAAO,GAAY,KAAK,CAAC;IAEmB,CAAC;IAE7C,OAAO,CAAC,KAAK,EAAC,QAAQ,EAAC,KAAa;QAChC,KAAK,CAAC,cAAc,EAAE,CAAC;QAEvB,IAAI,IAAI,CAAC,QAAQ,IAAI,IAAI,CAAC,QAAQ,EAAE;YAChC,OAAO;SACV;QAED,IAAI,CAAC,OAAO,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC;QAC7B,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;QAExB,IAAI,KAAK,EAAE;YACP,QAAQ,CAAC,KAAK,EAAE,CAAC;SACpB;IACL,CAAC;IAED,WAAW,CAAC,KAAK;QACb,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE;YACd,IAAI,IAAI,CAAC,OAAO;gBACZ,IAAI,CAAC,QAAQ,EAAE,CAAC;;gBAEhB,IAAI,CAAC,WAAW,EAAE,CAAC;YAEvB,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YAE/B,IAAI,IAAI,CAAC,WAAW,EAAE;gBAClB,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;aACzC;SACJ;aACI;YACD,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;SACpC;QAED,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAC,OAAO,EAAC,IAAI,CAAC,OAAO,EAAE,aAAa,EAAE,KAAK,EAAC,CAAC,CAAC;IACrE,CAAC;IAED,YAAY,CAAC,KAAK;QACd,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE;YAChB,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC,MAAM,CAAC,OAAO,CAAC;YACpC,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;SAC3B;IACL,CAAC;IAED,SAAS;QACL,IAAI,IAAI,CAAC,MAAM;YACX,OAAO,IAAI,CAAC,KAAK,CAAC;;YAElB,OAAO,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC;IACjE,CAAC;IAED,WAAW;QACP,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,IAAI,CAAC,KAAK,CAAC,CAAC;IAC9D,CAAC;IAED,QAAQ;QACJ,IAAI,IAAI,CAAC,KAAK;YACV,IAAI,CAAC,KAAK,GAAG,CAAC,GAAG,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;;YAEzC,IAAI,CAAC,KAAK,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IAClC,CAAC;IAED,OAAO;QACH,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC;IACxB,CAAC;IAED,MAAM;QACF,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC;QACrB,IAAI,CAAC,cAAc,EAAE,CAAC;IAC1B,CAAC;IAED,KAAK;QACD,IAAI,CAAC,cAAc,CAAC,aAAa,CAAC,KAAK,EAAE,CAAC;IAC9C,CAAC;IAED,UAAU,CAAC,KAAU;QACjB,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACnB,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,SAAS,EAAE,CAAC;QAChC,IAAI,CAAC,EAAE,CAAC,YAAY,EAAE,CAAC;IAC3B,CAAC;IAED,gBAAgB,CAAC,EAAY;QACzB,IAAI,CAAC,aAAa,GAAG,EAAE,CAAC;IAC5B,CAAC;IAED,iBAAiB,CAAC,EAAY;QAC1B,IAAI,CAAC,cAAc,GAAG,EAAE,CAAC;IAC7B,CAAC;IAED,gBAAgB,CAAC,GAAY;QACzB,IAAI,CAAC,QAAQ,GAAG,GAAG,CAAC;IACxB,CAAC;CACJ;;YA5F2B,+DAAiB;;AA5ChC;IAAR,2DAAK,EAAE;;uCAAY;AAEX;IAAR,2DAAK,EAAE;;sCAAc;AAEb;IAAR,2DAAK,EAAE;;0CAAmB;AAElB;IAAR,2DAAK,EAAE;;wCAAiB;AAEhB;IAAR,2DAAK,EAAE;;uCAAe;AAEd;IAAR,2DAAK,EAAE;;gDAAwB;AAEvB;IAAR,2DAAK,EAAE;;0CAAkB;AAEjB;IAAR,2DAAK,EAAE;;yCAAiB;AAEhB;IAAR,2DAAK,EAAE;;uCAAY;AAEX;IAAR,2DAAK,EAAE;;4CAAoB;AAEnB;IAAR,2DAAK,EAAE;;iDAAyB;AAExB;IAAR,2DAAK,EAAE;4EAAc,0DAAW;6CAAC;AAEzB;IAAR,2DAAK,EAAE;;8CAAsC;AAErC;IAAR,2DAAK,EAAE;;0CAAmB;AAElB;IAAR,2DAAK,EAAE;;0CAAmB;AAEV;IAAhB,+DAAS,CAAC,IAAI,CAAC;4EAAiB,wDAAU;gDAAC;AAElC;IAAT,4DAAM,EAAE;4EAAW,0DAAY;0CAA2B;AAlClD,QAAQ;IApBpB,+DAAS,CAAC;QACP,QAAQ,EAAE,YAAY;QACtB,QAAQ,EAAE;;;;;;;;;;;;;;KAcT;QACD,SAAS,EAAE,CAAC,uBAAuB,CAAC;QACpC,eAAe,EAAE,qEAAuB,CAAC,OAAO;KACnD,CAAC;mFA+C0B,+DAAiB;GA9ChC,QAAQ,CA0IpB;AA1IoB;AAiJrB,IAAa,cAAc,GAA3B,MAAa,cAAc;CAAI;AAAlB,cAAc;IAL1B,8DAAQ,CAAC;QACN,OAAO,EAAE,CAAC,4DAAY,CAAC;QACvB,OAAO,EAAE,CAAC,QAAQ,CAAC;QACnB,YAAY,EAAE,CAAC,QAAQ,CAAC;KAC3B,CAAC;GACW,cAAc,CAAI;AAAJ;;;;;;;;;;;;;AC/K3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA2B;;;;;;;;;;;;;;;;;;;;ACAY;AACK;AACA;AAY5C,IAAa,yBAAyB,GAAtC,MAAa,yBAAyB;CAAG;AAA5B,yBAAyB;IAVrC,8DAAQ,CAAC;QACT,OAAO,EAAE;YACR,4DAAY,CAAC,QAAQ,CAAC;gBACrB,EAAC,IAAI,EAAC,EAAE,EAAC,SAAS,EAAE,0DAAY,EAAC;aACjC,CAAC;SACF;QACD,OAAO,EAAE;YACR,4DAAY;SACZ;KACD,CAAC;GACW,yBAAyB,CAAG;AAAH;;;;;;;;;;;;;;;;;;;;;;;;;ACdC;AACM;AACF;AACC;AAC4B;AACxB;AACF;AACgB;AAe9D,IAAa,kBAAkB,GAA/B,MAAa,kBAAkB;CAAG;AAArB,kBAAkB;IAb9B,8DAAQ,CAAC;QACT,OAAO,EAAE;YACR,4DAAY;YACN,0DAAW;YACjB,sFAAyB;YACnB,+DAAc;YACd,6DAAa;YACb,6EAAqB;SAC3B;QACD,YAAY,EAAE;YACb,0DAAY;SACZ;KACD,CAAC;GACW,kBAAkB,CAAG;AAAH;;;;;;;;;;;;;;;;;;ACtBS;AAKxC,IAAa,YAAY,GAAzB,MAAa,YAAY;IAAzB;QAEI,mBAAc,GAAa,EAAE,CAAC;QAE9B,uBAAkB,GAAa,CAAC,YAAY,EAAE,QAAQ,CAAC,CAAC;QAExD,YAAO,GAAY,KAAK,CAAC;IAC7B,CAAC;CAAA;AAPY,YAAY;IAHxB,+DAAS,CAAC;QACP,4OAAkC;KACrC,CAAC;GACW,YAAY,CAOxB;AAPwB","file":"components-checkbox-checkboxdemo-module-es2015.js","sourcesContent":["export default \"<div class=\\\"content-section introduction\\\">\\n    <div>\\n        <span class=\\\"feature-title\\\">Checkbox</span>\\n        <span>Checkbox is an extension to standard checkbox element with skinning capabilities.</span>\\n    </div>\\n</div>\\n\\n<div class=\\\"content-section implementation\\\">\\n    <h3 class=\\\"first\\\">Basic</h3>\\n    <div class=\\\"p-grid\\\" style=\\\"width:250px;margin-bottom:10px\\\">\\n        <div class=\\\"p-col-12\\\"><p-checkbox name=\\\"group1\\\" value=\\\"New York\\\" label=\\\"New York\\\" [(ngModel)]=\\\"selectedCities\\\" inputId=\\\"ny\\\"></p-checkbox></div>\\n        <div class=\\\"p-col-12\\\"><p-checkbox name=\\\"group1\\\" value=\\\"San Francisco\\\" label=\\\"San Francisco\\\" [(ngModel)]=\\\"selectedCities\\\" inputId=\\\"sf\\\"></p-checkbox></div>\\n        <div class=\\\"p-col-12\\\"><p-checkbox name=\\\"group1\\\" value=\\\"Los Angeles\\\" label=\\\"Los Angeles\\\" [(ngModel)]=\\\"selectedCities\\\" inputId=\\\"la\\\"></p-checkbox></div>\\n    </div>\\n\\n    Selected Cities: <span *ngFor=\\\"let city of selectedCities\\\" style=\\\"margin-right:10px\\\">{{city}}</span>\\n\\n    <h3>Preselection</h3>\\n    <div class=\\\"p-grid\\\" style=\\\"width:250px;margin-bottom:10px\\\">\\n        <div class=\\\"p-col-12\\\"><p-checkbox name=\\\"group2\\\" value=\\\"Technology\\\" label=\\\"Technology\\\" [(ngModel)]=\\\"selectedCategories\\\" inputId=\\\"technology\\\"></p-checkbox></div>\\n        <div class=\\\"p-col-12\\\"><p-checkbox name=\\\"group2\\\" value=\\\"Finance\\\" label=\\\"Finance\\\" [(ngModel)]=\\\"selectedCategories\\\" inputId=\\\"finance\\\"></p-checkbox></div>\\n        <div class=\\\"p-col-12\\\"><p-checkbox name=\\\"group2\\\" value=\\\"Sports\\\" label=\\\"Sports\\\" [(ngModel)]=\\\"selectedCategories\\\" inputId=\\\"sports\\\"></p-checkbox></div>\\n        <div class=\\\"p-col-12\\\"><p-checkbox name=\\\"group2\\\" value=\\\"Entertainment\\\" label=\\\"Entertainment\\\" [(ngModel)]=\\\"selectedCategories\\\" inputId=\\\"entertainment\\\"></p-checkbox></div>\\n    </div>\\n\\n    Selected Categories: <span *ngFor=\\\"let cat of selectedCategories\\\" style=\\\"margin-right:10px\\\">{{cat}}</span>\\n    \\n    <h3>Boolean - {{checked}}</h3>\\n    <p-checkbox [(ngModel)]=\\\"checked\\\" binary=\\\"true\\\"></p-checkbox>\\n</div>\\n\\n<div class=\\\"content-section documentation\\\">\\n    <p-tabView>\\n        <p-tabPanel header=\\\"Documentation\\\">\\n            <h3>Import</h3>\\n<pre>\\n<code class=\\\"language-typescript\\\" pCode ngNonBindable>\\nimport &#123;CheckboxModule&#125; from 'primeng/checkbox';\\n</code>\\n</pre>\\n\\n            <h3>Getting Started</h3>\\n            <p>Checkbox can either be used in multiple selection with other checkboxes or as a single checkbox to provide a boolean value.</p>\\n            \\n            <h4>Multiple Values</h4>\\n            <p>Multiple mode is enabled by default, ngModel property refers to an array to bind the selected values.</p>\\n<pre>\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\n&lt;p-checkbox name=\\\"groupname\\\" value=\\\"val1\\\" [(ngModel)]=\\\"selectedValues\\\"&gt;&lt;/p-checkbox&gt;\\n&lt;p-checkbox name=\\\"groupname\\\" value=\\\"val2\\\" [(ngModel)]=\\\"selectedValues\\\"&gt;&lt;/p-checkbox&gt;\\n</code>\\n</pre>\\n\\n<pre>\\n<code class=\\\"language-typescript\\\" pCode ngNonBindable>\\nexport class ModelComponent &#123;\\n\\n    selectedValues: string[] = [];\\n\\n&#125;\\n</code>\\n</pre>\\n\\n            <p>As ngModel is two-way binding enabled, prepopulating the model array with values is enough to display the related\\n            checkboxes as checked by default.</p>\\n<pre>\\n<code class=\\\"language-typescript\\\" pCode ngNonBindable>\\nexport class ModelComponent &#123;\\n\\n    selectedValues: string[] = ['val1','val2'];\\n\\n&#125;\\n</code>\\n</pre>\\n\\n        <h4>Label</h4>\\n        <p>The label attribute provides a label text for the checkbox. This label is also clickable and toggles the checked state.</p>\\n<pre>\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\n&lt;p-checkbox name=\\\"groupname\\\" value=\\\"val1\\\" label=\\\"Value 1\\\" [(ngModel)]=\\\"selectedValues\\\"&gt;&lt;/p-checkbox&gt;\\n&lt;p-checkbox name=\\\"groupname\\\" value=\\\"val2\\\" label=\\\"Value 2\\\" [(ngModel)]=\\\"selectedValues\\\"&gt;&lt;/p-checkbox&gt;\\n</code>\\n</pre>\\n\\n        <h4>Boolean Value</h4>\\n        <p>A single boolean value can be bound using the ngModel property as well by enabling the binary option.</p>\\n<pre>\\n<code class=\\\"language-typescript\\\" pCode ngNonBindable>\\nexport class ModelComponent &#123;\\n\\n    value: boolean;\\n\\n&#125;\\n</code>\\n</pre>\\n\\n<pre>\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\n&lt;p-checkbox [(ngModel)]=\\\"value\\\" [binary]=\\\"true\\\"&gt;&lt;/p-checkbox&gt;\\n</code>\\n</pre>\\n\\n        <h3>Model Driven Forms</h3>\\n        <p>Checkbox can be used in a model driven form as well. In this case, due to an <a href=\\\"https://github.com/angular/angular/issues/17685\\\">issue</a> in Angular bind the formControl instance \\n            instead of using formControlName.</p>\\n<pre>\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\n&lt;!-- Wrong --&gt;\\n&lt;p-checkbox formControlName=\\\"cities\\\"&gt;&lt;/p-checkbox&gt;\\n\\n&lt;!-- Correct --&gt;\\n&lt;p-checkbox [formControl]=\\\"myFormGroup.controls['cities']\\\"&gt;&lt;/p-checkbox&gt;\\n</code>\\n</pre>\\n\\n            <h3>Properties</h3>\\n            <div class=\\\"doc-tablewrapper\\\">\\n                <table class=\\\"doc-table\\\">\\n                    <thead>\\n                        <tr>\\n                            <th>Name</th>\\n                            <th>Type</th>\\n                            <th>Default</th>\\n                            <th>Description</th>\\n                        </tr>\\n                    </thead>\\n                    <tbody>\\n                        <tr>\\n                            <td>name</td>\\n                            <td>string</td>\\n                            <td>null</td>\\n                            <td>Name of the checkbox group.</td>\\n                        </tr>\\n                        <tr>\\n                            <td>value</td>\\n                            <td>any</td>\\n                            <td>null</td>\\n                            <td>Value of the checkbox.</td>\\n                        </tr>\\n                        <tr>\\n                            <td>label</td>\\n                            <td>string</td>\\n                            <td>null</td>\\n                            <td>Label of the checkbox.</td>\\n                        </tr>\\n                        <tr>\\n                            <td>disabled</td>\\n                            <td>boolean</td>\\n                            <td>false</td>\\n                            <td>When present, it specifies that the element should be disabled.</td>\\n                        </tr>\\n                        <tr>\\n                            <td>binary</td>\\n                            <td>boolean</td>\\n                            <td>false</td>\\n                            <td>Allows to select a boolean value instead of multiple values.</td>\\n                        </tr>\\n                        <tr>\\n                            <td>tabindex</td>\\n                            <td>number</td>\\n                            <td>null</td>\\n                            <td>Index of the element in tabbing order.</td>\\n                        </tr>\\n                        <tr>\\n                            <td>inputId</td>\\n                            <td>string</td>\\n                            <td>null</td>\\n                            <td>Identifier of the focus input to match a label defined for the component.</td>\\n                        </tr>\\n                        <tr>\\n                            <td>ariaLabelledBy</td>\\n                            <td>string</td>\\n                            <td>null</td>\\n                            <td>Establishes relationships between the component and label(s) where its value should be one or more element IDs.</td>\\n                        </tr>\\n                        <tr>\\n                            <td>style</td>\\n                            <td>object</td>\\n                            <td>null</td>\\n                            <td>Inline style of the component.</td>\\n                        </tr>\\n                        <tr>\\n                            <td>styleClass</td>\\n                            <td>string</td>\\n                            <td>null</td>\\n                            <td>Style class of the component.</td>\\n                        </tr>\\n                        <tr>\\n                            <td>labelStyleClass</td>\\n                            <td>string</td>\\n                            <td>null</td>\\n                            <td>Style class of the label.</td>\\n                        </tr>\\n                        <tr>\\n                            <td>checkboxIcon</td>\\n                            <td>string</td>\\n                            <td>pi pi-check</td>\\n                            <td>Icon class of the checkbox icon.</td>\\n                        </tr>\\n                        <tr>\\n                            <td>readonly</td>\\n                            <td>boolean</td>\\n                            <td>false</td>\\n                            <td>When present, it specifies that the component cannot be edited.</td>\\n                        </tr>\\n                        <tr>\\n                            <td>required</td>\\n                            <td>boolean</td>\\n                            <td>false</td>\\n                            <td>When present, it specifies that checkbox must be checked before submitting the form.</td>\\n                        </tr>\\n                    </tbody>\\n                </table>\\n            </div>\\n\\n            <h3>Events</h3>\\n            <div class=\\\"doc-tablewrapper\\\">\\n                <table class=\\\"doc-table\\\">\\n                    <thead>\\n                        <tr>\\n                            <th>Name</th>\\n                            <th>Parameters</th>\\n                            <th>Description</th>\\n                        </tr>\\n                    </thead>\\n                    <tbody>\\n                        <tr>\\n                            <td>onChange</td>\\n                            <td>\\n                                checked: Boolean value to represent new state of checkbox.\\n                                originalEvent: Browser event\\n                            </td>\\n                            <td>Callback to invoke on checkbox click.</td>\\n                        </tr>\\n                    </tbody>\\n                </table>\\n            </div>\\n\\n            <h3>Methods</h3>\\n            <div class=\\\"doc-tablewrapper\\\">\\n                <table class=\\\"doc-table\\\">\\n                    <thead>\\n                        <tr>\\n                            <th>Name</th>\\n                            <th>Parameters</th>\\n                            <th>Description</th>\\n                        </tr>\\n                    </thead>\\n                    <tbody>\\n                        <tr>\\n                            <td>focus</td>\\n                            <td>-</td>\\n                            <td>Applies focus.</td>\\n                        </tr>\\n                    </tbody>\\n                </table>\\n            </div>\\n\\n            <h3>Styling</h3>\\n            <p>Following is the list of structural style classes, for theming classes visit <a href=\\\"#\\\" [routerLink]=\\\"['/theming']\\\">theming page</a>.</p>\\n            <div class=\\\"doc-tablewrapper\\\">\\n                <table class=\\\"doc-table\\\">\\n                    <thead>\\n                        <tr>\\n                            <th>Name</th>\\n                            <th>Element</th>\\n                        </tr>\\n                    </thead>\\n                    <tbody>\\n                        <tr>\\n                            <td>ui-chkbox</td>\\n                            <td>Container element</td>\\n                        </tr>\\n                        <tr>\\n                            <td>ui-chkbox-box</td>\\n                            <td>Container of icon.</td>\\n                        </tr>\\n                        <tr>\\n                            <td>ui-chkbox-icon</td>\\n                            <td>Icon element.</td>\\n                        </tr>\\n                        <tr>\\n                            <td>ui-chkbox-label</td>\\n                            <td>Label element.</td>\\n                        </tr>\\n                        <tr>\\n                            <td>ui-label-active</td>\\n                            <td>Label element of a checked state.</td>\\n                        </tr>\\n                        <tr>\\n                            <td>ui-label-focus</td>\\n                            <td>Label element of a focused state.</td>\\n                        </tr>\\n                        <tr>\\n                            <td>ui-label-disabled</td>\\n                            <td>Label element of a disabled state.</td>\\n                        </tr>\\n                    </tbody>\\n                </table>\\n            </div>\\n\\n            <h3>Dependencies</h3>\\n            <p>None.</p>\\n        </p-tabPanel>\\n        <p-tabPanel header=\\\"Source\\\">\\n            <a href=\\\"https://github.com/primefaces/primeng/tree/master/src/app/showcase/components/checkbox\\\" class=\\\"btn-viewsource\\\" target=\\\"_blank\\\">\\n                <span>View on GitHub</span>\\n            </a>\\n            <a href=\\\"https://stackblitz.com/edit/primeng-checkbox-demo\\\" class=\\\"btn-viewsource\\\" style=\\\"margin-left: .5em;\\\" target=\\\"_blank\\\">\\n                <span>Edit in StackBlitz</span>\\n            </a>\\n<pre>\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\n&lt;h3 class=\\\"first\\\"&gt;Basic&lt;/h3&gt;\\n&lt;div class=\\\"p-grid\\\" style=\\\"width:250px;margin-bottom:10px\\\"&gt;\\n    &lt;div class=\\\"p-col-12\\\"&gt;&lt;p-checkbox name=\\\"group1\\\" value=\\\"New York\\\" label=\\\"New York\\\" [(ngModel)]=\\\"selectedCities\\\" inputId=\\\"ny\\\"&gt;&lt;/p-checkbox&gt;&lt;/div&gt;\\n    &lt;div class=\\\"p-col-12\\\"&gt;&lt;p-checkbox name=\\\"group1\\\" value=\\\"San Francisco\\\" label=\\\"San Francisco\\\" [(ngModel)]=\\\"selectedCities\\\" inputId=\\\"sf\\\"&gt;&lt;/p-checkbox&gt;&lt;/div&gt;\\n    &lt;div class=\\\"p-col-12\\\"&gt;&lt;p-checkbox name=\\\"group1\\\" value=\\\"Los Angeles\\\" label=\\\"Los Angeles\\\" [(ngModel)]=\\\"selectedCities\\\" inputId=\\\"la\\\"&gt;&lt;/p-checkbox&gt;&lt;/div&gt;\\n&lt;/div&gt;\\n\\nSelected Cities: &lt;span *ngFor=\\\"let city of selectedCities\\\" style=\\\"margin-right:10px\\\"&gt;{{city}}&lt;/span&gt;\\n\\n&lt;h3&gt;Preselection&lt;/h3&gt;\\n&lt;div class=\\\"p-grid\\\" style=\\\"width:250px;margin-bottom:10px\\\"&gt;\\n    &lt;div class=\\\"p-col-12\\\"&gt;&lt;p-checkbox name=\\\"group2\\\" value=\\\"Technology\\\" label=\\\"Technology\\\" [(ngModel)]=\\\"selectedCategories\\\" inputId=\\\"technology\\\"&gt;&lt;/p-checkbox&gt;&lt;/div&gt;\\n    &lt;div class=\\\"p-col-12\\\"&gt;&lt;p-checkbox name=\\\"group2\\\" value=\\\"Finance\\\" label=\\\"Finance\\\" [(ngModel)]=\\\"selectedCategories\\\" inputId=\\\"finance\\\"&gt;&lt;/p-checkbox&gt;&lt;/div&gt;\\n    &lt;div class=\\\"p-col-12\\\"&gt;&lt;p-checkbox name=\\\"group2\\\" value=\\\"Sports\\\" label=\\\"Sports\\\" [(ngModel)]=\\\"selectedCategories\\\" inputId=\\\"sports\\\"&gt;&lt;/p-checkbox&gt;&lt;/div&gt;\\n    &lt;div class=\\\"p-col-12\\\"&gt;&lt;p-checkbox name=\\\"group2\\\" value=\\\"Entertainment\\\" label=\\\"Entertainment\\\" [(ngModel)]=\\\"selectedCategories\\\" inputId=\\\"entertainment\\\"&gt;&lt;/p-checkbox&gt;&lt;/div&gt;\\n&lt;/div&gt;\\n\\nSelected Categories: &lt;span *ngFor=\\\"let cat of selectedCategories\\\" style=\\\"margin-right:10px\\\"&gt;{{cat}} &lt;/span&gt;\\n\\n&lt;h3&gt;Boolean - {{checked}}&lt;/h3&gt;\\n&lt;p-checkbox [(ngModel)]=\\\"checked\\\" binary=\\\"true\\\"&gt;&lt;/p-checkbox&gt;\\n</code>\\n</pre>\\n\\n<pre>\\n<code class=\\\"language-typescript\\\" pCode ngNonBindable>\\nexport class CheckboxDemo &#123;\\n\\n    selectedCities: string[] = [];\\n\\n    selectedCategories: string[] = ['Technology', 'Sports'];\\n\\n    checked: boolean = false;\\n&#125;\\n</code>\\n</pre>\\n        </p-tabPanel>\\n        <p-tabPanel header=\\\"StackBlitz\\\">\\n            <ng-template pTemplate=\\\"content\\\">\\n                <iframe src=\\\"https://stackblitz.com/edit/primeng-checkbox-demo?embed=1\\\" style=\\\"width: 100%; height: 768px; border: none;\\\"></iframe>\\n            </ng-template>\\n        </p-tabPanel>\\n    </p-tabView>\\n</div>\\n\";","import {NgModule,Component,Input,Output,EventEmitter,forwardRef,ChangeDetectorRef,ViewChild,ElementRef,ChangeDetectionStrategy} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {NG_VALUE_ACCESSOR, ControlValueAccessor, FormControl} from '@angular/forms';\n\nexport const CHECKBOX_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => Checkbox),\n  multi: true\n};\n\n@Component({\n    selector: 'p-checkbox',\n    template: `\n        <div [ngStyle]=\"style\" [ngClass]=\"{'ui-chkbox ui-widget': true,'ui-chkbox-readonly': readonly}\" [class]=\"styleClass\">\n            <div class=\"ui-helper-hidden-accessible\">\n                <input #cb type=\"checkbox\" [attr.id]=\"inputId\" [attr.name]=\"name\" [readonly]=\"readonly\" [value]=\"value\" [checked]=\"checked\" (focus)=\"onFocus()\" (blur)=\"onBlur()\"\n                [ngClass]=\"{'ui-state-focus':focused}\" (change)=\"handleChange($event)\" [disabled]=\"disabled\" [attr.tabindex]=\"tabindex\" [attr.aria-labelledby]=\"ariaLabelledBy\" [attr.required]=\"required\">\n            </div>\n            <div class=\"ui-chkbox-box ui-widget ui-corner-all ui-state-default\" (click)=\"onClick($event,cb,true)\"\n                        [ngClass]=\"{'ui-state-active':checked,'ui-state-disabled':disabled,'ui-state-focus':focused}\" role=\"checkbox\" [attr.aria-checked]=\"checked\">\n                <span class=\"ui-chkbox-icon ui-clickable\" [ngClass]=\"checked ? checkboxIcon : null\"></span>\n            </div>\n        </div>\n        <label (click)=\"onClick($event,cb,true)\" [class]=\"labelStyleClass\"\n                [ngClass]=\"{'ui-chkbox-label': true, 'ui-label-active':checked, 'ui-label-disabled':disabled, 'ui-label-focus':focused}\"\n                *ngIf=\"label\" [attr.for]=\"inputId\">{{label}}</label>\n    `,\n    providers: [CHECKBOX_VALUE_ACCESSOR],\n    changeDetection: ChangeDetectionStrategy.Default\n})\nexport class Checkbox implements ControlValueAccessor {\n\n    @Input() value: any;\n\n    @Input() name: string;\n\n    @Input() disabled: boolean;\n    \n    @Input() binary: boolean;\n    \n    @Input() label: string;\n\n    @Input() ariaLabelledBy: string;\n\n    @Input() tabindex: number;\n\n    @Input() inputId: string;\n    \n    @Input() style: any;\n\n    @Input() styleClass: string;\n\n    @Input() labelStyleClass: string;\n    \n    @Input() formControl: FormControl;\n    \n    @Input() checkboxIcon: string = 'pi pi-check';\n    \n    @Input() readonly: boolean;\n\n    @Input() required: boolean;\n\n    @ViewChild('cb') inputViewChild: ElementRef;\n\n    @Output() onChange: EventEmitter<any> = new EventEmitter();\n    \n    model: any;\n    \n    onModelChange: Function = () => {};\n    \n    onModelTouched: Function = () => {};\n        \n    focused: boolean = false;\n    \n    checked: boolean = false;\n\n    constructor(private cd: ChangeDetectorRef) {}\n\n    onClick(event,checkbox,focus:boolean) {\n        event.preventDefault();\n        \n        if (this.disabled || this.readonly) {\n            return;\n        }\n        \n        this.checked = !this.checked;\n        this.updateModel(event);\n        \n        if (focus) {\n            checkbox.focus();\n        }\n    }\n    \n    updateModel(event) {\n        if (!this.binary) {\n            if (this.checked)\n                this.addValue();\n            else\n                this.removeValue();\n\n            this.onModelChange(this.model);\n            \n            if (this.formControl) {\n                this.formControl.setValue(this.model);\n            }\n        }\n        else {\n            this.onModelChange(this.checked);\n        }\n        \n        this.onChange.emit({checked:this.checked, originalEvent: event});\n    }\n    \n    handleChange(event) {\n        if (!this.readonly) {\n            this.checked = event.target.checked;\n            this.updateModel(event);\n        }\n    }\n\n    isChecked(): boolean {\n        if (this.binary)\n            return this.model;\n        else\n            return this.model && this.model.indexOf(this.value) > -1;\n    }\n\n    removeValue() {\n        this.model = this.model.filter(val => val !== this.value);\n    }\n\n    addValue() {\n        if (this.model)\n            this.model = [...this.model, this.value];\n        else\n            this.model = [this.value];\n    }\n    \n    onFocus() {\n        this.focused = true;\n    }\n\n    onBlur() {\n        this.focused = false;\n        this.onModelTouched();\n    }\n\n    focus() {\n        this.inputViewChild.nativeElement.focus();\n    }\n     \n    writeValue(model: any) : void {\n        this.model = model;\n        this.checked = this.isChecked();\n        this.cd.markForCheck();\n    }\n    \n    registerOnChange(fn: Function): void {\n        this.onModelChange = fn;\n    }\n\n    registerOnTouched(fn: Function): void {\n        this.onModelTouched = fn;\n    }\n    \n    setDisabledState(val: boolean): void {\n        this.disabled = val;\n    }\n}\n\n@NgModule({\n    imports: [CommonModule],\n    exports: [Checkbox],\n    declarations: [Checkbox]\n})\nexport class CheckboxModule { }\n","export * from './checkbox';","import {NgModule} from '@angular/core';\nimport {RouterModule} from '@angular/router'\nimport {CheckboxDemo} from './checkboxdemo';\n\n@NgModule({\n\timports: [\n\t\tRouterModule.forChild([\n\t\t\t{path:'',component: CheckboxDemo}\n\t\t])\n\t],\n\texports: [\n\t\tRouterModule\n\t]\n})\nexport class CheckboxDemoRoutingModule {}\n","import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {FormsModule} from '@angular/forms';\nimport {CheckboxDemo} from './checkboxdemo';\nimport {CheckboxDemoRoutingModule} from './checkboxdemo-routing.module';\nimport {CheckboxModule} from 'primeng/checkbox';\nimport {TabViewModule} from 'primeng/tabview';\nimport {CodeHighlighterModule} from 'primeng/codehighlighter';\n\n@NgModule({\n\timports: [\n\t\tCommonModule,\n        FormsModule,\n\t\tCheckboxDemoRoutingModule,\n        CheckboxModule,\n        TabViewModule,\n        CodeHighlighterModule\n\t],\n\tdeclarations: [\n\t\tCheckboxDemo\n\t]\n})\nexport class CheckboxDemoModule {}\n","import {Component} from '@angular/core';\n\n@Component({\n    templateUrl: './checkboxdemo.html'\n})\nexport class CheckboxDemo {\n\n    selectedCities: string[] = [];\n\n    selectedCategories: string[] = ['Technology', 'Sports'];\n    \n    checked: boolean = false;\n}"],"sourceRoot":"webpack:///"}