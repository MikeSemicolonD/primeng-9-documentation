{"version":3,"sources":["webpack:///src/app/showcase/components/organizationchart/organizationchartdemo.html","webpack:///src/app/components/panel/panel.ts","webpack:///src/app/components/panel/public_api.ts","webpack:///src/app/showcase/components/organizationchart/organizationchartdemo-routing.module.ts","webpack:///src/app/showcase/components/organizationchart/organizationchartdemo.module.ts","webpack:///src/app/showcase/components/organizationchart/organizationchartdemo.ts"],"names":["idx","Panel","el","collapsed","expandIcon","collapseIcon","showHeader","toggler","collapsedChange","onBeforeToggle","onAfterToggle","transitionOptions","id","onHeaderClick","event","toggle","onIconClick","animating","emit","originalEvent","toggleable","expand","collapse","preventDefault","getBlockableElement","nativeElement","children","onToggleDone","selector","template","animations","height","opacity","params","changeDetection","Default","PanelModule","imports","exports","declarations","OrganizationChartDemoRoutingModule","forChild","path","component","OrganizationChartDemoModule","OrganizationChartDemo","messageService","ngOnInit","data1","label","type","styleClass","expanded","data","name","data2","onNodeSelect","add","severity","summary","detail","node","providers","encapsulation","None"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAe;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACMf,QAAIA,GAAG,GAAW,CAAlB;;AAiDA,QAAaC,KAAK;AAkCd,qBAAoBC,EAApB,EAAoC;AAAA;;AAAhB,aAAAA,EAAA,GAAAA,EAAA;AA5BX,aAAAC,SAAA,GAAqB,KAArB;AAMA,aAAAC,UAAA,GAAqB,YAArB;AAEA,aAAAC,YAAA,GAAuB,aAAvB;AAEA,aAAAC,UAAA,GAAsB,IAAtB;AAEA,aAAAC,OAAA,GAAkB,MAAlB;AAEC,aAAAC,eAAA,GAAqC,IAAI,0DAAJ,EAArC;AAEA,aAAAC,cAAA,GAAoC,IAAI,0DAAJ,EAApC;AAEA,aAAAC,aAAA,GAAmC,IAAI,0DAAJ,EAAnC;AAED,aAAAC,iBAAA,GAA4B,sCAA5B;AAMT,aAAAC,EAAA,sBAAyBZ,GAAG,EAA5B;AAEsC;;AAlCxB;AAAA;AAAA,eAoCd,SAAAa,aAAa,CAACC,KAAD,EAAe;AACxB,cAAI,KAAKP,OAAL,KAAiB,QAArB,EAA+B;AAC3B,iBAAKQ,MAAL,CAAYD,KAAZ;AACH;AACJ;AAxCa;AAAA;AAAA,eA0Cd,SAAAE,WAAW,CAACF,KAAD,EAAe;AACtB,cAAI,KAAKP,OAAL,KAAiB,MAArB,EAA6B;AACzB,iBAAKQ,MAAL,CAAYD,KAAZ;AACH;AACJ;AA9Ca;AAAA;AAAA,eAgDd,SAAAC,MAAM,CAACD,KAAD,EAAe;AACjB,cAAI,KAAKG,SAAT,EAAoB;AAChB,mBAAO,KAAP;AACH;;AAED,eAAKA,SAAL,GAAiB,IAAjB;AACA,eAAKR,cAAL,CAAoBS,IAApB,CAAyB;AAACC,yBAAa,EAAEL,KAAhB;AAAuBX,qBAAS,EAAE,KAAKA;AAAvC,WAAzB;;AAEA,cAAI,KAAKiB,UAAT,EAAqB;AACjB,gBAAI,KAAKjB,SAAT,EACI,KAAKkB,MAAL,CAAYP,KAAZ,EADJ,KAGI,KAAKQ,QAAL,CAAcR,KAAd;AACP;;AAEDA,eAAK,CAACS,cAAN;AACH;AAhEa;AAAA;AAAA,eAkEd,SAAAF,MAAM,CAACP,KAAD,EAAQ;AACV,eAAKX,SAAL,GAAiB,KAAjB;AACA,eAAKK,eAAL,CAAqBU,IAArB,CAA0B,KAAKf,SAA/B;AACH;AArEa;AAAA;AAAA,eAuEd,SAAAmB,QAAQ,CAACR,KAAD,EAAQ;AACZ,eAAKX,SAAL,GAAiB,IAAjB;AACA,eAAKK,eAAL,CAAqBU,IAArB,CAA0B,KAAKf,SAA/B;AACH;AA1Ea;AAAA;AAAA,eA4Ed,SAAAqB,mBAAmB;AACf,iBAAO,KAAKtB,EAAL,CAAQuB,aAAR,CAAsBC,QAAtB,CAA+B,CAA/B,CAAP;AACH;AA9Ea;AAAA;AAAA,eAgFd,SAAAC,YAAY,CAACb,KAAD,EAAe;AACvB,eAAKG,SAAL,GAAiB,KAAjB;AACA,eAAKP,aAAL,CAAmBQ,IAAnB,CAAwB;AAACC,yBAAa,EAAEL,KAAhB;AAAuBX,qBAAS,EAAE,KAAKA;AAAvC,WAAxB;AACH;AAnFa;AAAA,OAAlB;;;;cAkC4B;;;;AAhCf,8DAAR,6DAAQ,E,gFAAA,G,eAAA,E,YAAA,E,MAAA;AAEA,8DAAR,6DAAQ,E,+EAAA,G,eAAA,E,QAAA,E,MAAA;AAEA,8DAAR,6DAAQ,E,gFAAA,G,eAAA,E,WAAA,E,MAAA;AAEA,8DAAR,6DAAQ,E,+EAAA,G,eAAA,E,OAAA,E,MAAA;AAEA,8DAAR,6DAAQ,E,+EAAA,G,eAAA,E,YAAA,E,MAAA;AAEA,8DAAR,6DAAQ,E,+EAAA,G,eAAA,E,YAAA,E,MAAA;AAEA,8DAAR,6DAAQ,E,+EAAA,G,eAAA,E,cAAA,E,MAAA;AAEA,8DAAR,6DAAQ,E,gFAAA,G,eAAA,E,YAAA,E,MAAA;AAEA,8DAAR,6DAAQ,E,+EAAA,G,eAAA,E,SAAA,E,MAAA;AAEC,8DAAT,8DAAS,E,wEAAiB,0D,CAAjB,G,eAAA,E,iBAAA,E,MAAA;AAEA,8DAAT,8DAAS,E,wEAAgB,0D,CAAhB,G,eAAA,E,gBAAA,E,MAAA;AAEA,8DAAT,8DAAS,E,wEAAe,0D,CAAf,G,eAAA,E,eAAA,E,MAAA;AAED,8DAAR,6DAAQ,E,+EAAA,G,eAAA,E,mBAAA,E,MAAA;AAEa,8DAArB,mEAAa,kDAAb,CAAqB,E,+EAAA,G,eAAA,E,aAAA,E,MAAA;AA5BbF,SAAK,6DA/CjB,gEAAU;AACP2B,cAAQ,EAAE,SADH;AAEPC,cAAQ,4gEAFD;AA0BPC,gBAAU,EAAE,CACR,oEAAQ,cAAR,EAAwB,CACpB,kEAAM,QAAN,EAAgB,kEAAM;AAClBC,cAAM,EAAE,GADU;AAElBC,eAAO,EAAE;AAFS,OAAN,CAAhB,CADoB,EAKpB,kEAAM,MAAN,EAAc,kEAAM;AAChBD,cAAM,EAAE,YADQ;AAEhBC,eAAO,EAAE;AAFO,OAAN,CAAd,EAGI;AAACC,cAAM,EAAE;AAACF,gBAAM,EAAE,GAAT;AAAcC,iBAAO,EAAE;AAAvB;AAAT,OAHJ,CALoB,EASpB,kEAAM,SAAN,EAAiB,kEAAM;AACnBD,cAAM,EAAE,GADW;AAEnBC,eAAO,EAAE;AAFU,OAAN,CAAjB,CAToB,EAapB,uEAAW,oBAAX,EAAiC,oEAAQ,sBAAR,CAAjC,CAboB,EAcpB,uEAAW,gBAAX,EAA6B,oEAAQ,sBAAR,CAA7B,CAdoB,EAepB,uEAAW,iBAAX,EAA8B,oEAAQ,sBAAR,CAA9B,CAfoB,CAAxB,CADQ,CA1BL;AA6CPE,qBAAe,EAAE,sEAAwBC;AA7ClC,KAAV,CA+CiB,E,+EAkCU,wD,EAlCV,GAALlC,KAAK,CAAL;;AA4Fb,QAAamC,WAAW;AAAA;AAAA,MAAxB;;AAAaA,eAAW,6DALvB,+DAAS;AACNC,aAAO,EAAE,CAAC,4DAAD,CADH;AAENC,aAAO,EAAE,CAACrC,KAAD,EAAO,wDAAP,CAFH;AAGNsC,kBAAY,EAAE,CAACtC,KAAD;AAHR,KAAT,CAKuB,GAAXmC,WAAW,CAAX;;;;;;;;;;;;;;;;ACnJb;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACcA,QAAaI,kCAAkC;AAAA;AAAA,MAA/C;;AAAaA,sCAAkC,6DAV9C,+DAAS;AACTH,aAAO,EAAE,CACR,6DAAaI,QAAb,CAAsB,CACrB;AAACC,YAAI,EAAC,EAAN;AAASC,iBAAS,EAAE;AAApB,OADqB,CAAtB,CADQ,CADA;AAMTL,aAAO,EAAE,CACR,4DADQ;AANA,KAAT,CAU8C,GAAlCE,kCAAkC,CAAlC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACUb,QAAaI,2BAA2B;AAAA;AAAA,MAAxC;;AAAaA,+BAA2B,6DAdvC,+DAAS;AACTP,aAAO,EAAE,CACR,4DADQ,EAER,wGAFQ,EAGF,iFAHE,EAIF,yDAJE,EAKF,yDALE,EAMF,6DANE,EAOF,6EAPE,CADA;AAUTE,kBAAY,EAAE,CACb,4EADa;AAVL,KAAT,CAcuC,GAA3BK,2BAA2B,CAA3B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACgCb,QAAaC,qBAAqB;AAQ9B,qCAAoBC,cAApB,EAAoD;AAAA;;AAAhC,aAAAA,cAAA,GAAAA,cAAA;AAAkC;;AARxB;AAAA;AAAA,eAU9B,SAAAC,QAAQ,GAAG;AACP,eAAKC,KAAL,GAAa,CAAC;AACVC,iBAAK,EAAE,KADG;AAEVC,gBAAI,EAAE,QAFI;AAGVC,sBAAU,EAAE,WAHF;AAIVC,oBAAQ,EAAE,IAJA;AAKVC,gBAAI,EAAE;AAACC,kBAAI,EAAC,cAAN;AAAsB,wBAAU;AAAhC,aALI;AAMV5B,oBAAQ,EAAE,CACN;AACIuB,mBAAK,EAAE,KADX;AAEIC,kBAAI,EAAE,QAFV;AAGIC,wBAAU,EAAE,WAHhB;AAIIC,sBAAQ,EAAE,IAJd;AAKIC,kBAAI,EAAE;AAACC,oBAAI,EAAC,cAAN;AAAsB,0BAAU;AAAhC,eALV;AAMI5B,sBAAQ,EAAC,CAAC;AACNuB,qBAAK,EAAE,KADD;AAENE,0BAAU,EAAE;AAFN,eAAD,EAIT;AACIF,qBAAK,EAAE,OADX;AAEIE,0BAAU,EAAE;AAFhB,eAJS;AANb,aADM,EAgBN;AACIF,mBAAK,EAAE,KADX;AAEIC,kBAAI,EAAE,QAFV;AAGIC,wBAAU,EAAE,WAHhB;AAIIC,sBAAQ,EAAE,IAJd;AAKIC,kBAAI,EAAE;AAACC,oBAAI,EAAC,SAAN;AAAiB,0BAAU;AAA3B,eALV;AAMI5B,sBAAQ,EAAC,CAAC;AACNuB,qBAAK,EAAE,YADD;AAENE,0BAAU,EAAE;AAFN,eAAD;AANb,aAhBM,EA2BN;AACIF,mBAAK,EAAE,KADX;AAEIC,kBAAI,EAAE,QAFV;AAGIC,wBAAU,EAAE,WAHhB;AAIIC,sBAAQ,EAAE,IAJd;AAKIC,kBAAI,EAAE;AAACC,oBAAI,EAAC,eAAN;AAAuB,0BAAU;AAAjC,eALV;AAMI5B,sBAAQ,EAAC,CAAC;AACNuB,qBAAK,EAAE,aADD;AAENE,0BAAU,EAAE,gBAFN;AAGNC,wBAAQ,EAAE,IAHJ;AAIN1B,wBAAQ,EAAC,CAAC;AACNuB,uBAAK,EAAE,UADD;AAENE,4BAAU,EAAE;AAFN,iBAAD,EAIT;AACIF,uBAAK,EAAE,WADX;AAEIE,4BAAU,EAAE;AAFhB,iBAJS,EAQT;AACIF,uBAAK,EAAE,UADX;AAEIE,4BAAU,EAAE;AAFhB,iBARS;AAJH,eAAD,EAiBT;AACIF,qBAAK,EAAE,IADX;AAEIE,0BAAU,EAAE;AAFhB,eAjBS,EAqBT;AACIF,qBAAK,EAAE,KADX;AAEIE,0BAAU,EAAE;AAFhB,eArBS;AANb,aA3BM;AANA,WAAD,CAAb;AAoEA,eAAKI,KAAL,GAAa,CAAC;AACVN,iBAAK,EAAE,eADG;AAEVG,oBAAQ,EAAE,IAFA;AAGV1B,oBAAQ,EAAE,CACN;AACIuB,mBAAK,EAAE,eADX;AAEIG,sBAAQ,EAAE,IAFd;AAGI1B,sBAAQ,EAAE,CACN;AACIuB,qBAAK,EAAE;AADX,eADM,EAIN;AACIA,qBAAK,EAAE;AADX,eAJM;AAHd,aADM,EAaN;AACIA,mBAAK,EAAE,aADX;AAEIG,sBAAQ,EAAE,IAFd;AAGI1B,sBAAQ,EAAE,CACN;AACIuB,qBAAK,EAAE;AADX,eADM,EAIN;AACIA,qBAAK,EAAE;AADX,eAJM;AAHd,aAbM;AAHA,WAAD,CAAb;AA8BH;AA7G6B;AAAA;AAAA,eA+G9B,SAAAO,YAAY,CAAC1C,KAAD,EAAQ;AAChB,eAAKgC,cAAL,CAAoBW,GAApB,CAAwB;AAACC,oBAAQ,EAAE,SAAX;AAAsBC,mBAAO,EAAE,eAA/B;AAAgDC,kBAAM,EAAE9C,KAAK,CAAC+C,IAAN,CAAWZ;AAAnE,WAAxB;AACH;AAjH6B;AAAA,OAAlC;;;;cAQwC;;;;AAR3BJ,yBAAqB,6DApDjC,gEAAU;AACPhB,cAAQ,EAAR;AAAA;AAAA,qIADO;AAEPiC,eAAS,EAAE,CAAC,0DAAD,CAFJ;AAkDPC,mBAAa,EAAE,gEAAkBC,IAlD1B;;AAAA,KAAV,CAoDiC,E,+EAQM,0D,EARN,GAArBnB,qBAAqB,CAArB","file":"components-organizationchart-organizationchartdemo-module-es5.js","sourcesContent":["export default \"<div class=\\\"content-section introduction\\\">\\n    <div>\\n        <span class=\\\"feature-title\\\">OrganizationChart</span>\\n        <span>OrganizationChart visualized hierarchical organization data.</span>\\n    </div>\\n</div>\\n\\n<div class=\\\"content-section implementation\\\">\\n    <p-toast></p-toast>\\n\\n    <h3 class=\\\"first\\\">Advanced</h3>\\n    <p>Organization with advanced customization.</p>\\n    <p-organizationChart [value]=\\\"data1\\\" selectionMode=\\\"single\\\" [(selection)]=\\\"selectedNode\\\" (onNodeSelect)=\\\"onNodeSelect($event)\\\"\\n        styleClass=\\\"company\\\">\\n        <ng-template let-node pTemplate=\\\"person\\\">\\n            <div class=\\\"node-header ui-corner-top\\\">{{node.label}}</div>\\n            <div class=\\\"node-content\\\">\\n                <img src=\\\"assets/showcase/images/demo/organization/{{node.data.avatar}}\\\" width=\\\"32\\\">\\n                <div>{{node.data.name}}</div>\\n            </div>\\n        </ng-template>\\n        <ng-template let-node pTemplate=\\\"department\\\">\\n            {{node.label}}\\n        </ng-template>\\n    </p-organizationChart>\\n\\n    <h3>Basic</h3>\\n    <p>Hierarchical data with zero configuration.</p>\\n    <p-organizationChart [value]=\\\"data2\\\"></p-organizationChart>\\n</div>\\n\\n<div class=\\\"content-section documentation\\\">\\n    <p-tabView>\\n        <p-tabPanel header =\\\"Documentation\\\">\\n            <h3>Import</h3>\\n<pre>\\n<code class=\\\"language-typescript\\\" pCode ngNonBindable>\\nimport &#123;OrganizationChartModule&#125; from 'primeng/organizationchart';\\n</code>\\n</pre>\\n\\n            <h3>Getting Started</h3>\\n            <p>OrganizationChart requires a model of TreeNode as its <i>value</i>. More information about TreeNode API is available at documentation of <a href=\\\"#\\\" [routerLink]=\\\"['/tree']\\\">tree</a> component.</p>\\n<pre>\\n<code class=\\\"language-typescript\\\" pCode ngNonBindable>\\nimport &#123;TreeNode&#125; from 'primeng/api';\\n</code>\\n</pre>\\n\\n\\n<pre>\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\n&lt;p-organizationChart [value]=\\\"data\\\"&gt;&lt;/p-organizationChart&gt;\\n</code>\\n</pre>\\n\\n<pre>\\n<code class=\\\"language-typescript\\\" pCode ngNonBindable>\\nexport class MyComponents implements OnInit &#123;\\n\\n    data: TreeNode[];\\n\\n    ngOnInit() &#123;\\n        this.data = [&#123;\\n            label: 'Root',\\n            children: [\\n                &#123;\\n                    label: 'Child 1',\\n                    children: [\\n                        &#123;\\n                            label: 'Grandchild 1.1'\\n                        &#125;,\\n                        &#123;\\n                            label: 'Grandchild 1.2'\\n                        &#125;\\n                    ]\\n                &#125;,\\n                &#123;\\n                    label: 'Child 2',\\n                    children: [\\n                        &#123;\\n                            label: 'Child 2.1'\\n                        &#125;,\\n                        &#123;\\n                            label: 'Child 2.2'\\n                        &#125;\\n                    ]\\n                &#125;\\n            ]\\n        &#125;];\\n&#125;\\n</code>\\n</pre>\\n\\n            <h3>Templating</h3>\\n            <p>Label of the treenode is displayed inside the node content by default and templating enables enhanced customization. TreeNode API has type property which is\\n            used to match the <i>pTemplate</i> type so templating can be done per node as well. In example below, nodes with type \\\"leaf\\\" are displayed with bold text. Note that a pTemplate\\n            whose type is \\\"default\\\" applies to all nodes that have no type property defined.</p>\\n<pre>\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\n&lt;p-organizationChart [value]=\\\"data\\\"\\n    styleClass=\\\"company\\\"&gt;\\n    &lt;ng-template let-node pTemplate=\\\"leaf\\\"&gt;\\n        &lt;span style=\\\"font-weight:bold\\\"&gt;{{node.label}}&lt;/span&gt;\\n    &lt;/ng-template&gt;\\n    &lt;ng-template let-node pTemplate=\\\"default\\\"&gt;\\n        &#123;&#123;node.label&#125;&#125;\\n    &lt;/ng-template&gt;\\n&lt;/p-organizationChart&gt;\\n</code>\\n</pre>\\n\\n<pre>\\n<code class=\\\"language-typescript\\\" pCode ngNonBindable>\\nexport class MyComponents implements OnInit &#123;\\n\\n    data: TreeNode[];\\n\\n    ngOnInit() &#123;\\n        this.data = [&#123;\\n            label: 'Root',\\n            children: [\\n                &#123;\\n                    label: 'Child 1',\\n                    children: [\\n                        &#123;\\n                            label: 'Grandchild 1.1', type: 'leaf'\\n                        &#125;,\\n                        &#123;\\n                            label: 'Grandchild 1.2', type: 'leaf'\\n                        &#125;\\n                    ]\\n                &#125;,\\n                &#123;\\n                    label: 'Child 2',\\n                    children: [\\n                        &#123;\\n                            label: 'Child 2.1', type: 'leaf'\\n                        &#125;,\\n                        &#123;\\n                            label: 'Child 2.2', type: 'leaf'\\n                        &#125;\\n                    ]\\n                &#125;\\n            ]\\n        &#125;];\\n&#125;\\n</code>\\n</pre>\\n\\n            <h3>Expand/Collapse State</h3>\\n            <p>In order to display a treenode as <i>expanded</i> by default, set \\\"expanded\\\" property as true in your model.</p>\\n\\n            <h3>Selection</h3>\\n            <p>OrganizationChart supports 2 selection methods; single or multiple. Selection is enabled by setting <i>selectionMode</i> property and providing a single TreeNode or\\n            an array of TreeNodes to reference the selections depending on the selection mode.</p>\\n\\n<pre>\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\n&lt;p-organizationChart [value]=\\\"data\\\" selectionMode=\\\"single\\\" [(selection)]=\\\"selectedNode\\\"&gt;&lt;/p-organizationChart&gt;\\n</code>\\n</pre>\\n\\n<pre>\\n<code class=\\\"language-typescript\\\" pCode ngNonBindable>\\nexport class MyComponents implements OnInit &#123;\\n\\n    data: TreeNode[];\\n\\n    ngOnInit() &#123;\\n        this.data = [&#123;\\n            label: 'Root',\\n            children: [\\n                &#123;\\n                    label: 'Child 1,\\n                    children: [\\n                        &#123;\\n                            label: 'Grandchild 1.1', type: 'leaf'\\n                        &#125;,\\n                        &#123;\\n                            label: 'Grandchild 1.2', type: 'leaf'\\n                        &#125;\\n                    ]\\n                &#125;,\\n                &#123;\\n                    label: 'Child 2',\\n                    children: [\\n                        &#123;\\n                            label: 'Child 2.1', type: 'leaf'\\n                        &#125;,\\n                        &#123;\\n                            label: 'Child 2.2', type: 'leaf'\\n                        &#125;\\n                    ]\\n                &#125;\\n            ]\\n        &#125;];\\n&#125;\\n</code>\\n</pre>\\n\\n            <h3>Properties</h3>\\n            <div class=\\\"doc-tablewrapper\\\">\\n                <table class=\\\"doc-table\\\">\\n                    <thead>\\n                        <tr>\\n                            <th>Name</th>\\n                            <th>Type</th>\\n                            <th>Default</th>\\n                            <th>Description</th>\\n                        </tr>\\n                    </thead>\\n                    <tbody>\\n                        <tr>\\n                            <td>value</td>\\n                            <td>null</td>\\n                            <td>TreeNode[]</td>\\n                            <td>An array of nested TreeNodes.</td>\\n                        </tr>\\n                        <tr>\\n                            <td>style</td>\\n                            <td>string</td>\\n                            <td>null</td>\\n                            <td>Inline style of the component.</td>\\n                        </tr>\\n                        <tr>\\n                            <td>styleClass</td>\\n                            <td>string</td>\\n                            <td>null</td>\\n                            <td>Style class of the component.</td>\\n                        </tr>\\n                        <tr>\\n                            <td>selectionMode</td>\\n                            <td>string</td>\\n                            <td>null</td>\\n                            <td>Defines the selection mode, valid values \\\"single\\\" and \\\"multiple\\\".</td>\\n                        </tr>\\n                        <tr>\\n                            <td>selection</td>\\n                            <td>any</td>\\n                            <td>null</td>\\n                            <td>A single treenode instance or an array to refer to the selections.</td>\\n                        </tr>\\n                        <tr>\\n                            <td>preserveSpace</td>\\n                            <td>boolean</td>\\n                            <td>true</td>\\n                            <td>Whether the space allocated by a node is preserved when hidden.</td>\\n                        </tr>\\n                    </tbody>\\n                </table>\\n            </div>\\n\\n        <h3>Events</h3>\\n        <div class=\\\"doc-tablewrapper\\\">\\n            <table class=\\\"doc-table\\\">\\n                <thead>\\n                <tr>\\n                    <th>Name</th>\\n                    <th>Parameters</th>\\n                    <th>Description</th>\\n                </tr>\\n                </thead>\\n                <tbody>\\n                    <tr>\\n                        <td>onNodeSelect</td>\\n                        <td>event.originalEvent: browser event <br>\\n                            event.node: Selected node instance.</td>\\n                        <td>Callback to invoke when a node is selected.</td>\\n                    </tr>\\n                    <tr>\\n                        <td>onNodeUnselect</td>\\n                        <td>event.originalEvent: browser event <br>\\n                            event.node: Unselected node instance.</td>\\n                        <td>Callback to invoke when a node is unselected.</td>\\n                    </tr>\\n                    <tr>\\n                        <td>onNodeExpand</td>\\n                        <td>event.originalEvent: browser event <br>\\n                            event.node: Expanded node instance.</td>\\n                        <td>Callback to invoke when a node is expanded.</td>\\n                    </tr>\\n                    <tr>\\n                        <td>onNodeCollapse</td>\\n                        <td>event.originalEvent: browser event <br>\\n                            event.node: Collapsed node instance.</td>\\n                        <td>Callback to invoke when a node is collapsed.</td>\\n                    </tr>\\n                </tbody>\\n            </table>\\n        </div>\\n\\n        <h3>Styling</h3>\\n        <p>Following is the list of structural style classes, for theming classes visit <a href=\\\"#\\\" [routerLink]=\\\"['/theming']\\\">theming page</a>.</p>\\n        <div class=\\\"doc-tablewrapper\\\">\\n            <table class=\\\"doc-table\\\">\\n                <thead>\\n                    <tr>\\n                        <th>Name</th>\\n                        <th>Element</th>\\n                    </tr>\\n                </thead>\\n                <tbody>\\n                    <tr>\\n                        <td>ui-organizationchart</td>\\n                        <td>Container element.</td>\\n                    </tr>\\n                    <tr>\\n                        <td>ui-organizationchart-table</td>\\n                        <td>Table container of a node.</td>\\n                    </tr>\\n                    <tr>\\n                        <td>ui-organizationchart-lines</td>\\n                        <td>Connector lines container.</td>\\n                    </tr>\\n                    <tr>\\n                        <td>ui-organizationchart-nodes</td>\\n                        <td>Contained of node children.</td>\\n                    </tr>\\n                    <tr>\\n                        <td>ui-organizationchart-line-right</td>\\n                        <td>Right side line of a node connector.</td>\\n                    </tr>\\n                    <tr>\\n                        <td>ui-organizationchart-line-left</td>\\n                        <td>Left side line of a node connector.</td>\\n                    </tr>\\n                    <tr>\\n                        <td>ui-organizationchart-line-top</td>\\n                        <td>Top side line of a node connector.</td>\\n                    </tr>\\n                </tbody>\\n            </table>\\n        </div>\\n\\n        <h3>Dependencies</h3>\\n        <p>None.</p>\\n\\n        </p-tabPanel>\\n\\n        <p-tabPanel header=\\\"Source\\\">\\n            <a href=\\\"https://github.com/primefaces/primeng/tree/master/src/app/showcase/components/organizationchart\\\" class=\\\"btn-viewsource\\\" target=\\\"_blank\\\">\\n                <span>View on GitHub</span>\\n            </a>\\n            <a href=\\\"https://stackblitz.com/edit/primeng-organizationchart-demo\\\" class=\\\"btn-viewsource\\\" style=\\\"margin-left: .5em;\\\" target=\\\"_blank\\\">\\n                <span>Edit in StackBlitz</span>\\n            </a>\\n<pre>\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\n&lt;p-toast [style]=\\\"&#123;marginTop: '80px'&#125;\\\"&gt;&lt;/p-toast&gt;\\n\\n&lt;h3 class=\\\"first\\\"&gt;Advanced&lt;/h3&gt;\\n&lt;p&gt;Organization with advanced customization.&lt;/p&gt;\\n&lt;p-organizationChart [value]=\\\"data1\\\" selectionMode=\\\"single\\\" [(selection)]=\\\"selectedNode\\\" (onNodeSelect)=\\\"onNodeSelect($event)\\\"\\n    styleClass=\\\"company\\\"&gt;\\n    &lt;ng-template let-node pTemplate=\\\"person\\\"&gt;\\n        &lt;div class=\\\"node-header ui-corner-top\\\"&gt;&#123;node.label&#125;&lt;/div&gt;\\n        &lt;div class=\\\"node-content\\\"&gt;\\n            &lt;img src=\\\"assets/showcase/images/demo/organization/&#123;node.data.avatar&#125;\\\" width=\\\"32\\\"&gt;\\n            &lt;div&gt;&#123;node.data.name&#125;&lt;/div&gt;\\n        &lt;/div&gt;\\n    &lt;/ng-template&gt;\\n    &lt;ng-template let-node pTemplate=\\\"department\\\"&gt;\\n        &#123;node.label&#125;\\n    &lt;/ng-template&gt;\\n&lt;/p-organizationChart&gt;\\n\\n&lt;h3&gt;Basic&lt;/h3&gt;\\n&lt;p&gt;Hierarchical data with zero configuration.&lt;/p&gt;\\n&lt;p-organizationChart [value]=\\\"data2\\\"&gt;&lt;/p-organizationChart&gt;\\n</code>\\n</pre>\\n\\n<pre>\\n<code class=\\\"language-typescript\\\" pCode ngNonBindable>\\n@Component(&#123;\\n    templateUrl: './organizationchartdemo.html',\\n    providers: [MessageService],\\n    styles: [`\\n        .company.ui-organizationchart .ui-organizationchart-node-content.ui-person &#123;\\n            padding: 0;\\n            border: 0 none;\\n        &#125;\\n\\n        .node-header,.node-content &#123;\\n            padding: .5em .7em;\\n        &#125;\\n\\n        .node-header &#123;\\n            background-color: #495ebb;\\n            color: #ffffff;\\n        &#125;\\n\\n        .node-content &#123;\\n            text-align: center;\\n            border: 1px solid #495ebb;\\n        &#125;\\n\\n        .node-content img &#123;\\n            border-radius: 50%;\\n        &#125;\\n\\n        .department-cfo &#123;\\n            background-color: #7247bc;\\n            color: #ffffff;\\n        &#125;\\n\\n        .department-coo &#123;\\n            background-color: #a534b6;\\n            color: #ffffff;\\n        &#125;\\n\\n        .department-cto &#123;\\n            background-color: #e9286f;\\n            color: #ffffff;\\n        &#125;\\n\\n        .ui-person .ui-node-toggler &#123;\\n            color: #495ebb !important;\\n        &#125;\\n\\n        .department-cto .ui-node-toggler &#123;\\n            color: #8a0a39 !important;\\n        &#125;\\n    `],\\n    encapsulation: ViewEncapsulation.None\\n&#125;)\\nexport class OrganizationChartDemo implements OnInit &#123;\\n\\n    data1: TreeNode[];\\n\\n    data2: TreeNode[];\\n\\n    selectedNode: TreeNode;\\n\\n    constructor(private messageService: MessageService) &#123;&#125;\\n\\n    ngOnInit() &#123;\\n        this.data1 = [&#123;\\n            label: 'CEO',\\n            type: 'person',\\n            styleClass: 'ui-person',\\n            expanded: true,\\n            data: &#123;name:'Walter White', 'avatar': 'walter.jpg'&#125;,\\n            children: [\\n                &#123;\\n                    label: 'CFO',\\n                    type: 'person',\\n                    styleClass: 'ui-person',\\n                    expanded: true,\\n                    data: &#123;name:'Saul Goodman', 'avatar': 'saul.jpg'&#125;,\\n                    children:[&#123;\\n                        label: 'Tax',\\n                        styleClass: 'department-cfo'\\n                    &#125;,\\n                    &#123;\\n                        label: 'Legal',\\n                        styleClass: 'department-cfo'\\n                    &#125;],\\n                &#125;,\\n                &#123;\\n                    label: 'COO',\\n                    type: 'person',\\n                    styleClass: 'ui-person',\\n                    expanded: true,\\n                    data: &#123;name:'Mike E.', 'avatar': 'mike.jpg'&#125;,\\n                    children:[&#123;\\n                        label: 'Operations',\\n                        styleClass: 'department-coo'\\n                    &#125;]\\n                &#125;,\\n                &#123;\\n                    label: 'CTO',\\n                    type: 'person',\\n                    styleClass: 'ui-person',\\n                    expanded: true,\\n                    data: &#123;name:'Jesse Pinkman', 'avatar': 'jesse.jpg'&#125;,\\n                    children:[&#123;\\n                        label: 'Development',\\n                        styleClass: 'department-cto',\\n                        expanded: true,\\n                        children:[&#123;\\n                            label: 'Analysis',\\n                            styleClass: 'department-cto'\\n                        &#125;,\\n                        &#123;\\n                            label: 'Front End',\\n                            styleClass: 'department-cto'\\n                        &#125;,\\n                        &#123;\\n                            label: 'Back End',\\n                            styleClass: 'department-cto'\\n                        &#125;]\\n                    &#125;,\\n                    &#123;\\n                        label: 'QA',\\n                        styleClass: 'department-cto'\\n                    &#125;,\\n                    &#123;\\n                        label: 'R&amp;D',\\n                        styleClass: 'department-cto'\\n                    &#125;]\\n                &#125;\\n            ]\\n        &#125;];\\n\\n        this.data2 = [&#123;\\n            label: 'F.C Barcelona',\\n            expanded: true,\\n            children: [\\n                &#123;\\n                    label: 'F.C Barcelona',\\n                    expanded: true,\\n                    children: [\\n                        &#123;\\n                            label: 'Chelsea FC'\\n                        &#125;,\\n                        &#123;\\n                            label: 'F.C. Barcelona'\\n                        &#125;\\n                    ]\\n                &#125;,\\n                &#123;\\n                    label: 'Real Madrid',\\n                    expanded: true,\\n                    children: [\\n                        &#123;\\n                            label: 'Bayern Munich'\\n                        &#125;,\\n                        &#123;\\n                            label: 'Real Madrid'\\n                        &#125;\\n                    ]\\n                &#125;\\n            ]\\n        &#125;];\\n    &#125;\\n\\n    onNodeSelect(event) &#123;\\n        this.messageService.add(&#123;severity: 'success', summary: 'Node Selected', detail: event.node.label&#125;);\\n    &#125;\\n&#125;\\n</code>\\n</pre>\\n        </p-tabPanel>\\n        <p-tabPanel header=\\\"StackBlitz\\\">\\n            <ng-template pTemplate=\\\"content\\\">\\n                <iframe src=\\\"https://stackblitz.com/edit/primeng-organizationchart-demo?embed=1\\\" style=\\\"width: 100%; height: 768px; border: none;\\\"></iframe>\\n            </ng-template>\\n        </p-tabPanel>\\n    </p-tabView>\\n</div>\\n\";","import {NgModule,Component,Input,Output,EventEmitter,ElementRef,ContentChild,ChangeDetectionStrategy} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {SharedModule,Footer} from 'primeng/api';\nimport {BlockableUI} from 'primeng/api';\nimport {trigger,state,style,transition,animate} from '@angular/animations';\n\nlet idx: number = 0;\n\n@Component({\n    selector: 'p-panel',\n    template: `\n        <div [attr.id]=\"id\" [ngClass]=\"'ui-panel ui-widget ui-widget-content ui-corner-all'\" [ngStyle]=\"style\" [class]=\"styleClass\">\n            <div [ngClass]=\"{'ui-panel-titlebar ui-widget-header ui-helper-clearfix ui-corner-all': true, 'ui-panel-titlebar-clickable': (toggleable && toggler === 'header')}\" \n                *ngIf=\"showHeader\" (click)=\"onHeaderClick($event)\" [attr.id]=\"id + '-titlebar'\">\n                <span class=\"ui-panel-title\" *ngIf=\"header\" [attr.id]=\"id + '_header'\">{{header}}</span>\n                <ng-content select=\"p-header\"></ng-content>\n                <a *ngIf=\"toggleable\" [attr.id]=\"id + '-label'\" class=\"ui-panel-titlebar-icon ui-panel-titlebar-toggler ui-corner-all ui-state-default\" tabindex=\"0\"\n                    (click)=\"onIconClick($event)\" (keydown.enter)=\"onIconClick($event)\" [attr.aria-controls]=\"id + '-content'\" role=\"tab\" [attr.aria-expanded]=\"!collapsed\">\n                    <span [class]=\"collapsed ? expandIcon : collapseIcon\"></span>\n                </a>\n            </div>\n            <div [attr.id]=\"id + '-content'\" class=\"ui-panel-content-wrapper\" [@panelContent]=\"collapsed ? {value: 'hidden', params: {transitionParams: animating ? transitionOptions : '0ms', height: '0', opacity:'0'}} : {value: 'visible', params: {transitionParams: animating ? transitionOptions : '0ms', height: '*', opacity: '1'}}\" (@panelContent.done)=\"onToggleDone($event)\"\n                [ngClass]=\"{'ui-panel-content-wrapper-overflown': collapsed||animating}\"\n                role=\"region\" [attr.aria-hidden]=\"collapsed\" [attr.aria-labelledby]=\"id  + '-titlebar'\">\n                <div class=\"ui-panel-content ui-widget-content\">\n                    <ng-content></ng-content>\n                </div>\n                \n                <div class=\"ui-panel-footer ui-widget-content\" *ngIf=\"footerFacet\">\n                    <ng-content select=\"p-footer\"></ng-content>\n                </div>\n            </div>\n        </div>\n    `,\n    animations: [\n        trigger('panelContent', [\n            state('hidden', style({\n                height: '0',\n                opacity: 0\n            })),\n            state('void', style({\n                height: '{{height}}',\n                opacity: '{{opacity}}'\n            }), {params: {height: '0', opacity: '0'}}),\n            state('visible', style({\n                height: '*',\n                opacity: 1\n            })),\n            transition('visible <=> hidden', animate('{{transitionParams}}')),\n            transition('void => hidden', animate('{{transitionParams}}')),\n            transition('void => visible', animate('{{transitionParams}}'))\n        ])\n    ],\n    changeDetection: ChangeDetectionStrategy.Default\n})\nexport class Panel implements BlockableUI {\n\n    @Input() toggleable: boolean;\n\n    @Input() header: string;\n\n    @Input() collapsed: boolean = false;\n    \n    @Input() style: any;\n    \n    @Input() styleClass: string;\n    \n    @Input() expandIcon: string = 'pi pi-plus';\n    \n    @Input() collapseIcon: string = 'pi pi-minus';\n  \n    @Input() showHeader: boolean = true;\n\n    @Input() toggler: string = \"icon\";\n    \n    @Output() collapsedChange: EventEmitter<any> = new EventEmitter();\n\n    @Output() onBeforeToggle: EventEmitter<any> = new EventEmitter();\n\n    @Output() onAfterToggle: EventEmitter<any> = new EventEmitter();\n    \n    @Input() transitionOptions: string = '400ms cubic-bezier(0.86, 0, 0.07, 1)';\n\n    @ContentChild(Footer) footerFacet;\n    \n    animating: boolean;\n    \n    id: string = `ui-panel-${idx++}`;\n    \n    constructor(private el: ElementRef) {}\n\n    onHeaderClick(event: Event) {\n        if (this.toggler === 'header') {\n            this.toggle(event);\n        }\n    }\n\n    onIconClick(event: Event) {\n        if (this.toggler === 'icon') {\n            this.toggle(event);\n        }\n    }\n    \n    toggle(event: Event) {\n        if (this.animating) {\n            return false;\n        }\n        \n        this.animating = true;\n        this.onBeforeToggle.emit({originalEvent: event, collapsed: this.collapsed});\n        \n        if (this.toggleable) {\n            if (this.collapsed)\n                this.expand(event);\n            else\n                this.collapse(event);\n        }\n        \n        event.preventDefault();\n    }\n    \n    expand(event) {\n        this.collapsed = false;\n        this.collapsedChange.emit(this.collapsed);\n    }\n    \n    collapse(event) {\n        this.collapsed = true;\n        this.collapsedChange.emit(this.collapsed);\n    }\n    \n    getBlockableElement(): HTMLElement {\n        return this.el.nativeElement.children[0];\n    }\n    \n    onToggleDone(event: Event) {\n        this.animating = false;\n        this.onAfterToggle.emit({originalEvent: event, collapsed: this.collapsed});\n    }\n\n}\n\n@NgModule({\n    imports: [CommonModule],\n    exports: [Panel,SharedModule],\n    declarations: [Panel]\n})\nexport class PanelModule { }\n","export * from './panel';","import {NgModule} from '@angular/core';\nimport {RouterModule} from '@angular/router'\nimport {OrganizationChartDemo} from './organizationchartdemo';\n\n@NgModule({\n\timports: [\n\t\tRouterModule.forChild([\n\t\t\t{path:'',component: OrganizationChartDemo}\n\t\t])\n\t],\n\texports: [\n\t\tRouterModule\n\t]\n})\nexport class OrganizationChartDemoRoutingModule {}\n","import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {OrganizationChartDemo} from './organizationchartdemo';\nimport {OrganizationChartDemoRoutingModule} from './organizationchartdemo-routing.module';\nimport {OrganizationChartModule} from 'primeng/organizationchart';\nimport {ToastModule} from 'primeng/toast';\nimport {PanelModule} from 'primeng/panel';\nimport {TabViewModule} from 'primeng/tabview';\nimport {CodeHighlighterModule} from 'primeng/codehighlighter';\n\n@NgModule({\n\timports: [\n\t\tCommonModule,\n\t\tOrganizationChartDemoRoutingModule,\n        OrganizationChartModule,\n        ToastModule,\n        PanelModule,\n        TabViewModule,\n        CodeHighlighterModule\n\t],\n\tdeclarations: [\n\t\tOrganizationChartDemo\n\t]\n})\nexport class OrganizationChartDemoModule {}\n","import {Component,OnInit,ViewEncapsulation} from '@angular/core';\nimport {TreeNode} from 'primeng/api';\nimport {MessageService} from 'primeng/api';\n\n@Component({\n    templateUrl: './organizationchartdemo.html',\n    providers: [MessageService],\n    styles: [`\n        .company.ui-organizationchart .ui-organizationchart-node-content.ui-person {\n            padding: 0;\n            border: 0 none;\n        }\n        \n        .node-header,.node-content {\n            padding: .5em .7em;\n        }\n        \n        .node-header {\n            background-color: #495ebb;\n            color: #ffffff;\n        }\n        \n        .node-content {\n            text-align: center;\n            border: 1px solid #495ebb;\n        }\n        \n        .node-content img {\n            border-radius: 50%;\n        }\n        \n        .ui-organizationchart-node-content.department-cfo {\n            background-color: #7247bc;\n            color: #ffffff;\n        }\n        \n        .ui-organizationchart-node-content.department-coo {\n            background-color: #a534b6;\n            color: #ffffff;\n        }\n        \n        .ui-organizationchart-node-content.department-cto {\n            background-color: #e9286f;\n            color: #ffffff;\n        }\n        \n        .ui-person .ui-node-toggler {\n            color: #495ebb !important;\n        }\n        \n        .department-cto .ui-node-toggler {\n            color: #8a0a39 !important;\n        }\n    `],\n    encapsulation: ViewEncapsulation.None\n})\nexport class OrganizationChartDemo implements OnInit {\n\n    data1: TreeNode[];\n    \n    data2: TreeNode[];\n    \n    selectedNode: TreeNode;\n    \n    constructor(private messageService: MessageService) {}\n    \n    ngOnInit() {\n        this.data1 = [{\n            label: 'CEO',\n            type: 'person',\n            styleClass: 'ui-person',\n            expanded: true,\n            data: {name:'Walter White', 'avatar': 'walter.jpg'},\n            children: [\n                {\n                    label: 'CFO',\n                    type: 'person',\n                    styleClass: 'ui-person',\n                    expanded: true,\n                    data: {name:'Saul Goodman', 'avatar': 'saul.jpg'},\n                    children:[{\n                        label: 'Tax',\n                        styleClass: 'department-cfo'\n                    },\n                    {\n                        label: 'Legal',\n                        styleClass: 'department-cfo'\n                    }],\n                },\n                {\n                    label: 'COO',\n                    type: 'person',\n                    styleClass: 'ui-person',\n                    expanded: true,\n                    data: {name:'Mike E.', 'avatar': 'mike.jpg'},\n                    children:[{\n                        label: 'Operations',\n                        styleClass: 'department-coo'\n                    }]\n                },\n                {\n                    label: 'CTO',\n                    type: 'person',\n                    styleClass: 'ui-person',\n                    expanded: true,\n                    data: {name:'Jesse Pinkman', 'avatar': 'jesse.jpg'},\n                    children:[{\n                        label: 'Development',\n                        styleClass: 'department-cto',\n                        expanded: true,\n                        children:[{\n                            label: 'Analysis',\n                            styleClass: 'department-cto'\n                        },\n                        {\n                            label: 'Front End',\n                            styleClass: 'department-cto'\n                        },\n                        {\n                            label: 'Back End',\n                            styleClass: 'department-cto'\n                        }]\n                    },\n                    {\n                        label: 'QA',\n                        styleClass: 'department-cto'\n                    },\n                    {\n                        label: 'R&D',\n                        styleClass: 'department-cto'\n                    }]\n                }\n            ]\n        }];\n        \n        this.data2 = [{\n            label: 'F.C Barcelona',\n            expanded: true,\n            children: [\n                {\n                    label: 'F.C Barcelona',\n                    expanded: true,\n                    children: [\n                        {\n                            label: 'Chelsea FC'\n                        },\n                        {\n                            label: 'F.C. Barcelona'\n                        }\n                    ]\n                },\n                {\n                    label: 'Real Madrid',\n                    expanded: true,\n                    children: [\n                        {\n                            label: 'Bayern Munich'\n                        },\n                        {\n                            label: 'Real Madrid'\n                        }\n                    ]\n                }\n            ]\n        }];\n    }\n    \n    onNodeSelect(event) {\n        this.messageService.add({severity: 'success', summary: 'Node Selected', detail: event.node.label});\n    }\n\n}\n"]}