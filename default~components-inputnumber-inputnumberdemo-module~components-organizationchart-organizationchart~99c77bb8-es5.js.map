{"version":3,"sources":["webpack:///src/app/components/organizationchart/organizationchart.ts","webpack:///src/app/components/organizationchart/public_api.ts"],"names":["OrganizationChartNode","chart","node","leaf","children","length","onNodeClick","event","toggleNode","expanded","onNodeExpand","emit","originalEvent","onNodeCollapse","preventDefault","isSelected","OrganizationChart","selector","template","animations","opacity","el","preserveSpace","selectionChange","onNodeSelect","onNodeUnselect","value","ngAfterContentInit","templates","templateMap","forEach","item","getType","getTemplateForNode","type","eventTarget","target","className","indexOf","selectionMode","selectable","index","findIndexInSelection","selected","selection","filter","val","i","changeDetection","Default","OrganizationChartModule","imports","exports","declarations"],"mappings":"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","file":"default~components-inputnumber-inputnumberdemo-module~components-organizationchart-organizationchart~99c77bb8-es5.js","sourcesContent":["import {NgModule,Component,ElementRef,Input,Output,AfterContentInit,EventEmitter,TemplateRef,\n        Inject,forwardRef,ContentChildren,QueryList,ChangeDetectionStrategy} from '@angular/core';\nimport {trigger,state,style,transition,animate} from '@angular/animations';\nimport {CommonModule} from '@angular/common';\nimport {SharedModule} from 'primeng/api';\nimport {TreeNode} from 'primeng/api';\nimport {PrimeTemplate} from 'primeng/api';\n\n@Component({\n    selector: '[pOrganizationChartNode]',\n    template: `\n        <tr *ngIf=\"node\">\n            <td [attr.colspan]=\"colspan\">\n                <div class=\"ui-organizationchart-node-content ui-widget-content ui-corner-all {{node.styleClass}}\" \n                    [ngClass]=\"{'ui-organizationchart-selectable-node': chart.selectionMode && node.selectable !== false,'ui-state-highlight':isSelected()}\"\n                    (click)=\"onNodeClick($event,node)\">\n                    <div *ngIf=\"!chart.getTemplateForNode(node)\">{{node.label}}</div>\n                    <div *ngIf=\"chart.getTemplateForNode(node)\">\n                        <ng-container *ngTemplateOutlet=\"chart.getTemplateForNode(node); context: {$implicit: node}\"></ng-container>\n                    </div>\n                    <a *ngIf=\"!leaf\" tabindex=\"0\" class=\"ui-node-toggler\" (click)=\"toggleNode($event, node)\" (keydown.enter)=\"toggleNode($event, node)\">\n                        <i class=\"ui-node-toggler-icon pi\" [ngClass]=\"{'pi-chevron-down': node.expanded, 'pi-chevron-up': !node.expanded}\"></i>\n                    </a>\n                </div>\n            </td>\n        </tr>\n        <tr [ngClass]=\"!leaf&&node.expanded ? 'ui-organizationchart-node-visible' : 'ui-organizationchart-node-hidden'\" class=\"ui-organizationchart-lines\" [@childState]=\"'in'\">\n            <td [attr.colspan]=\"colspan\">\n                <div class=\"ui-organizationchart-line-down\"></div>\n            </td>\n        </tr>\n        <tr [ngClass]=\"!leaf&&node.expanded ? 'ui-organizationchart-node-visible' : 'ui-organizationchart-node-hidden'\" class=\"ui-organizationchart-lines\" [@childState]=\"'in'\">\n            <ng-container *ngIf=\"node.children && node.children.length === 1\">\n                <td [attr.colspan]=\"colspan\">\n                    <div class=\"ui-organizationchart-line-down\"></div>\n                </td>\n            </ng-container>\n            <ng-container *ngIf=\"node.children && node.children.length > 1\">\n                <ng-template ngFor let-child [ngForOf]=\"node.children\" let-first=\"first\" let-last=\"last\">\n                    <td class=\"ui-organizationchart-line-left\" [ngClass]=\"{'ui-organizationchart-line-top':!first}\">&nbsp;</td>\n                    <td class=\"ui-organizationchart-line-right\" [ngClass]=\"{'ui-organizationchart-line-top':!last}\">&nbsp;</td>\n                </ng-template>\n            </ng-container>\n        </tr>\n        <tr [ngClass]=\"!leaf&&node.expanded ? 'ui-organizationchart-node-visible' : 'ui-organizationchart-node-hidden'\" class=\"ui-organizationchart-nodes\" [@childState]=\"'in'\">\n            <td *ngFor=\"let child of node.children\" colspan=\"2\">\n                <table class=\"ui-organizationchart-table\" pOrganizationChartNode [node]=\"child\"></table>\n            </td>\n        </tr>\n    `,\n    animations: [\n        trigger('childState', [\n            state('in', style({opacity: 1})),\n           transition('void => *', [\n             style({opacity: 0}),\n             animate(150)\n           ]),\n           transition('* => void', [\n             animate(150, style({opacity:0}))\n           ])\n        ])\n    ]\n})\nexport class OrganizationChartNode {\n\n    @Input() node: TreeNode;\n        \n    @Input() root: boolean;\n    \n    @Input() first: boolean;\n    \n    @Input() last: boolean;\n\n    chart: OrganizationChart;\n        \n    constructor(@Inject(forwardRef(() => OrganizationChart)) chart) {\n        this.chart = chart as OrganizationChart;\n    }\n                \n    get leaf(): boolean {\n        return this.node.leaf == false ? false : !(this.node.children&&this.node.children.length);\n    }\n    \n    get colspan() {\n        return (this.node.children && this.node.children.length) ? this.node.children.length * 2: null;\n    }\n    \n    onNodeClick(event: Event, node: TreeNode) {\n        this.chart.onNodeClick(event, node)\n    }\n    \n    toggleNode(event: Event, node: TreeNode) {\n        node.expanded = !node.expanded;\n        if (node.expanded)\n            this.chart.onNodeExpand.emit({originalEvent: event, node: this.node});\n        else\n            this.chart.onNodeCollapse.emit({originalEvent: event, node: this.node});\n            \n        event.preventDefault();\n    }\n    \n    isSelected() {\n        return this.chart.isSelected(this.node);\n    }\n}\n\n@Component({\n    selector: 'p-organizationChart',\n    template: `\n        <div [ngStyle]=\"style\" [class]=\"styleClass\" [ngClass]=\"{'ui-organizationchart ui-widget': true, 'ui-organizationchart-preservespace': preserveSpace}\">\n            <table class=\"ui-organizationchart-table\" pOrganizationChartNode [node]=\"root\" *ngIf=\"root\"></table>\n        </div>\n    `,\n    changeDetection: ChangeDetectionStrategy.Default\n})\nexport class OrganizationChart implements AfterContentInit {\n            \n    @Input() value: TreeNode[];            \n\n    @Input() style: any;\n\n    @Input() styleClass: string;\n    \n    @Input() selectionMode: string;\n    \n    @Input() selection: any;\n\n    @Input() preserveSpace: boolean = true;\n    \n    @Output() selectionChange: EventEmitter<any> = new EventEmitter();\n    \n    @Output() onNodeSelect: EventEmitter<any> = new EventEmitter();\n    \n    @Output() onNodeUnselect: EventEmitter<any> = new EventEmitter();\n\n    @Output() onNodeExpand: EventEmitter<any> = new EventEmitter();\n\n    @Output() onNodeCollapse: EventEmitter<any> = new EventEmitter();\n    \n    @ContentChildren(PrimeTemplate) templates: QueryList<any>;\n    \n    public templateMap: any;\n    \n    constructor(public el: ElementRef) {}\n    \n    get root(): TreeNode {\n        return this.value && this.value.length ? this.value[0] : null;\n    }\n    \n    ngAfterContentInit() {\n        if (this.templates.length) {\n            this.templateMap = {};\n        }\n        \n        this.templates.forEach((item) => {\n            this.templateMap[item.getType()] = item.template;\n        });\n    }\n    \n    getTemplateForNode(node: TreeNode): TemplateRef<any> {\n        if (this.templateMap)\n            return node.type ? this.templateMap[node.type] : this.templateMap['default'];\n        else\n            return null;\n    }\n    \n    onNodeClick(event: Event, node: TreeNode) {\n        let eventTarget = (<Element> event.target);\n        \n        if (eventTarget.className && (eventTarget.className.indexOf('ui-node-toggler') !== -1 || eventTarget.className.indexOf('ui-node-toggler-icon') !== -1)) {\n            return;\n        }\n        else if (this.selectionMode) {\n            if (node.selectable === false) {\n                return;\n            }\n            \n            let index = this.findIndexInSelection(node);\n            let selected = (index >= 0);\n            \n            if (this.selectionMode === 'single') {\n                if (selected) {\n                    this.selection = null;\n                    this.onNodeUnselect.emit({originalEvent: event, node: node});\n                }\n                else {\n                    this.selection = node;\n                    this.onNodeSelect.emit({originalEvent: event, node: node});\n                }\n            }\n            else if (this.selectionMode === 'multiple') {\n                if (selected) {\n                    this.selection = this.selection.filter((val,i) => i!=index);\n                    this.onNodeUnselect.emit({originalEvent: event, node: node});\n                }\n                else {\n                    this.selection = [...this.selection||[],node];\n                    this.onNodeSelect.emit({originalEvent: event, node: node});\n                }\n            }\n            \n            this.selectionChange.emit(this.selection);\n        }\n    }\n    \n    findIndexInSelection(node: TreeNode) {\n        let index: number = -1;\n\n        if (this.selectionMode && this.selection) {\n            if (this.selectionMode === 'single') {\n                index = (this.selection == node) ? 0 : - 1;\n            }\n            else if (this.selectionMode === 'multiple') {\n                for(let i = 0; i  < this.selection.length; i++) {\n                    if (this.selection[i] == node) {\n                        index = i;\n                        break;\n                    }\n                }\n            }\n        }\n\n        return index;\n    }\n    \n    isSelected(node: TreeNode) {\n        return this.findIndexInSelection(node) != -1;         \n    }\n}\n\n@NgModule({\n    imports: [CommonModule],\n    exports: [OrganizationChart,SharedModule],\n    declarations: [OrganizationChart,OrganizationChartNode]\n})\nexport class OrganizationChartModule { }","export * from './organizationchart';"]}