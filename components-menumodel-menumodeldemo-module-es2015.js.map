{"version":3,"sources":["./src/app/showcase/components/menumodel/menumodeldemo.html","./src/app/components/codehighlighter/codehighlighter.ts","./src/app/components/codehighlighter/public_api.ts","./src/app/showcase/components/menumodel/menumodeldemo-routing.module.ts","./src/app/showcase/components/menumodel/menumodeldemo.module.ts","./src/app/showcase/components/menumodel/menumodeldemo.ts"],"names":[],"mappings":";;;;;;;;;;AAAA;AAAe,oqBAAqmB,4BAA4B,IAAI,WAAW,mGAAmG,gBAAgB,qBAAqB,eAAe,cAAc,oBAAoB,eAAe,kBAAkB,oBAAoB,kJAAkJ,kCAAkC,yBAAyB,8BAA8B,0EAA0E,sCAAsC,yBAAyB,2CAA2C,+BAA+B,iBAAiB,0EAA0E,0CAA0C,yBAAyB,yCAAyC,+BAA+B,EAAE,YAAY,QAAQ,2sOAA2sO,kCAAkC,yBAAyB,8BAA8B,0EAA0E,4DAA4D,mIAAmI,+BAA+B,YAAY,QAAQ,0cAA0c,kCAAkC,yBAAyB,8BAA8B,0EAA0E,gFAAgF,yBAAyB,sEAAsE,wBAAwB,6FAA6F,sBAAsB,MAAM,+BAA+B,YAAY,QAAQ,8BAA8B,E;;;;;;;;;;;;;;;;;;;ACAtlU;AAChC;AAK/C,IAAa,eAAe,GAA5B,MAAa,eAAe;IAExB,YAAmB,EAAc;QAAd,OAAE,GAAF,EAAE,CAAY;IAAI,CAAC;IAEtC,eAAe;QACX,IAAI,MAAM,CAAC,OAAO,CAAC,EAAE;YACjB,MAAM,CAAC,OAAO,CAAC,CAAC,gBAAgB,CAAC,IAAI,CAAC,EAAE,CAAC,aAAa,CAAC,CAAC;SAC3D;IACL,CAAC;CACJ;;YAP0B,wDAAU;;AAFxB,eAAe;IAH3B,+DAAS,CAAC;QACP,QAAQ,EAAE,SAAS;KACtB,CAAC;mFAGyB,wDAAU;GAFxB,eAAe,CAS3B;AAT2B;AAgB5B,IAAa,qBAAqB,GAAlC,MAAa,qBAAqB;CAAI;AAAzB,qBAAqB;IALjC,8DAAQ,CAAC;QACN,OAAO,EAAE,CAAC,4DAAY,CAAC;QACvB,OAAO,EAAE,CAAC,eAAe,CAAC;QAC1B,YAAY,EAAE,CAAC,eAAe,CAAC;KAClC,CAAC;GACW,qBAAqB,CAAI;AAAJ;;;;;;;;;;;;;ACtBlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAkC;;;;;;;;;;;;;;;;;;;;ACAK;AACK;AACE;AAY9C,IAAa,0BAA0B,GAAvC,MAAa,0BAA0B;CAAG;AAA7B,0BAA0B;IAVtC,8DAAQ,CAAC;QACT,OAAO,EAAE;YACR,4DAAY,CAAC,QAAQ,CAAC;gBACrB,EAAC,IAAI,EAAC,EAAE,EAAC,SAAS,EAAE,4DAAa,EAAC;aAClC,CAAC;SACF;QACD,OAAO,EAAE;YACR,4DAAY;SACZ;KACD,CAAC;GACW,0BAA0B,CAAG;AAAH;;;;;;;;;;;;;;;;;;;;;;ACdA;AACM;AACC;AAC4B;AACZ;AAY9D,IAAa,mBAAmB,GAAhC,MAAa,mBAAmB;CAAG;AAAtB,mBAAmB;IAV/B,8DAAQ,CAAC;QACT,OAAO,EAAE;YACR,4DAAY;YACZ,wFAA0B;YACpB,6EAAqB;SAC3B;QACD,YAAY,EAAE;YACb,4DAAa;SACb;KACD,CAAC;GACW,mBAAmB,CAAG;AAAH;;;;;;;;;;;;;;;;;;AChBQ;AAKxC,IAAa,aAAa,GAA1B,MAAa,aAAa;CAEzB;AAFY,aAAa;IAHzB,+DAAS,CAAC;QACP,+OAAmC;KACtC,CAAC;GACW,aAAa,CAEzB;AAFyB","file":"components-menumodel-menumodeldemo-module-es2015.js","sourcesContent":["export default \"<div class=\\\"content-section introduction\\\">\\n    <div>\\n        <span class=\\\"feature-title\\\">MenuModel API</span>\\n        <span>PrimeNG menus components share a common api to specify the menuitems and submenus.</span>\\n    </div>\\n</div>\\n\\n<div class=\\\"content-section documentation implementation\\\">\\n    <h3 class=\\\"first\\\">MenuItem</h3>\\n    <p>Core of the api is MenuItem class that defines various options such as the label, icon and children of an item in a menu. Example below\\n    is a sample configuration with Menu component.</p>\\n\\n<pre>\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\n&lt;p-menu [model]=\\\"items\\\"&gt;&lt;/p-menu&gt;\\n</code>\\n</pre>\\n\\n<pre>\\n<code class=\\\"language-typescript\\\" pCode ngNonBindable>\\nimport &#123;MenuModule&#125; from 'primeng/menu';\\nimport &#123;MenuItem&#125; from 'primeng/api';\\nimport &#123;MegaMenuItem&#125; from 'primeng/api';  //required when using MegaMenu\\n</code>\\n</pre>\\n\\n<pre>\\n<code class=\\\"language-typescript\\\" pCode ngNonBindable>\\nexport class MenuDemo &#123;\\n\\n    private items: MenuItem[];\\n\\n    ngOnInit() &#123;\\n        this.items = [&#123;\\n            label: 'File',\\n            items: [\\n                &#123;label: 'New', icon: 'pi pi-plus'&#125;,\\n                &#123;label: 'Open', icon: 'pi pi-download'&#125;\\n            ]\\n        &#125;,\\n        &#123;\\n            label: 'Edit',\\n            items: [\\n                &#123;label: 'Undo', icon: 'pi pi-refresh'&#125;,\\n                &#123;label: 'Redo', icon: 'pi pi-repeat'&#125;\\n            ]\\n        &#125;];\\n    &#125;\\n&#125;\\n</code>\\n</pre>\\n\\n    <h3>MegaMenu</h3>\\n    <p>All menu components except MegaMenu uses MenuItem[] as the model, in the case of MegaMenu root level items should be MegaMenuItem[] whereas\\n        nested submenus can be MenuItem[]. See the <a [routerLink]=\\\"['/menumodel']\\\">MegaMenu</a> documentation for samples.</p>\\n\\n    <p>MenuItem provides the following properties. Note that not all of them may be utilized by the menu component.</p>\\n    <div class=\\\"doc-tablewrapper\\\">\\n        <table class=\\\"doc-table\\\">\\n            <thead>\\n                <tr>\\n                    <th>Name</th>\\n                    <th>Type</th>\\n                    <th>Default</th>\\n                    <th>Description</th>\\n                </tr>\\n            </thead>\\n            <tbody>\\n                <tr>\\n                    <td>id</td>\\n                    <td>string</td>\\n                    <td>null</td>\\n                    <td>Identifier of the element.</td>\\n                </tr>\\n                <tr>\\n                    <td>label</td>\\n                    <td>string</td>\\n                    <td>null</td>\\n                    <td>Text of the item.</td>\\n                </tr>\\n                <tr>\\n                    <td>icon</td>\\n                    <td>string</td>\\n                    <td>null</td>\\n                    <td>Icon of the item.</td>\\n                </tr>\\n                <tr>\\n                    <td>command</td>\\n                    <td>function</td>\\n                    <td>null</td>\\n                    <td>Callback to execute when item is clicked.</td>\\n                </tr>\\n                <tr>\\n                    <td>url</td>\\n                    <td>string</td>\\n                    <td>null</td>\\n                    <td>External link to navigate when item is clicked.</td>\\n                </tr>\\n                <tr>\\n                    <td>routerLink</td>\\n                    <td>array</td>\\n                    <td>null</td>\\n                    <td>RouterLink definition for internal navigation.</td>\\n                </tr>\\n                <tr>\\n                    <td>routerLinkActiveOptions</td>\\n                    <td>object</td>\\n                    <td>null</td>\\n                    <td>Configuration for active router link.</td>\\n                </tr>\\n                <tr>\\n                    <td>queryParams</td>\\n                    <td>object</td>\\n                    <td>null</td>\\n                    <td>Query parameters for internal navigation via routerLink.</td>\\n                </tr>\\n                <tr>\\n                    <td>fragment</td>\\n                    <td>string</td>\\n                    <td>null</td>\\n                    <td>Sets the hash fragment for the URL.</td>\\n                </tr>\\n                <tr>\\n                    <td>queryParamsHandling</td>\\n                    <td>QueryParamsHandling</td>\\n                    <td>null</td>\\n                    <td>How to handle query parameters in the router link for the next navigation. One of:<br /><br />\\n\\n                        merge : Merge new with current parameters.<br />\\n                        preserve : Preserve current parameters.k.</td>\\n                </tr>\\n                <tr>\\n                    <td>preserveFragment</td>\\n                    <td>boolean</td>\\n                    <td>false</td>\\n                    <td>When true, preserves the URL fragment for the next navigation.</td>\\n                </tr>\\n                <tr>\\n                    <td>skipLocationChange</td>\\n                    <td>boolean</td>\\n                    <td>null</td>\\n                    <td>When true, navigates without pushing a new state into history.</td>\\n                </tr>\\n                <tr>\\n                    <td>replaceUrl</td>\\n                    <td>boolean</td>\\n                    <td>null</td>\\n                    <td>When true, navigates while replacing the current state in history.</td>\\n                </tr>\\n                <tr>\\n                    <td>state</td>\\n                    <td>object</td>\\n                    <td>null</td>\\n                    <td>Developer-defined state that can be passed to any navigation.</td>\\n                </tr>\\n                <tr>\\n                    <td>items</td>\\n                    <td>array</td>\\n                    <td>null</td>\\n                    <td>An array of children menuitems.</td>\\n                </tr>\\n                <tr>\\n                    <td>expanded</td>\\n                    <td>boolean</td>\\n                    <td>false</td>\\n                    <td>Visibility of submenu.</td>\\n                </tr>\\n                <tr>\\n                    <td>disabled</td>\\n                    <td>boolean</td>\\n                    <td>false</td>\\n                    <td>When set as true, disables the menuitem.</td>\\n                </tr>\\n                <tr>\\n                    <td>visible</td>\\n                    <td>boolean</td>\\n                    <td>true</td>\\n                    <td>Whether the dom element of menuitem is created or not.</td>\\n                </tr>\\n                <tr>\\n                    <td>target</td>\\n                    <td>string</td>\\n                    <td>null</td>\\n                    <td>Specifies where to open the linked document.</td>\\n                </tr>\\n                <tr>\\n                    <td>separator</td>\\n                    <td>boolean</td>\\n                    <td>false</td>\\n                    <td>Defines the item as a separator.</td>\\n                </tr>\\n                <tr>\\n                    <td>style</td>\\n                    <td>object</td>\\n                    <td>null</td>\\n                    <td>Inline style of the menuitem.</td>\\n                </tr>\\n                <tr>\\n                    <td>styleClass</td>\\n                    <td>string</td>\\n                    <td>null</td>\\n                    <td>Style class of the menuitem.</td>\\n                </tr>\\n                <tr>\\n                    <td>badge</td>\\n                    <td>string</td>\\n                    <td>null</td>\\n                    <td>Value of the badge.</td>\\n                </tr>\\n                <tr>\\n                    <td>badgeStyleClass</td>\\n                    <td>string</td>\\n                    <td>null</td>\\n                    <td>Style class of the badge.</td>\\n                </tr>\\n                <tr>\\n                    <td>title</td>\\n                    <td>string</td>\\n                    <td>null</td>\\n                    <td>Tooltip text of the item.</td>\\n                </tr>\\n                <tr>\\n                    <td>automationId</td>\\n                    <td>any</td>\\n                    <td>null</td>\\n                    <td>Value of HTML data-* attribute.</td>\\n                </tr>\\n                <tr>\\n                    <td>tabindex</td>\\n                    <td>string</td>\\n                    <td>0</td>\\n                    <td>Specifies tab order of the item.</td>\\n                </tr>\\n            </tbody>\\n        </table>\\n    </div>\\n\\n    <h4>Command</h4>\\n    <p>The function to invoke when an item is clicked is defined using the <i>command</i> property.</p>\\n<pre>\\n<code class=\\\"language-typescript\\\" pCode ngNonBindable>\\nexport class MenuDemo &#123;\\n\\n    private items: MenuItem[];\\n\\n    ngOnInit() &#123;\\n        this.items = [&#123;\\n            label: 'File',\\n            items: [\\n                &#123;label: 'New', icon: 'pi pi-plus', command: (event) => &#123;\\n                    //event.originalEvent: Browser event\\n                    //event.item: menuitem metadata\\n                }}\\n            ]\\n        &#125;\\n    &#125;\\n&#125;\\n</code>\\n</pre>\\n\\n    <h4>Navigation</h4>\\n    <p>Navigation is specified using url property for external links and with <i>routerLink</i> for internal ones. If a menuitem has an active route, <i>ui-state-active</i> style class is added as an indicator. Active route link can be\\n    configured with <i>routerLinkActiveOptions</i> property of MenuItem API.</p>\\n<pre>\\n<code class=\\\"language-typescript\\\" pCode ngNonBindable>\\nexport class MenuDemo &#123;\\n\\n    private items: MenuItem[];\\n\\n    ngOnInit() &#123;\\n        this.items = [&#123;\\n            label: 'File',\\n            items: [\\n                &#123;label: 'New', icon: 'pi pi-plus', url: 'http://www.primefaces.org/primeng'&#125;,\\n                &#123;label: 'Open', icon: 'pi pi-download', routerLink: ['/pagename']&#125;\\n                &#123;label: 'Recent Files', icon: 'pi pi-download', routerLink: ['/pagename'], queryParams: &#123;'recent': 'true'&#125;&#125;\\n            ]\\n        &#125;\\n    &#125;\\n&#125;\\n</code>\\n</pre>\\n\\n</div>\\n\";","import { NgModule, Directive, ElementRef, AfterViewInit } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\n@Directive({\n    selector: '[pCode]'\n})\nexport class CodeHighlighter implements AfterViewInit {\n\n    constructor(public el: ElementRef) { }\n\n    ngAfterViewInit() {\n        if (window['Prism']) {\n            window['Prism'].highlightElement(this.el.nativeElement);\n        }\n    }\n}\n\n@NgModule({\n    imports: [CommonModule],\n    exports: [CodeHighlighter],\n    declarations: [CodeHighlighter]\n})\nexport class CodeHighlighterModule { }\n\n\n","export * from './codehighlighter';","import {NgModule} from '@angular/core';\nimport {RouterModule} from '@angular/router'\nimport {MenuModelDemo} from './menumodeldemo';\n\n@NgModule({\n\timports: [\n\t\tRouterModule.forChild([\n\t\t\t{path:'',component: MenuModelDemo}\n\t\t])\n\t],\n\texports: [\n\t\tRouterModule\n\t]\n})\nexport class MenuModelDemoRoutingModule {}\n","import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MenuModelDemo} from './menumodeldemo';\nimport {MenuModelDemoRoutingModule} from './menumodeldemo-routing.module';\nimport {CodeHighlighterModule} from 'primeng/codehighlighter';\n\n@NgModule({\n\timports: [\n\t\tCommonModule,\n\t\tMenuModelDemoRoutingModule,\n        CodeHighlighterModule\n\t],\n\tdeclarations: [\n\t\tMenuModelDemo\n\t]\n})\nexport class MenuModelDemoModule {}\n","import {Component} from '@angular/core';\n\n@Component({\n    templateUrl: './menumodeldemo.html'\n})\nexport class MenuModelDemo {\n\n}"],"sourceRoot":"webpack:///"}