{"version":3,"sources":["webpack:///src/app/showcase/components/validation/validationdemo.html","webpack:///src/app/components/panel/panel.ts","webpack:///src/app/components/panel/public_api.ts","webpack:///src/app/showcase/components/validation/validationdemo-routing.module.ts","webpack:///src/app/showcase/components/validation/validationdemo.module.ts","webpack:///src/app/showcase/components/validation/validationdemo.ts"],"names":["idx","Panel","el","collapsed","expandIcon","collapseIcon","showHeader","toggler","collapsedChange","onBeforeToggle","onAfterToggle","transitionOptions","id","onHeaderClick","event","toggle","onIconClick","animating","emit","originalEvent","toggleable","expand","collapse","preventDefault","getBlockableElement","nativeElement","children","onToggleDone","selector","template","animations","height","opacity","params","changeDetection","Default","PanelModule","imports","exports","declarations","ValidationDemoRoutingModule","forChild","path","component","ValidationDemoModule","ValidationDemo","fb","messageService","brands","cities","name","code","ngOnInit","userform","group","required","minLength","filterBrands","filteredBrands","i","length","brand","toLowerCase","indexOf","query","push","onSubmit","value","submitted","add","severity","summary","detail","sticky","JSON","stringify","providers"],"mappings":"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","file":"components-validation-validationdemo-module-es5.js","sourcesContent":["export default \"<div class=\\\"content-section introduction\\\">\\n    <div>\\n        <span class=\\\"feature-title\\\">Validation</span>\\n        <span>PrimeNG input components indicate validation errors automatically when their value is marked as invalid.</span>\\n    </div>\\n</div>\\n\\n<div class=\\\"content-section implementation\\\">\\n    <p-toast></p-toast>\\n\\n    <form [formGroup]=\\\"userform\\\" (ngSubmit)=\\\"onSubmit(userform.value)\\\">\\n        <p-panel header=\\\"Validate\\\">\\n            <div class=\\\"ui-fluid forms-grid\\\" style=\\\"margin: 1em 0\\\">\\n                <div>\\n                    <div>First Name *</div>\\n                    <input pInputText type=\\\"text\\\" formControlName=\\\"firstname\\\" placeholder=\\\"Required\\\"/>\\n                    <p-message severity=\\\"error\\\" text=\\\"Firstname is required\\\" *ngIf=\\\"!userform.controls['firstname'].valid&&userform.controls['firstname'].dirty\\\"></p-message>\\n                </div>\\n                <div>\\n                    <div>Last Name *</div>\\n                    <input pInputText type=\\\"text\\\" formControlName=\\\"lastname\\\" placeholder=\\\"Required\\\"/>\\n                    <p-message severity=\\\"error\\\" text=\\\"Lastname is required\\\" *ngIf=\\\"!userform.controls['lastname'].valid&&userform.controls['lastname'].dirty\\\"></p-message>\\n                </div>\\n                <div>\\n                    <div>Password *</div>\\n                    <input pInputText type=\\\"password\\\" formControlName=\\\"password\\\" placeholder=\\\"Required - Min(6)\\\"/>\\n                    <p-message severity=\\\"error\\\" [text]=\\\"userform.controls['password'].errors['required'] ? 'Password is required' : userform.controls['password'].errors['minlength'] ? 'Must be longer than 6 characters' : ''\\\" \\n                    *ngIf=\\\"!userform.controls['password'].valid&&userform.controls['password'].dirty\\\"></p-message>\\n                </div>\\n                <div>\\n                    <div>Brand *</div>\\n                    <p-autoComplete formControlName=\\\"brand\\\" [suggestions]=\\\"filteredBrands\\\" (completeMethod)=\\\"filterBrands($event)\\\" [size]=\\\"30\\\" [minLength]=\\\"1\\\" placeholder=\\\"Brand\\\">\\n                    </p-autoComplete>\\n                </div>\\n                <div>\\n                    <div>City *</div>\\n                    <p-dropdown [options]=\\\"cities\\\" formControlName=\\\"city\\\" placeholder=\\\"Select a City\\\" optionLabel=\\\"name\\\" [showClear]=\\\"true\\\"></p-dropdown>\\n                </div>\\n                <div>\\n                    <div>Description</div>\\n                    <textarea pInputTextarea type=\\\"text\\\" formControlName=\\\"description\\\"></textarea>\\n                </div>\\n                <div>\\n                    <button pButton type=\\\"submit\\\" label=\\\"Submit\\\" [disabled]=\\\"!userform.valid\\\"></button>\\n                </div>\\n\\n                <div style=\\\"text-align:center;margin-top:20px\\\" *ngIf=\\\"submitted\\\">\\n                    Form Submitted\\n                    <br>\\n                    {{diagnostic}}\\n                </div>\\n            </div>\\n        </p-panel>\\n    </form>\\n</div>\\n\\n<div class=\\\"content-section documentation\\\">\\n    <a href=\\\"https://github.com/primefaces/primeng/tree/master/src/app/showcase/components/validation\\\" class=\\\"btn-viewsource\\\" target=\\\"_blank\\\">\\n        <span>View on GitHub</span>\\n    </a>\\n    <a href=\\\"https://stackblitz.com/edit/primeng-validation-demo\\\" class=\\\"btn-viewsource\\\" style=\\\"margin-left: .5em;\\\" target=\\\"_blank\\\">\\n        <span>Edit in StackBlitz</span>\\n    </a>\\n\\n    <p-tabView>\\n        <p-tabPanel header=\\\"validationdemo.ts\\\">\\n<pre>\\n<code class=\\\"language-typescript\\\" pCode ngNonBindable>\\nimport &#123;Component,OnInit&#125; from '@angular/core';\\nimport &#123;Validators,FormControl,FormGroup,FormBuilder&#125; from '@angular/forms';\\nimport &#123;SelectItem&#125; from 'primeng/api';\\nimport &#123;MessageService&#125; from 'primeng/api';\\n\\n@Component(&#123;\\n    templateUrl: 'showcase/demo/validation/validationdemo.html',\\n    providers: [MessageService]\\n&#125;)\\nexport class ValidationDemo implements OnInit &#123;\\n\\n    userform: FormGroup;\\n\\n    submitted: boolean;\\n\\n    genders: SelectItem[];\\n\\n    description: string;\\n\\n    constructor(private fb: FormBuilder, private messageService: MessageService) &#123;&#125;\\n\\n    ngOnInit() &#123;\\n        this.userform = this.fb.group(&#123;\\n            'firstname': new FormControl('', Validators.required),\\n            'lastname': new FormControl('', Validators.required),\\n            'password': new FormControl('', Validators.compose([Validators.required, Validators.minLength(6)])),\\n            'description': new FormControl('')\\n        &#125;);\\n    &#125;\\n\\n    onSubmit(value: string) &#123;\\n        this.submitted = true;\\n        this.messageService.add(&#123;severity:'info', summary:'Success', detail:'Form Submitted'&#125;);\\n    &#125;\\n\\n    get diagnostic() &#123; return JSON.stringify(this.userform.value); &#125;\\n\\n&#125;\\n</code>\\n</pre>\\n        </p-tabPanel>\\n\\n        <p-tabPanel header=\\\"validationdemo.html\\\">\\n<pre>\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\n&lt;p-toast [style]=\\\"&#123;marginTop: '80px'&#125;\\\"&gt;&lt;/p-toast&gt;\\n\\n&lt;form [formGroup]=\\\"userform\\\" (ngSubmit)=\\\"onSubmit(userform.value)\\\"&gt;\\n    &lt;p-panel header=\\\"Validate\\\"&gt;\\n        &lt;div class=\\\"p-fluid forms-grid\\\" style=\\\"margin: 1em 0\\\"&gt;\\n            &lt;div&gt;\\n                &lt;div&gt;First Name *&lt;/div&gt;\\n                &lt;input pInputText type=\\\"text\\\" formControlName=\\\"firstname\\\" placeholder=\\\"Required\\\"/&gt;\\n                &lt;p-message severity=\\\"error\\\" text=\\\"Firstname is required\\\" *ngIf=\\\"!userform.controls['firstname'].valid&&userform.controls['firstname'].dirty\\\"&gt;&lt;/p-message&gt;\\n            &lt;/div&gt;\\n            &lt;div&gt;\\n                &lt;div&gt;Last Name *&lt;/div&gt;\\n                &lt;input pInputText type=\\\"text\\\" formControlName=\\\"lastname\\\" placeholder=\\\"Required\\\"/&gt;\\n                &lt;p-message severity=\\\"error\\\" text=\\\"Lastname is required\\\" *ngIf=\\\"!userform.controls['lastname'].valid&&userform.controls['lastname'].dirty\\\"&gt;&lt;/p-message&gt;\\n            &lt;/div&gt;\\n            &lt;div&gt;\\n                &lt;div&gt;Password *&lt;/div&gt;\\n                &lt;input pInputText type=\\\"password\\\" formControlName=\\\"password\\\" placeholder=\\\"Required - Min(6)\\\"/&gt;\\n                &lt;p-message severity=\\\"error\\\" [text]=\\\"userform.controls['password'].errors['required'] ? 'Password is required' : userform.controls['password'].errors['minlength'] ? 'Must be longer than 6 characters' : ''\\\" \\n                *ngIf=\\\"!userform.controls['password'].valid&&userform.controls['password'].dirty\\\"&gt;&lt;/p-message&gt;\\n            &lt;/div&gt;\\n            &lt;div&gt;\\n                &lt;div&gt;Description&lt;/div&gt;\\n                &lt;textarea pInputTextarea type=\\\"text\\\" formControlName=\\\"description\\\"&gt;&lt;/textarea&gt;\\n            &lt;/div&gt;\\n            &lt;div&gt;\\n                &lt;button pButton type=\\\"submit\\\" label=\\\"Submit\\\" [disabled]=\\\"!userform.valid\\\"&gt;&lt;/button&gt;\\n            &lt;/div&gt;\\n\\n            &lt;div style=\\\"text-align:center;margin-top:20px\\\" *ngIf=\\\"submitted\\\"&gt;\\n                Form Submitted\\n                &lt;br&gt;\\n                &#123;&#123;diagnostic&#125;&#125;\\n            &lt;/div&gt;\\n        &lt;/div&gt;\\n    &lt;/p-panel&gt;\\n&lt;/form&gt;\\n</code>\\n</pre>\\n        </p-tabPanel>\\n        <p-tabPanel header=\\\"StackBlitz\\\">\\n            <ng-template pTemplate=\\\"content\\\">\\n                <iframe src=\\\"https://stackblitz.com/edit/primeng-validation-demo?embed=1\\\" style=\\\"width: 100%; height: 768px; border: none;\\\"></iframe>\\n            </ng-template>\\n        </p-tabPanel>\\n    </p-tabView>\\n</div>\\n\";","import {NgModule,Component,Input,Output,EventEmitter,ElementRef,ContentChild,ChangeDetectionStrategy} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {SharedModule,Footer} from 'primeng/api';\nimport {BlockableUI} from 'primeng/api';\nimport {trigger,state,style,transition,animate} from '@angular/animations';\n\nlet idx: number = 0;\n\n@Component({\n    selector: 'p-panel',\n    template: `\n        <div [attr.id]=\"id\" [ngClass]=\"'ui-panel ui-widget ui-widget-content ui-corner-all'\" [ngStyle]=\"style\" [class]=\"styleClass\">\n            <div [ngClass]=\"{'ui-panel-titlebar ui-widget-header ui-helper-clearfix ui-corner-all': true, 'ui-panel-titlebar-clickable': (toggleable && toggler === 'header')}\" \n                *ngIf=\"showHeader\" (click)=\"onHeaderClick($event)\" [attr.id]=\"id + '-titlebar'\">\n                <span class=\"ui-panel-title\" *ngIf=\"header\" [attr.id]=\"id + '_header'\">{{header}}</span>\n                <ng-content select=\"p-header\"></ng-content>\n                <a *ngIf=\"toggleable\" [attr.id]=\"id + '-label'\" class=\"ui-panel-titlebar-icon ui-panel-titlebar-toggler ui-corner-all ui-state-default\" tabindex=\"0\"\n                    (click)=\"onIconClick($event)\" (keydown.enter)=\"onIconClick($event)\" [attr.aria-controls]=\"id + '-content'\" role=\"tab\" [attr.aria-expanded]=\"!collapsed\">\n                    <span [class]=\"collapsed ? expandIcon : collapseIcon\"></span>\n                </a>\n            </div>\n            <div [attr.id]=\"id + '-content'\" class=\"ui-panel-content-wrapper\" [@panelContent]=\"collapsed ? {value: 'hidden', params: {transitionParams: animating ? transitionOptions : '0ms', height: '0', opacity:'0'}} : {value: 'visible', params: {transitionParams: animating ? transitionOptions : '0ms', height: '*', opacity: '1'}}\" (@panelContent.done)=\"onToggleDone($event)\"\n                [ngClass]=\"{'ui-panel-content-wrapper-overflown': collapsed||animating}\"\n                role=\"region\" [attr.aria-hidden]=\"collapsed\" [attr.aria-labelledby]=\"id  + '-titlebar'\">\n                <div class=\"ui-panel-content ui-widget-content\">\n                    <ng-content></ng-content>\n                </div>\n                \n                <div class=\"ui-panel-footer ui-widget-content\" *ngIf=\"footerFacet\">\n                    <ng-content select=\"p-footer\"></ng-content>\n                </div>\n            </div>\n        </div>\n    `,\n    animations: [\n        trigger('panelContent', [\n            state('hidden', style({\n                height: '0',\n                opacity: 0\n            })),\n            state('void', style({\n                height: '{{height}}',\n                opacity: '{{opacity}}'\n            }), {params: {height: '0', opacity: '0'}}),\n            state('visible', style({\n                height: '*',\n                opacity: 1\n            })),\n            transition('visible <=> hidden', animate('{{transitionParams}}')),\n            transition('void => hidden', animate('{{transitionParams}}')),\n            transition('void => visible', animate('{{transitionParams}}'))\n        ])\n    ],\n    changeDetection: ChangeDetectionStrategy.Default\n})\nexport class Panel implements BlockableUI {\n\n    @Input() toggleable: boolean;\n\n    @Input() header: string;\n\n    @Input() collapsed: boolean = false;\n    \n    @Input() style: any;\n    \n    @Input() styleClass: string;\n    \n    @Input() expandIcon: string = 'pi pi-plus';\n    \n    @Input() collapseIcon: string = 'pi pi-minus';\n  \n    @Input() showHeader: boolean = true;\n\n    @Input() toggler: string = \"icon\";\n    \n    @Output() collapsedChange: EventEmitter<any> = new EventEmitter();\n\n    @Output() onBeforeToggle: EventEmitter<any> = new EventEmitter();\n\n    @Output() onAfterToggle: EventEmitter<any> = new EventEmitter();\n    \n    @Input() transitionOptions: string = '400ms cubic-bezier(0.86, 0, 0.07, 1)';\n\n    @ContentChild(Footer) footerFacet;\n    \n    animating: boolean;\n    \n    id: string = `ui-panel-${idx++}`;\n    \n    constructor(private el: ElementRef) {}\n\n    onHeaderClick(event: Event) {\n        if (this.toggler === 'header') {\n            this.toggle(event);\n        }\n    }\n\n    onIconClick(event: Event) {\n        if (this.toggler === 'icon') {\n            this.toggle(event);\n        }\n    }\n    \n    toggle(event: Event) {\n        if (this.animating) {\n            return false;\n        }\n        \n        this.animating = true;\n        this.onBeforeToggle.emit({originalEvent: event, collapsed: this.collapsed});\n        \n        if (this.toggleable) {\n            if (this.collapsed)\n                this.expand(event);\n            else\n                this.collapse(event);\n        }\n        \n        event.preventDefault();\n    }\n    \n    expand(event) {\n        this.collapsed = false;\n        this.collapsedChange.emit(this.collapsed);\n    }\n    \n    collapse(event) {\n        this.collapsed = true;\n        this.collapsedChange.emit(this.collapsed);\n    }\n    \n    getBlockableElement(): HTMLElement {\n        return this.el.nativeElement.children[0];\n    }\n    \n    onToggleDone(event: Event) {\n        this.animating = false;\n        this.onAfterToggle.emit({originalEvent: event, collapsed: this.collapsed});\n    }\n\n}\n\n@NgModule({\n    imports: [CommonModule],\n    exports: [Panel,SharedModule],\n    declarations: [Panel]\n})\nexport class PanelModule { }\n","export * from './panel';","import {NgModule} from '@angular/core';\nimport {RouterModule} from '@angular/router'\nimport {ValidationDemo} from './validationdemo';\n\n@NgModule({\n\timports: [\n\t\tRouterModule.forChild([\n\t\t\t{path:'',component: ValidationDemo}\n\t\t])\n\t],\n\texports: [\n\t\tRouterModule\n\t]\n})\nexport class ValidationDemoRoutingModule {}\n","import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {FormsModule,ReactiveFormsModule} from '@angular/forms';\nimport {ValidationDemo} from './validationdemo';\nimport {ValidationDemoRoutingModule} from './validationdemo-routing.module';\nimport {ToastModule} from 'primeng/toast';\nimport {MessageModule} from 'primeng/message';\nimport {PanelModule} from 'primeng/panel';\nimport {DropdownModule} from 'primeng/dropdown';\nimport {InputTextModule} from 'primeng/inputtext';\nimport {InputTextareaModule} from 'primeng/inputtextarea';\nimport {AutoCompleteModule} from 'primeng/autocomplete';\nimport {ButtonModule} from 'primeng/button';\nimport {TabViewModule} from 'primeng/tabview';\nimport {CodeHighlighterModule} from 'primeng/codehighlighter';\n\n@NgModule({\n\timports: [\n\t\tCommonModule,\n        FormsModule,\n        ReactiveFormsModule,\n\t\tValidationDemoRoutingModule,\n        ToastModule,\n        MessageModule,\n        PanelModule,\n        DropdownModule,\n        InputTextModule,\n        InputTextareaModule,\n        ButtonModule,\n        AutoCompleteModule,\n        TabViewModule,\n        CodeHighlighterModule\n\t],\n\tdeclarations: [\n\t\tValidationDemo\n\t]\n})\nexport class ValidationDemoModule {}\n","import {Component,OnInit} from '@angular/core';\nimport {Validators,FormControl,FormGroup,FormBuilder} from '@angular/forms';\nimport {SelectItem} from 'primeng/api';\nimport {MessageService} from 'primeng/api';\n\n@Component({\n    templateUrl: './validationdemo.html',\n    providers: [MessageService],\n    styles: [`\n        :host ::ng-deep .forms-grid > div {\n            display: flex;\n            align-items: center;\n            padding: 1em;\n        }\n\n        :host ::ng-deep .forms-grid > div > div:first-child {\n           min-width: 10em;\n        }\n        \n        input, textarea {\n            flex: 1 1 auto;\n        }\n\n        :host ::ng-deep .ui-message {\n            margin-left: 1em;\n        }\n\n        @media screen and (max-width: 64em) {\n            :host ::ng-deep .ui-message-text {\n                display: none;\n            }\n        }\n    `]\n})\nexport class ValidationDemo implements OnInit {\n    \n    userform: FormGroup;\n    \n    submitted: boolean;\n    \n    genders: SelectItem[];\n    \n    description: string;\n\n    brands: string[] = ['Audi','BMW','Fiat','Ford','Honda','Jaguar','Mercedes','Renault','Volvo','VW'];\n    \n    filteredBrands: any[];\n\n    cities = [\n        {name: 'New York', code: 'NY'},\n        {name: 'Rome', code: 'RM'},\n        {name: 'London', code: 'LDN'},\n        {name: 'Istanbul', code: 'IST'},\n        {name: 'Paris', code: 'PRS'}\n    ];\n    \n    constructor(private fb: FormBuilder, private messageService: MessageService) {}\n    \n    ngOnInit() {\n        this.userform = this.fb.group({\n            'firstname': new FormControl('', Validators.required),\n            'lastname': new FormControl('', Validators.required),\n            'password': new FormControl('', [Validators.required, Validators.minLength(6)]),\n            'brand' : new FormControl(''),\n            'city' : new FormControl(''),\n            'description': new FormControl('')\n        });\n    }\n\n    filterBrands(event) {\n        this.filteredBrands = [];\n        for(let i = 0; i < this.brands.length; i++) {\n            let brand = this.brands[i];\n            if (brand.toLowerCase().indexOf(event.query.toLowerCase()) == 0) {\n                this.filteredBrands.push(brand);\n            }\n        }\n    }\n    \n    onSubmit(value: string) {\n        this.submitted = true;\n        this.messageService.add({severity:'info', summary:'Success', detail:'Form Submitted', sticky: true});\n    }\n\n    get diagnostic() { return JSON.stringify(this.userform.value); }\n    \n}\n"]}