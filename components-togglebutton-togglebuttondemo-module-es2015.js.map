{"version":3,"sources":["./src/app/showcase/components/togglebutton/togglebuttondemo.html","./src/app/showcase/components/togglebutton/togglebuttondemo-routing.module.ts","./src/app/showcase/components/togglebutton/togglebuttondemo.module.ts","./src/app/showcase/components/togglebutton/togglebuttondemo.ts"],"names":[],"mappings":";;;;;;;;;;AAAA;AAAe,kXAAmT,UAAU,gEAAgE,gBAAgB,gDAAgD,UAAU,2JAA2J,gBAAgB,0PAA0P,wBAAwB,6BAA6B,yOAAyO,0CAA0C,IAAI,mBAAmB,wHAAwH,yBAAyB,UAAU,gPAAgP,+BAA+B,UAAU,4MAA4M,6CAA6C,IAAI,mBAAmB,2MAA2M,8IAA8I,IAAI,mBAAmB,6RAA6R,iKAAiK,IAAI,mBAAmB,o7IAAo7I,0EAA0E,uHAAuH,8BAA8B,oCAAoC,YAAY,QAAQ,gvDAAgvD,2JAA2J,sBAAsB,WAAW,UAAU,KAAK,OAAO,MAAM,wDAAwD,qBAAqB,MAAM,IAAI,mBAAmB,QAAQ,MAAM,gBAAgB,UAAU,KAAK,OAAO,MAAM,mJAAmJ,qBAAqB,MAAM,IAAI,mBAAmB,0HAA0H,kCAAkC,iCAAiC,QAAQ,yPAAyP,eAAe,cAAc,4FAA4F,E;;;;;;;;;;;;;;;;;;;ACA/uU;AACK;AACQ;AAYpD,IAAa,6BAA6B,GAA1C,MAAa,6BAA6B;CAAG;AAAhC,6BAA6B;IAVzC,8DAAQ,CAAC;QACT,OAAO,EAAE;YACR,4DAAY,CAAC,QAAQ,CAAC;gBACrB,EAAC,IAAI,EAAC,EAAE,EAAC,SAAS,EAAE,kEAAgB,EAAC;aACrC,CAAC;SACF;QACD,OAAO,EAAE;YACR,4DAAY;SACZ;KACD,CAAC;GACW,6BAA6B,CAAG;AAAH;;;;;;;;;;;;;;;;;;;;;;;;;ACdH;AACM;AACD;AACQ;AAC4B;AACxB;AACV;AACgB;AAe9D,IAAa,sBAAsB,GAAnC,MAAa,sBAAsB;CAAG;AAAzB,sBAAsB;IAblC,8DAAQ,CAAC;QACT,OAAO,EAAE;YACR,4DAAY;YACN,0DAAW;YACjB,8FAA6B;YACvB,uEAAkB;YAClB,6DAAa;YACb,6EAAqB;SAC3B;QACD,YAAY,EAAE;YACb,kEAAgB;SAChB;KACD,CAAC;GACW,sBAAsB,CAAG;AAAH;;;;;;;;;;;;;;;;;;ACtBK;AAKxC,IAAa,gBAAgB,GAA7B,MAAa,gBAAgB;IAA7B;QAEI,aAAQ,GAAY,KAAK,CAAC;QAE1B,aAAQ,GAAY,IAAI,CAAC;IAC7B,CAAC;CAAA;AALY,gBAAgB;IAH5B,+DAAS,CAAC;QACP,wPAAsC;KACzC,CAAC;GACW,gBAAgB,CAK5B;AAL4B","file":"components-togglebutton-togglebuttondemo-module-es2015.js","sourcesContent":["export default \"<div class=\\\"content-section introduction\\\">\\n    <div>\\n        <span class=\\\"feature-title\\\">ToggleButton</span>\\n        <span>ToggleButton is used to select a boolean value using a button.</span>\\n    </div>\\n</div>\\n\\n<div class=\\\"content-section implementation\\\">\\n    <h3 class=\\\"first\\\">Basic - ({{checked1}})</h3>\\n    <p-toggleButton [(ngModel)]=\\\"checked1\\\" [style]=\\\"{'width':'150px'}\\\"></p-toggleButton>\\n\\n    <h3>Customized - ({{checked2}})</h3>\\n    <p-toggleButton [(ngModel)]=\\\"checked2\\\" onLabel=\\\"I confirm\\\" offLabel=\\\"I reject\\\" onIcon=\\\"pi pi-check\\\" offIcon=\\\"pi pi-times\\\" [style]=\\\"{'width':'150px'}\\\"></p-toggleButton>\\n</div>\\n\\n<div class=\\\"content-section documentation\\\">\\n    <p-tabView>\\n        <p-tabPanel header=\\\"Documentation\\\">\\n            <h3>Import</h3>\\n<pre>\\n<code class=\\\"language-typescript\\\" pCode ngNonBindable>\\nimport &#123;ToggleButtonModule&#125; from 'primeng/togglebutton';\\n</code>\\n</pre>\\n\\n            <h3>Getting Started</h3>\\n            <p>Two-way binding to a boolean property is defined using the standard ngModel directive.</p>\\n\\n<pre>\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\n&lt;p-toggleButton [(ngModel)]=\\\"checked\\\"&gt;&lt;/p-toggleButton&gt;\\n</code>\\n</pre>\\n\\n<pre>\\n<code class=\\\"language-typescript\\\" pCode ngNonBindable>\\nexport class ModelComponent &#123;\\n\\n    checked: boolean;\\n\\n&#125;\\n</code>\\n</pre>\\n\\n            <p>As model is two-way binding enabled, setting the bound value as true displays the state as checked.</p>\\n<pre>\\n<code class=\\\"language-typescript\\\" pCode ngNonBindable>\\nexport class ModelComponent &#123;\\n\\n   checked: boolean = true;\\n\\n&#125;\\n</code>\\n</pre>\\n\\n            <h3>Model Driven Forms</h3>\\n            <p>ToggleButton can be used in a model driven form as well.</p>\\n<pre>\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\n&lt;p-toggleButton formControlName=\\\"agreed\\\"&gt;&lt;/p-toggleButton&gt;\\n</code>\\n</pre>\\n\\n            <h3>Labels</h3>\\n            <p>Labels are customized using onLabel and <i>offLabel</i> properties.</p>\\n<pre>\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\n&lt;p-toggleButton onLabel=\\\"I confirm\\\" offLabel=\\\"I reject\\\"\\n            onIcon=\\\"pi pi-check\\\" offIcon=\\\"pi pi-times\\\" [(ngModel)]=\\\"val\\\"&gt;&lt;/p-toggleButton&gt;\\n</code>\\n</pre>\\n\\n            <h3>Icons</h3>\\n            <p>Icon on a ToggleButton is specified with the <i>onIcon</i> and <i>offIcon</i> properties and position is customized using the <i>iconPos</i> property.</p>\\n<pre>\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\n&lt;p-toggleButton onLabel=\\\"I confirm\\\" offLabel=\\\"I reject\\\" \\n            onIcon=\\\"pi pi-check\\\" offIcon=\\\"pi pi-times\\\" iconPos=\\\"right\\\" [(ngModel)]=\\\"val\\\"&gt;&lt;/p-toggleButton&gt;\\n</code>\\n</pre>\\n            <h3>Properties</h3>\\n            <div class=\\\"doc-tablewrapper\\\">\\n                <table class=\\\"doc-table\\\">\\n                    <thead>\\n                        <tr>\\n                            <th>Name</th>\\n                            <th>Type</th>\\n                            <th>Default</th>\\n                            <th>Description</th>\\n                        </tr>\\n                    </thead>\\n                    <tbody>\\n                         <tr>\\n                            <td>onLabel</td>\\n                            <td>string</td>\\n                            <td>Yes</td>\\n                            <td>Label for the on state.</td>\\n                        </tr>\\n                        <tr>\\n                            <td>offLabel</td>\\n                            <td>string</td>\\n                            <td>No</td>\\n                            <td>Label for the off state.</td>\\n                        </tr>\\n                        <tr>\\n                            <td>onIcon</td>\\n                            <td>string</td>\\n                            <td>null</td>\\n                            <td>Icon for the on state.</td>\\n                        </tr>\\n                        <tr>\\n                            <td>offIcon</td>\\n                            <td>string</td>\\n                            <td>null</td>\\n                            <td>Icon for the off state.</td>\\n                        </tr>\\n                        <tr>\\n                            <td>iconPos</td>\\n                            <td>string</td>\\n                            <td>left</td>\\n                            <td>Position of the icon, valid values are \\\"left\\\" and \\\"right\\\".</td>\\n                        </tr>\\n                        <tr>\\n                            <td>style</td>\\n                            <td>string</td>\\n                            <td>null</td>\\n                            <td>Inline style of the element.</td>\\n                        </tr>\\n                        <tr>\\n                            <td>styleClass</td>\\n                            <td>string</td>\\n                            <td>null</td>\\n                            <td>Style class of the element.</td>\\n                        </tr>\\n                        <tr>\\n                            <td>disabled</td>\\n                            <td>boolean</td>\\n                            <td>false</td>\\n                            <td>When present, it specifies that the element should be disabled.</td>\\n                        </tr>\\n                        <tr>\\n                            <td>tabindex</td>\\n                            <td>number</td>\\n                            <td>null</td>\\n                            <td>Index of the element in tabbing order.</td>\\n                        </tr>\\n                        <tr>\\n                            <td>inputId</td>\\n                            <td>string</td>\\n                            <td>null</td>\\n                            <td>Identifier of the focus input to match a label defined for the component.</td>\\n                        </tr>\\n                        <tr>\\n                            <td>ariaLabelledBy</td>\\n                            <td>string</td>\\n                            <td>null</td>\\n                            <td>Establishes relationships between the component and label(s) where its value should be one or more element IDs.</td>\\n                        </tr>\\n                    </tbody>\\n                </table>\\n            </div>\\n\\n            <h3>Events</h3>\\n            <div class=\\\"doc-tablewrapper\\\">\\n                <table class=\\\"doc-table\\\">\\n                    <thead>\\n                        <tr>\\n                            <th>Name</th>\\n                            <th>Parameters</th>\\n                            <th>Description</th>\\n                        </tr>\\n                    </thead>\\n                    <tbody>\\n                        <tr>\\n                            <td>onChange</td>\\n                            <td>event.originalEvent: browser event <br>\\n                                event.checked: boolean value to represent checked state.</td>\\n                            <td>Callback to invoke on state change.</td>\\n                        </tr>\\n                    </tbody>\\n                </table>\\n            </div>\\n<pre>\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\n&lt;p-toggleButton (onChange)=\\\"handleChange($event)\\\" [(ngModel)]=\\\"val\\\"&gt;\\n</code>\\n</pre>\\n <pre>\\n<code class=\\\"language-typescript\\\" pCode ngNonBindable>\\nexport class ModelComponent &#123;\\n\\n    handleChange(e) &#123;\\n        var isChecked = e.checked;\\n    &#125;\\n&#125;\\n</code>\\n</pre>\\n\\n            <h3>Styling</h3>\\n            <p>Following is the list of structural style classes, for theming classes visit <a href=\\\"#\\\" [routerLink]=\\\"['/theming']\\\">theming page</a>.</p>\\n            <div class=\\\"doc-tablewrapper\\\">\\n                <table class=\\\"doc-table\\\">\\n                    <thead>\\n                        <tr>\\n                            <th>Name</th>\\n                            <th>Element</th>\\n                        </tr>\\n                    </thead>\\n                    <tbody>\\n                        <tr>\\n                            <td>ui-togglebutton</td>\\n                            <td>Container element</td>\\n                        </tr>\\n                        <tr>\\n                            <td>ui-button-icon-left</td>\\n                            <td>Icon element.</td>\\n                        </tr>\\n                        <tr>\\n                            <td>ui-button-icon-right</td>\\n                            <td>Icon element.</td>\\n                        </tr>\\n                        <tr>\\n                            <td>ui-button-text</td>\\n                            <td>Label element.</td>\\n                        </tr>\\n                    </tbody>\\n                </table>\\n            </div>\\n\\n            <h3>Dependencies</h3>\\n            <p>None.</p>\\n        </p-tabPanel>\\n\\n        <p-tabPanel header=\\\"Source\\\">\\n            <a href=\\\"https://github.com/primefaces/primeng/tree/master/src/app/showcase/components/togglebutton\\\" class=\\\"btn-viewsource\\\" target=\\\"_blank\\\">\\n                <span>View on GitHub</span>\\n            </a>\\n            <a href=\\\"https://stackblitz.com/edit/primeng-togglebutton-demo\\\" class=\\\"btn-viewsource\\\" style=\\\"margin-left: .5em;\\\" target=\\\"_blank\\\">\\n                <span>Edit in StackBlitz</span>\\n            </a>\\n<pre>\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\n&lt;h3 class=\\\"first\\\"&gt;Basic - ({{checked1}})&lt;/h3&gt;\\n&lt;p-toggleButton [(ngModel)]=\\\"checked1\\\" [style]=\\\"&#123;'width':'150px'&#125;\\\"&gt;&lt;/p-toggleButton&gt;\\n\\n&lt;h3&gt;Customized - ({{checked2}})&lt;/h3&gt;\\n&lt;p-toggleButton [(ngModel)]=\\\"checked2\\\" onLabel=\\\"I confirm\\\" offLabel=\\\"I reject\\\" onIcon=\\\"pi pi-check\\\" offIcon=\\\"pi pi-times\\\" [style]=\\\"&#123;'width':'150px'&#125;\\\"&gt;&lt;/p-toggleButton&gt;\\n</code>\\n</pre>\\n\\n<pre>\\n<code class=\\\"language-typescript\\\" pCode ngNonBindable>\\nexport class ToggleButtonDemo &#123;\\n\\n    checked1: boolean = false;\\n\\n    checked2: boolean = true;\\n&#125;\\n</code>\\n</pre>\\n        </p-tabPanel>\\n        <p-tabPanel header=\\\"StackBlitz\\\">\\n            <ng-template pTemplate=\\\"content\\\">\\n                <iframe src=\\\"https://stackblitz.com/edit/primeng-togglebutton-demo?embed=1\\\" style=\\\"width: 100%; height: 768px; border: none;\\\"></iframe>\\n            </ng-template>\\n        </p-tabPanel>\\n    </p-tabView>\\n</div>\\n\";","import {NgModule} from '@angular/core';\nimport {RouterModule} from '@angular/router'\nimport {ToggleButtonDemo} from './togglebuttondemo';\n\n@NgModule({\n\timports: [\n\t\tRouterModule.forChild([\n\t\t\t{path:'',component: ToggleButtonDemo}\n\t\t])\n\t],\n\texports: [\n\t\tRouterModule\n\t]\n})\nexport class ToggleButtonDemoRoutingModule {}\n","import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {FormsModule}  from '@angular/forms';\nimport {ToggleButtonDemo} from './togglebuttondemo';\nimport {ToggleButtonDemoRoutingModule} from './togglebuttondemo-routing.module';\nimport {ToggleButtonModule} from 'primeng/togglebutton';\nimport {TabViewModule} from 'primeng/tabview';\nimport {CodeHighlighterModule} from 'primeng/codehighlighter';\n\n@NgModule({\n\timports: [\n\t\tCommonModule,\n        FormsModule,\n\t\tToggleButtonDemoRoutingModule,\n        ToggleButtonModule,\n        TabViewModule,\n        CodeHighlighterModule\n\t],\n\tdeclarations: [\n\t\tToggleButtonDemo\n\t]\n})\nexport class ToggleButtonDemoModule {}\n","import {Component} from '@angular/core';\n\n@Component({\n    templateUrl: './togglebuttondemo.html'\n})\nexport class ToggleButtonDemo {\n    \n    checked1: boolean = false;\n\n    checked2: boolean = true;\n}"],"sourceRoot":"webpack:///"}