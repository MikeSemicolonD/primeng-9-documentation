{"version":3,"sources":["webpack:///src/app/showcase/components/treetable/treetablecolgroupdemo.html","webpack:///src/app/showcase/components/treetable/treetablecolresizedemo.html","webpack:///src/app/showcase/components/treetable/treetablecoltoggledemo.html","webpack:///src/app/showcase/components/treetable/treetablecontextmenudemo.html","webpack:///src/app/showcase/components/treetable/treetabledemo.html","webpack:///src/app/showcase/components/treetable/treetableeditdemo.html","webpack:///src/app/showcase/components/treetable/treetablefilterdemo.html","webpack:///src/app/showcase/components/treetable/treetableflexscrolldemo.html","webpack:///src/app/showcase/components/treetable/treetablelazydemo.html","webpack:///src/app/showcase/components/treetable/treetablepagedemo.html","webpack:///src/app/showcase/components/treetable/treetablereorderdemo.html","webpack:///src/app/showcase/components/treetable/treetableresponsivedemo.html","webpack:///src/app/showcase/components/treetable/treetablescrolldemo.html","webpack:///src/app/showcase/components/treetable/treetablesectionsdemo.html","webpack:///src/app/showcase/components/treetable/treetableselectiondemo.html","webpack:///src/app/showcase/components/treetable/treetablesortdemo.html","webpack:///src/app/showcase/components/treetable/treetablestyledemo.html","webpack:///src/app/showcase/components/treetable/treetablecolgroupdemo.ts","webpack:///src/app/showcase/components/treetable/treetablecolresizedemo.ts","webpack:///src/app/showcase/components/treetable/treetablecoltoggledemo.ts","webpack:///src/app/showcase/components/treetable/treetablecontextmenudemo.ts","webpack:///src/app/showcase/components/treetable/treetabledemo-routing.module.ts","webpack:///src/app/showcase/components/treetable/treetabledemo.module.ts","webpack:///src/app/showcase/components/treetable/treetabledemo.ts","webpack:///src/app/showcase/components/treetable/treetableeditdemo.ts","webpack:///src/app/showcase/components/treetable/treetablefilterdemo.ts","webpack:///src/app/showcase/components/treetable/treetableflexscrolldemo.ts","webpack:///src/app/showcase/components/treetable/treetablelazydemo.ts","webpack:///src/app/showcase/components/treetable/treetablepagedemo.ts","webpack:///src/app/showcase/components/treetable/treetablereorderdemo.ts","webpack:///src/app/showcase/components/treetable/treetableresponsivedemo.ts","webpack:///src/app/showcase/components/treetable/treetablescrolldemo.ts","webpack:///src/app/showcase/components/treetable/treetablesectionsdemo.ts","webpack:///src/app/showcase/components/treetable/treetableselectiondemo.ts","webpack:///src/app/showcase/components/treetable/treetablesortdemo.ts","webpack:///src/app/showcase/components/treetable/treetablestyledemo.ts"],"names":["TreeTableColGroupDemo","ngOnInit","sales","data","brand","lastYearSale","thisYearSale","lastYearProfit","thisYearProfit","expanded","children","template","TreeTableColResizeDemo","nodeService","getFilesystem","then","files","files1","files2","files3","files4","cols","field","header","width","TreeTableColToggleDemo","selectedColumns","TreeTableContextMenuDemo","messageService","items","label","icon","command","event","viewFile","selectedNode","toggleFile","node","add","severity","summary","detail","name","size","providers","TreeTableDemoRoutingModule","imports","forChild","path","component","exports","TreeTableDemoModule","declarations","TreeTableDemo","TreeTableEditDemo","TreeTableFilterDemo","TreeTableFlexScrollDemo","virtualFiles","Array","from","length","map","_","i","createNode","type","Math","ceil","random","j","TreeTableLazyDemo","totalRecords","loading","loadNodes","setTimeout","rows","first","floor","leaf","push","onNodeExpand","TreeTablePageDemo","TreeTableReorderDemo","TreeTableResponsiveDemo","TreeTableScrollDemo","files5","scrollableCols","frozenCols","showDialog","dialogVisible","TreeTableSectionsDemo","TreeTableSelectionDemo","nodeSelect","nodeUnselect","TreeTableSortDemo","TreeTableStyleDemo"],"mappings":"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","file":"components-treetable-treetabledemo-module-es5.js","sourcesContent":["export default \"<div class=\\\"content-section introduction\\\">\\n    <div>\\n        <span class=\\\"feature-title\\\">TreeTable <span class=\\\"subitem\\\">Column Group</span></span>\\n        <span>Columns can be grouped using rowspan and colspan properties.</span>\\n    </div>\\n</div>\\n\\n<div class=\\\"content-section implementation\\\">\\n    <p-treeTable [value]=\\\"sales\\\">\\n        <ng-template pTemplate=\\\"header\\\">\\n            <tr>\\n                <th rowspan=\\\"3\\\">Brand</th>\\n                <th colspan=\\\"4\\\">Sale Rate</th>\\n            </tr>\\n            <tr>\\n                <th colspan=\\\"2\\\">Sales</th>\\n                <th colspan=\\\"2\\\">Profits</th>\\n            </tr>\\n            <tr>\\n                <th>Last Year</th>\\n                <th>This Year</th>\\n                <th>Last Year</th>\\n                <th>This Year</th>\\n            </tr>\\n        </ng-template>\\n        <ng-template pTemplate=\\\"body\\\" let-rowNode let-rowData=\\\"rowData\\\">\\n            <tr>\\n                <td>\\n                    <p-treeTableToggler [rowNode]=\\\"rowNode\\\"></p-treeTableToggler>\\n                    {{rowData.brand}}\\n                </td>\\n                <td>{{rowData.lastYearSale}}</td>\\n                <td>{{rowData.thisYearSale}}</td>\\n                <td>{{rowData.lastYearProfit}}</td>\\n                <td>{{rowData.thisYearProfit}}</td>\\n            </tr>\\n        </ng-template>\\n        <ng-template pTemplate=\\\"footer\\\">\\n            <tr>\\n                <td colspan=\\\"3\\\">Totals</td>\\n                <td>$3,283,772</td>\\n                <td>$2,126,925</td>\\n            </tr>\\n        </ng-template>\\n    </p-treeTable>\\n</div>\\n\\n<div class=\\\"content-section documentation\\\">\\n    <p-tabView>\\n        <p-tabPanel header=\\\"treetablecolgroupdemo.ts\\\">\\n            <a href=\\\"https://github.com/primefaces/primeng/tree/master/src/app/showcase/components/treetable/treetablecolgroupdemo.ts\\\" class=\\\"btn-viewsource\\\" target=\\\"_blank\\\">\\n                <span>View on GitHub</span>\\n            </a>\\n            <a href=\\\"https://stackblitz.com/edit/primeng-treetablecolgroup-demo\\\" class=\\\"btn-viewsource\\\" style=\\\"margin-left: .5em;\\\" target=\\\"_blank\\\">\\n                <span>Edit in StackBlitz</span>\\n            </a>\\n<pre>\\n<code class=\\\"language-typescript\\\" pCode ngNonBindable>\\nexport class TreeTableColGroupDemo implements OnInit &#123;\\n\\n    sales: TreeNode[];\\n\\n    cols: any[];\\n\\n    ngOnInit() &#123;\\n        this.sales = [\\n            &#123;\\n                data: &#123; brand: 'Bliss', lastYearSale: '51%', thisYearSale: '40%', lastYearProfit: '$54,406.00', thisYearProfit: '$43,342'&#125;,\\n                expanded: true,\\n                children: [\\n                    &#123;\\n                        data: &#123; brand: 'Product A', lastYearSale: '25%', thisYearSale: '20%', lastYearProfit: '$34,406.00', thisYearProfit: '$23,342' &#125;,\\n                        expanded: true,\\n                        children: [\\n                            &#123;\\n                                data: &#123; brand: 'Product A-1', lastYearSale: '20%', thisYearSale: '10%', lastYearProfit: '$24,406.00', thisYearProfit: '$13,342' &#125;, \\n                            &#125;,\\n                            &#123;\\n                                data: &#123; brand: 'Product A-2', lastYearSale: '5%', thisYearSale: '10%', lastYearProfit: '$10,000.00', thisYearProfit: '$10,000' &#125;, \\n                            &#125;\\n                        ]\\n                    &#125;,\\n                    &#123;\\n                        data: &#123; brand: 'Product B', lastYearSale: '26%', thisYearSale: '20%', lastYearProfit: '$24,000.00', thisYearProfit: '$23,000' &#125;, \\n                    &#125;\\n                ]\\n            &#125;,\\n            &#123;\\n                data: &#123; brand: 'Fate', lastYearSale: '83%', thisYearSale: '96%', lastYearProfit: '$423,132', thisYearProfit: '$312,122' &#125;,\\n                children: [\\n                    &#123;\\n                        data: &#123; brand: 'Product X', lastYearSale: '50%', thisYearSale: '40%', lastYearProfit: '$223,132', thisYearProfit: '$156,061' &#125;, \\n                    &#125;,\\n                    &#123;\\n                        data: &#123; brand: 'Product Y', lastYearSale: '33%', thisYearSale: '56%', lastYearProfit: '$200,000', thisYearProfit: '$156,061' &#125;, \\n                    &#125;\\n                ]\\n            &#125;,\\n            &#123;\\n                data: &#123; brand: 'Ruby', lastYearSale: '38%', thisYearSale: '5%', lastYearProfit: '$12,321', thisYearProfit: '$8,500' &#125;,\\n                children: [\\n                    &#123;\\n                        data: &#123; brand: 'Product M', lastYearSale: '18%', thisYearSale: '2%', lastYearProfit: '$10,300', thisYearProfit: '$5,500' &#125;, \\n                    &#125;,\\n                    &#123;\\n                        data: &#123; brand: 'Product N', lastYearSale: '20%', thisYearSale: '3%', lastYearProfit: '$2,021', thisYearProfit: '$3,000' &#125;, \\n                    &#125;\\n                ]\\n            &#125;,\\n            &#123;\\n                data: &#123; brand: 'Sky', lastYearSale: '49%', thisYearSale: '22%', lastYearProfit: '$745,232', thisYearProfit: '$650,323' &#125;,\\n                children: [\\n                    &#123;\\n                        data: &#123; brand: 'Product P', lastYearSale: '20%', thisYearSale: '16%', lastYearProfit: '$345,232', thisYearProfit: '$350,000' &#125;, \\n                    &#125;,\\n                    &#123;\\n                        data: &#123; brand: 'Product R', lastYearSale: '29%', thisYearSale: '6%', lastYearProfit: '$400,009', thisYearProfit: '$300,323' &#125;, \\n                    &#125;\\n                ]\\n            &#125;,\\n            &#123;\\n                data: &#123; brand: 'Comfort', lastYearSale: '17%', thisYearSale: '79%', lastYearProfit: '$643,242', thisYearProfit: '500,332' &#125;,\\n                children: [\\n                    &#123;\\n                        data: &#123; brand: 'Product S', lastYearSale: '10%', thisYearSale: '40%', lastYearProfit: '$243,242', thisYearProfit: '$100,000' &#125;, \\n                    &#125;,\\n                    &#123;\\n                        data: &#123; brand: 'Product T', lastYearSale: '7%', thisYearSale: '39%', lastYearProfit: '$400,00', thisYearProfit: '$400,332' &#125;, \\n                    &#125;\\n                ]\\n            &#125;,\\n            &#123;\\n                data: &#123; brand: 'Merit', lastYearSale: '52%', thisYearSale: ' 65%', lastYearProfit: '$421,132', thisYearProfit: '$150,005' &#125;,\\n                children: [\\n                    &#123;\\n                        data: &#123; brand: 'Product L', lastYearSale: '20%', thisYearSale: '40%', lastYearProfit: '$121,132', thisYearProfit: '$100,000' &#125;, \\n                    &#125;,\\n                    &#123;\\n                        data: &#123; brand: 'Product G', lastYearSale: '32%', thisYearSale: '25%', lastYearProfit: '$300,000', thisYearProfit: '$50,005' &#125;, \\n                    &#125;\\n                ]\\n            &#125;,\\n            &#123;\\n                data: &#123; brand: 'Violet', lastYearSale: '82%', thisYearSale: '12%', lastYearProfit: '$131,211', thisYearProfit: '$100,214' &#125;,\\n                children: [\\n                    &#123;\\n                        data: &#123; brand: 'Product SH1', lastYearSale: '30%', thisYearSale: '6%', lastYearProfit: '$101,211', thisYearProfit: '$30,214' &#125;, \\n                    &#125;,\\n                    &#123;\\n                        data: &#123; brand: 'Product SH2', lastYearSale: '52%', thisYearSale: '6%', lastYearProfit: '$30,000', thisYearProfit: '$70,000' &#125;, \\n                    &#125;\\n                ]\\n            &#125;,\\n            &#123;\\n                data: &#123; brand: 'Dulce', lastYearSale: '44%', thisYearSale: '45%', lastYearProfit: '$66,442', thisYearProfit: '$53,322' &#125;,\\n                children: [\\n                    &#123;\\n                        data: &#123; brand: 'Product PN1', lastYearSale: '22%', thisYearSale: '25%', lastYearProfit: '$33,221', thisYearProfit: '$20,000' &#125;, \\n                    &#125;,\\n                    &#123;\\n                        data: &#123; brand: 'Product PN2', lastYearSale: '22%', thisYearSale: '25%', lastYearProfit: '$33,221', thisYearProfit: '$33,322' &#125;, \\n                    &#125;\\n                ]\\n            &#125;,\\n            &#123;\\n                data: &#123; brand: 'Solace', lastYearSale: '90%', thisYearSale: '56%', lastYearProfit: '$765,442', thisYearProfit: '$296,232' &#125;,\\n                children: [\\n                    &#123;\\n                        data: &#123; brand: 'Product HT1', lastYearSale: '60%', thisYearSale: '36%', lastYearProfit: '$465,000', thisYearProfit: '$150,653' &#125;, \\n                    &#125;,\\n                    &#123;\\n                        data: &#123; brand: 'Product HT2', lastYearSale: '30%', thisYearSale: '20%', lastYearProfit: '$300,442', thisYearProfit: '$145,579' &#125;, \\n                    &#125;\\n                ]\\n            &#125;,\\n            &#123;\\n                data:  &#123; brand: 'Essence', lastYearSale: '75%', thisYearSale: '54%', lastYearProfit: '$21,212', thisYearProfit: '$12,533' &#125;,\\n                children: [\\n                    &#123;\\n                        data: &#123; brand: 'Product TS1', lastYearSale: '50%', thisYearSale: '34%', lastYearProfit: '$11,000', thisYearProfit: '$8,562' &#125;, \\n                    &#125;,\\n                    &#123;\\n                        data: &#123; brand: 'Product TS2', lastYearSale: '25%', thisYearSale: '20%', lastYearProfit: '$11,212', thisYearProfit: '$3,971' &#125;, \\n                    &#125;\\n                ]\\n            &#125;\\n        ];\\n    &#125;;\\n&#125;\\n</code>\\n</pre>   \\n        </p-tabPanel>\\n\\n        <p-tabPanel header=\\\"treetablecolgroupdemo.html\\\">\\n            <a href=\\\"https://github.com/primefaces/primeng/tree/master/src/app/showcase/components/treetable/treetablecolgroupdemo.html\\\" class=\\\"btn-viewsource\\\" target=\\\"_blank\\\">\\n                <span>View on GitHub</span>\\n            </a>\\n            <a href=\\\"https://stackblitz.com/edit/primeng-treetablecolgroup-demo\\\" class=\\\"btn-viewsource\\\" style=\\\"margin-left: .5em;\\\" target=\\\"_blank\\\">\\n                <span>Edit in StackBlitz</span>\\n            </a>\\n<pre>\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\n&lt;p-treeTable [value]=\\\"sales\\\"&gt;\\n    &lt;ng-template pTemplate=\\\"header\\\"&gt;\\n        &lt;tr&gt;\\n            &lt;th rowspan=\\\"3\\\"&gt;Brand&lt;/th&gt;\\n            &lt;th colspan=\\\"4\\\"&gt;Sale Rate&lt;/th&gt;\\n        &lt;/tr&gt;\\n        &lt;tr&gt;\\n            &lt;th colspan=\\\"2\\\"&gt;Sales&lt;/th&gt;\\n            &lt;th colspan=\\\"2\\\"&gt;Profits&lt;/th&gt;\\n        &lt;/tr&gt;\\n        &lt;tr&gt;\\n            &lt;th&gt;Last Year&lt;/th&gt;\\n            &lt;th&gt;This Year&lt;/th&gt;\\n            &lt;th&gt;Last Year&lt;/th&gt;\\n            &lt;th&gt;This Year&lt;/th&gt;\\n        &lt;/tr&gt;\\n    &lt;/ng-template&gt;\\n    &lt;ng-template pTemplate=\\\"body\\\" let-rowNode let-rowData=\\\"rowData\\\"&gt;\\n        &lt;tr&gt;\\n            &lt;td&gt;\\n                &lt;p-treeTableToggler [rowNode]=\\\"rowNode\\\"&gt;&lt;/p-treeTableToggler&gt;\\n                &#123;&#123;rowData.brand&#125;&#125;\\n            &lt;/td&gt;\\n            &lt;td&gt;&#123;&#123;rowData.lastYearSale&#125;&#125;&lt;/td&gt;\\n            &lt;td&gt;&#123;&#123;rowData.thisYearSale&#125;&#125;&lt;/td&gt;\\n            &lt;td&gt;&#123;&#123;rowData.lastYearProfit&#125;&#125;&lt;/td&gt;\\n            &lt;td&gt;&#123;&#123;rowData.thisYearProfit&#125;&#125;&lt;/td&gt;\\n        &lt;/tr&gt;\\n    &lt;/ng-template&gt;\\n    &lt;ng-template pTemplate=\\\"footer\\\"&gt;\\n        &lt;tr&gt;\\n            &lt;td colspan=\\\"3\\\"&gt;Totals&lt;/td&gt;\\n            &lt;td&gt;$3,283,772&lt;/td&gt;\\n            &lt;td&gt;$2,126,925&lt;/td&gt;\\n        &lt;/tr&gt;\\n    &lt;/ng-template&gt;\\n&lt;/p-treeTable&gt;\\n</code>\\n</pre>\\n        </p-tabPanel>\\n        <p-tabPanel header=\\\"StackBlitz\\\">\\n            <ng-template pTemplate=\\\"content\\\">\\n                <iframe src=\\\"https://stackblitz.com/edit/primeng-treetablecolgroup-demo?embed=1\\\" style=\\\"width: 100%; height: 768px; border: none;\\\"></iframe>\\n            </ng-template>\\n        </p-tabPanel>\\n    </p-tabView>\\n</div>\";","export default \"<div class=\\\"content-section introduction\\\">\\n    <div>\\n        <span class=\\\"feature-title\\\">TreeTable <span class=\\\"subitem\\\">Column Resize</span></span>\\n        <span>Columns can be resized using drag drop by setting the resizableColumns to true. There are two resize modes; \\\"fit\\\" and \\\"expand\\\". Fit is the default one and \\n            the overall table width does not change when a column is resized. In \\\"expand\\\" mode, table width also changes along with the column width.</span>\\n    </div>\\n</div>\\n\\n<div class=\\\"content-section implementation\\\">\\n    <h3 class=\\\"first\\\">Fit Mode</h3>\\n    <p-treeTable [value]=\\\"files1\\\" [columns]=\\\"cols\\\" [resizableColumns]=\\\"true\\\">\\n        <ng-template pTemplate=\\\"header\\\" let-columns>\\n            <tr>\\n                <th *ngFor=\\\"let col of columns\\\" ttResizableColumn>\\n                    {{col.header}}\\n                </th>\\n            </tr>\\n        </ng-template>\\n        <ng-template pTemplate=\\\"body\\\" let-rowNode let-rowData=\\\"rowData\\\" let-columns=\\\"columns\\\">\\n            <tr>\\n                <td *ngFor=\\\"let col of columns; let i = index\\\">\\n                    <p-treeTableToggler [rowNode]=\\\"rowNode\\\" *ngIf=\\\"i == 0\\\"></p-treeTableToggler>\\n                    {{rowData[col.field]}}\\n                </td>\\n            </tr>            \\n        </ng-template>\\n    </p-treeTable>\\n\\n    <h3>Expand Mode</h3>\\n    <p-treeTable [value]=\\\"files2\\\" [columns]=\\\"cols\\\" [resizableColumns]=\\\"true\\\" columnResizeMode=\\\"expand\\\">\\n        <ng-template pTemplate=\\\"header\\\" let-columns>\\n            <tr>\\n                <th *ngFor=\\\"let col of columns\\\" ttResizableColumn>\\n                    {{col.header}}\\n                </th>\\n            </tr>\\n        </ng-template>\\n        <ng-template pTemplate=\\\"body\\\" let-rowNode let-rowData=\\\"rowData\\\" let-columns=\\\"columns\\\">\\n            <tr>\\n                <td *ngFor=\\\"let col of columns; let i = index\\\">\\n                    <p-treeTableToggler [rowNode]=\\\"rowNode\\\" *ngIf=\\\"i == 0\\\"></p-treeTableToggler>\\n                    {{rowData[col.field]}}\\n                </td>\\n            </tr>            \\n        </ng-template>\\n    </p-treeTable>\\n\\n    <h3>Scrollable</h3>\\n    <p-treeTable [value]=\\\"files3\\\" [columns]=\\\"cols\\\" [scrollable]=\\\"true\\\" scrollHeight=\\\"200px\\\" [resizableColumns]=\\\"true\\\">\\n        <ng-template pTemplate=\\\"colgroup\\\" let-columns>\\n            <colgroup>\\n                <col *ngFor=\\\"let col of columns\\\" >\\n            </colgroup>\\n        </ng-template>\\n        <ng-template pTemplate=\\\"header\\\" let-columns>\\n            <tr>\\n                <th *ngFor=\\\"let col of columns\\\" ttResizableColumn>\\n                    {{col.header}}\\n                </th>\\n            </tr>\\n        </ng-template>\\n        <ng-template pTemplate=\\\"body\\\" let-rowNode let-rowData=\\\"rowData\\\" let-columns=\\\"columns\\\">\\n            <tr>\\n                <td *ngFor=\\\"let col of columns; let i = index\\\">\\n                    <p-treeTableToggler [rowNode]=\\\"rowNode\\\" *ngIf=\\\"i == 0\\\"></p-treeTableToggler>\\n                    {{rowData[col.field]}}\\n                </td>\\n            </tr>            \\n        </ng-template>\\n    </p-treeTable>\\n\\n    <h3>Scrollable with Variable Width</h3>\\n    <p-treeTable [value]=\\\"files3\\\" [columns]=\\\"cols\\\" [scrollable]=\\\"true\\\" scrollHeight=\\\"200px\\\" [resizableColumns]=\\\"true\\\">\\n        <ng-template pTemplate=\\\"colgroup\\\" let-columns>\\n            <colgroup>\\n                <col *ngFor=\\\"let col of columns\\\" [style.width]=\\\"col.width\\\">\\n            </colgroup>\\n        </ng-template>\\n        <ng-template pTemplate=\\\"header\\\" let-columns>\\n            <tr>\\n                <th *ngFor=\\\"let col of columns\\\" ttResizableColumn>\\n                    {{col.header}}\\n                </th>\\n            </tr>\\n        </ng-template>\\n        <ng-template pTemplate=\\\"body\\\" let-rowNode let-rowData=\\\"rowData\\\" let-columns=\\\"columns\\\">\\n            <tr>\\n                <td *ngFor=\\\"let col of columns; let i = index\\\">\\n                    <p-treeTableToggler [rowNode]=\\\"rowNode\\\" *ngIf=\\\"i == 0\\\"></p-treeTableToggler>\\n                    {{rowData[col.field]}}\\n                </td>\\n            </tr>            \\n        </ng-template>\\n    </p-treeTable>\\n</div>\\n\\n<div class=\\\"content-section documentation\\\">\\n    <p-tabView>\\n        <p-tabPanel header=\\\"treetablecolresize.ts\\\">\\n            <a href=\\\"https://github.com/primefaces/primeng/tree/master/src/app/showcase/components/treetable/treetablecolresize.ts\\\" class=\\\"btn-viewsource\\\" target=\\\"_blank\\\">\\n                <span>View on GitHub</span>\\n            </a>\\n            <a href=\\\"https://stackblitz.com/edit/primeng-treetableresize-demo\\\" class=\\\"btn-viewsource\\\" style=\\\"margin-left: .5em;\\\" target=\\\"_blank\\\">\\n                <span>Edit in StackBlitz</span>\\n            </a>\\n<pre>\\n<code class=\\\"language-typescript\\\" pCode ngNonBindable>\\nexport class TreeTableColResizeDemo &#123;\\n\\n    files1: TreeNode[];\\n\\n    files2: TreeNode[];\\n\\n    files3: TreeNode[];\\n\\n    files4: TreeNode[];\\n\\n    cols: any[];\\n\\n    constructor(private nodeService: NodeService) &#123; &#125;\\n\\n    ngOnInit() &#123;\\n        this.nodeService.getFilesystem().then(files => this.files1 = files);\\n        this.nodeService.getFilesystem().then(files => this.files2 = files);\\n        this.nodeService.getFilesystem().then(files => this.files3 = files);\\n        this.nodeService.getFilesystem().then(files => this.files4 = files);\\n\\n        this.cols = [\\n            &#123; field: 'name', header: 'Name', width: '50%' &#125;,\\n            &#123; field: 'size', header: 'Size', width: '30%' &#125;,\\n            &#123; field: 'type', header: 'Type', width: '20%' &#125;,\\n        ];\\n    &#125;\\n&#125;\\n</code>\\n</pre>   \\n        </p-tabPanel>\\n        <p-tabPanel header=\\\"treetablecolresize.html\\\">\\n            <a href=\\\"https://github.com/primefaces/primeng/tree/master/src/app/showcase/components/treetable/treetablecolresize.html\\\" class=\\\"btn-viewsource\\\" target=\\\"_blank\\\">\\n                <span>View on GitHub</span>\\n            </a>\\n            <a href=\\\"https://stackblitz.com/edit/primeng-treetableresize-demo\\\" class=\\\"btn-viewsource\\\" style=\\\"margin-left: .5em;\\\" target=\\\"_blank\\\">\\n                <span>Edit in StackBlitz</span>\\n            </a>\\n<pre>\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\n&lt;h3 class=\\\"first\\\"&gt;Fit Mode&lt;/h3&gt;\\n&lt;p-treeTable [value]=\\\"files1\\\" [columns]=\\\"cols\\\" [resizableColumns]=\\\"true\\\"&gt;\\n    &lt;ng-template pTemplate=\\\"header\\\" let-columns&gt;\\n        &lt;tr&gt;\\n            &lt;th *ngFor=\\\"let col of columns\\\" ttResizableColumn&gt;\\n                &#123;&#123;col.header&#125;&#125;\\n            &lt;/th&gt;\\n        &lt;/tr&gt;\\n    &lt;/ng-template&gt;\\n    &lt;ng-template pTemplate=\\\"body\\\" let-rowNode let-rowData=\\\"rowData\\\" let-columns=\\\"columns\\\"&gt;\\n        &lt;tr&gt;\\n            &lt;td *ngFor=\\\"let col of columns; let i = index\\\"&gt;\\n                &lt;p-treeTableToggler [rowNode]=\\\"rowNode\\\" *ngIf=\\\"i == 0\\\"&gt;&lt;/p-treeTableToggler&gt;\\n                &#123;&#123;rowData[col.field]&#125;&#125;\\n            &lt;/td&gt;\\n        &lt;/tr&gt;            \\n    &lt;/ng-template&gt;\\n&lt;/p-treeTable&gt;\\n\\n&lt;h3&gt;Expand Mode&lt;/h3&gt;\\n&lt;p-treeTable [value]=\\\"files2\\\" [columns]=\\\"cols\\\" [resizableColumns]=\\\"true\\\" columnResizeMode=\\\"expand\\\"&gt;\\n    &lt;ng-template pTemplate=\\\"header\\\" let-columns&gt;\\n        &lt;tr&gt;\\n            &lt;th *ngFor=\\\"let col of columns\\\" ttResizableColumn&gt;\\n                &#123;&#123;col.header&#125;&#125;\\n            &lt;/th&gt;\\n        &lt;/tr&gt;\\n    &lt;/ng-template&gt;\\n    &lt;ng-template pTemplate=\\\"body\\\" let-rowNode let-rowData=\\\"rowData\\\" let-columns=\\\"columns\\\"&gt;\\n        &lt;tr&gt;\\n            &lt;td *ngFor=\\\"let col of columns; let i = index\\\"&gt;\\n                &lt;p-treeTableToggler [rowNode]=\\\"rowNode\\\" *ngIf=\\\"i == 0\\\"&gt;&lt;/p-treeTableToggler&gt;\\n                &#123;&#123;rowData[col.field]&#125;&#125;\\n            &lt;/td&gt;\\n        &lt;/tr&gt;            \\n    &lt;/ng-template&gt;\\n&lt;/p-treeTable&gt;\\n\\n&lt;h3&gt;Scrollable&lt;/h3&gt;\\n&lt;p-treeTable [value]=\\\"files3\\\" [columns]=\\\"cols\\\" [scrollable]=\\\"true\\\" scrollHeight=\\\"200px\\\" [resizableColumns]=\\\"true\\\"&gt;\\n    &lt;ng-template pTemplate=\\\"colgroup\\\" let-columns&gt;\\n        &lt;colgroup&gt;\\n            &lt;col *ngFor=\\\"let col of columns\\\" &gt;\\n        &lt;/colgroup&gt;\\n    &lt;/ng-template&gt;\\n    &lt;ng-template pTemplate=\\\"header\\\" let-columns&gt;\\n        &lt;tr&gt;\\n            &lt;th *ngFor=\\\"let col of columns\\\" ttResizableColumn&gt;\\n                &#123;&#123;col.header&#125;&#125;\\n            &lt;/th&gt;\\n        &lt;/tr&gt;\\n    &lt;/ng-template&gt;\\n    &lt;ng-template pTemplate=\\\"body\\\" let-rowNode let-rowData=\\\"rowData\\\" let-columns=\\\"columns\\\"&gt;\\n        &lt;tr&gt;\\n            &lt;td *ngFor=\\\"let col of columns; let i = index\\\"&gt;\\n                &lt;p-treeTableToggler [rowNode]=\\\"rowNode\\\" *ngIf=\\\"i == 0\\\"&gt;&lt;/p-treeTableToggler&gt;\\n                &#123;&#123;rowData[col.field]&#125;&#125;\\n            &lt;/td&gt;\\n        &lt;/tr&gt;            \\n    &lt;/ng-template&gt;\\n&lt;/p-treeTable&gt;\\n\\n&lt;h3&gt;Scrollable with Variable Width&lt;/h3&gt;\\n&lt;p-treeTable [value]=\\\"files3\\\" [columns]=\\\"cols\\\" [scrollable]=\\\"true\\\" scrollHeight=\\\"200px\\\" [resizableColumns]=\\\"true\\\"&gt;\\n    &lt;ng-template pTemplate=\\\"colgroup\\\" let-columns&gt;\\n        &lt;colgroup&gt;\\n            &lt;col *ngFor=\\\"let col of columns\\\" [style.width]=\\\"col.width\\\"&gt;\\n        &lt;/colgroup&gt;\\n    &lt;/ng-template&gt;\\n    &lt;ng-template pTemplate=\\\"header\\\" let-columns&gt;\\n        &lt;tr&gt;\\n            &lt;th *ngFor=\\\"let col of columns\\\" ttResizableColumn&gt;\\n                &#123;&#123;col.header&#125;&#125;\\n            &lt;/th&gt;\\n        &lt;/tr&gt;\\n    &lt;/ng-template&gt;\\n    &lt;ng-template pTemplate=\\\"body\\\" let-rowNode let-rowData=\\\"rowData\\\" let-columns=\\\"columns\\\"&gt;\\n        &lt;tr&gt;\\n            &lt;td *ngFor=\\\"let col of columns; let i = index\\\"&gt;\\n                &lt;p-treeTableToggler [rowNode]=\\\"rowNode\\\" *ngIf=\\\"i == 0\\\"&gt;&lt;/p-treeTableToggler&gt;\\n                &#123;&#123;rowData[col.field]&#125;&#125;\\n            &lt;/td&gt;\\n        &lt;/tr&gt;            \\n    &lt;/ng-template&gt;\\n&lt;/p-treeTable&gt;\\n</code>\\n</pre>\\n        </p-tabPanel>\\n        <p-tabPanel header=\\\"StackBlitz\\\">\\n            <ng-template pTemplate=\\\"content\\\">\\n                <iframe src=\\\"https://stackblitz.com/edit/primeng-treetableresize-demo?embed=1\\\" style=\\\"width: 100%; height: 768px; border: none;\\\"></iframe>\\n            </ng-template>\\n        </p-tabPanel>\\n    </p-tabView>\\n</div>\";","export default \"<div class=\\\"content-section introduction\\\">\\n    <div>\\n        <span class=\\\"feature-title\\\">TreeTable <span class=\\\"subitem\\\">Column Toggle</span></span>\\n        <span>This demo uses a multiselect component to implement toggleable columns.</span>\\n    </div>\\n</div>\\n\\n<div class=\\\"content-section implementation\\\">\\n    <p-treeTable [value]=\\\"files\\\" [columns]=\\\"selectedColumns\\\">\\n        <ng-template pTemplate=\\\"caption\\\">\\n            <div style=\\\"text-align:left\\\">\\n                <p-multiSelect [options]=\\\"cols\\\" [(ngModel)]=\\\"selectedColumns\\\" optionLabel=\\\"header\\\"\\n                            selectedItemsLabel=\\\"{0} columns selected\\\" [style]=\\\"{minWidth: '200px'}\\\" defaultLabel=\\\"Choose Columns\\\"></p-multiSelect>\\n            </div>\\n        </ng-template>\\n        <ng-template pTemplate=\\\"header\\\" let-columns>\\n            <tr>\\n                <th *ngFor=\\\"let col of columns\\\">\\n                    {{col.header}}\\n                </th>\\n            </tr>\\n        </ng-template>\\n        <ng-template pTemplate=\\\"body\\\" let-rowNode let-rowData=\\\"rowData\\\" let-columns=\\\"columns\\\">\\n            <tr>\\n                <td *ngFor=\\\"let col of columns; let i = index\\\">\\n                    <p-treeTableToggler [rowNode]=\\\"rowNode\\\" *ngIf=\\\"i == 0\\\"></p-treeTableToggler>\\n                    {{rowData[col.field]}}\\n                </td>\\n            </tr>            \\n        </ng-template>\\n    </p-treeTable>\\n</div>\\n\\n<div class=\\\"content-section documentation\\\">\\n    <p-tabView>\\n        <p-tabPanel header=\\\"treetablecoltoggle.ts\\\">\\n            <a href=\\\"https://github.com/primefaces/primeng/tree/master/src/app/showcase/components/treetable/treetablecoltoggle.ts\\\" class=\\\"btn-viewsource\\\" target=\\\"_blank\\\">\\n                <span>View on GitHub</span>\\n            </a>\\n            <a href=\\\"https://stackblitz.com/edit/primeng-treetabletoggle-demo\\\" class=\\\"btn-viewsource\\\" style=\\\"margin-left: .5em;\\\" target=\\\"_blank\\\">\\n                <span>Edit in StackBlitz</span>\\n            </a>\\n<pre>\\n<code class=\\\"language-typescript\\\" pCode ngNonBindable>\\nexport class TreeTableColToggleDemo &#123;\\n\\n    files: TreeNode[];\\n\\n    cols: any[];\\n\\n    selectedColumns: any[];\\n\\n    constructor(private nodeService: NodeService) &#123; &#125;\\n\\n    ngOnInit() &#123;\\n        this.nodeService.getFilesystem().then(files => this.files = files);\\n\\n        this.cols = [\\n            &#123; field: 'name', header: 'Name' &#125;,\\n            &#123; field: 'size', header: 'Size' &#125;,\\n            &#123; field: 'type', header: 'Type' &#125;\\n        ];\\n\\n        this.selectedColumns = this.cols;\\n    &#125;\\n&#125;\\n</code>\\n</pre>   \\n        </p-tabPanel>\\n        <p-tabPanel header=\\\"treetablecoltoggle.html\\\">\\n            <a href=\\\"https://github.com/primefaces/primeng/tree/master/src/app/showcase/components/treetable/treetablecoltoggle.html\\\" class=\\\"btn-viewsource\\\" target=\\\"_blank\\\">\\n                <span>View on GitHub</span>\\n            </a>\\n            <a href=\\\"https://stackblitz.com/edit/primeng-treetabletoggle-demo\\\" class=\\\"btn-viewsource\\\" style=\\\"margin-left: .5em;\\\" target=\\\"_blank\\\">\\n                <span>Edit in StackBlitz</span>\\n            </a>\\n<pre>\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\n&lt;p-treeTable [value]=\\\"files\\\" [columns]=\\\"selectedColumns\\\"&gt;\\n    &lt;ng-template pTemplate=\\\"caption\\\"&gt;\\n        &lt;div style=\\\"text-align:left\\\"&gt;\\n            &lt;p-multiSelect [options]=\\\"cols\\\" [(ngModel)]=\\\"selectedColumns\\\" optionLabel=\\\"header\\\"\\n                        selectedItemsLabel=\\\"&#123;0&#125; columns selected\\\" [style]=\\\"&#123;minWidth: '200px'&#125;\\\" defaultLabel=\\\"Choose Columns\\\"&gt;&lt;/p-multiSelect&gt;\\n        &lt;/div&gt;\\n    &lt;/ng-template&gt;\\n    &lt;ng-template pTemplate=\\\"header\\\" let-columns&gt;\\n        &lt;tr&gt;\\n            &lt;th *ngFor=\\\"let col of columns\\\"&gt;\\n                &#123;&#123;col.header&#125;&#125;\\n            &lt;/th&gt;\\n        &lt;/tr&gt;\\n    &lt;/ng-template&gt;\\n    &lt;ng-template pTemplate=\\\"body\\\" let-rowNode let-rowData=\\\"rowData\\\" let-columns=\\\"columns\\\"&gt;\\n        &lt;tr&gt;\\n            &lt;td *ngFor=\\\"let col of columns; let i = index\\\"&gt;\\n                &lt;p-treeTableToggler [rowNode]=\\\"rowNode\\\" *ngIf=\\\"i == 0\\\"&gt;&lt;/p-treeTableToggler&gt;\\n                &#123;&#123;rowData[col.field]&#125;&#125;\\n            &lt;/td&gt;\\n        &lt;/tr&gt;            \\n    &lt;/ng-template&gt;\\n&lt;/p-treeTable&gt;\\n</code>\\n</pre>\\n        </p-tabPanel>\\n        <p-tabPanel header=\\\"StackBlitz\\\">\\n            <ng-template pTemplate=\\\"content\\\">\\n                <iframe src=\\\"https://stackblitz.com/edit/primeng-treetabletoggle-demo?embed=1\\\" style=\\\"width: 100%; height: 768px; border: none;\\\"></iframe>\\n            </ng-template>\\n        </p-tabPanel>\\n    </p-tabView>\\n</div>\";","export default \"<div class=\\\"content-section introduction\\\">\\n    <div>\\n        <span class=\\\"feature-title\\\">TreeTable <span class=\\\"subitem\\\">ContextMenu</span></span>\\n        <span>TreeTable has exclusive integration with ContextMenu.</span>\\n    </div>\\n</div>\\n\\n<div class=\\\"content-section implementation\\\">\\n    <p-toast></p-toast>\\n\\n    <p-treeTable [value]=\\\"files\\\" [columns]=\\\"cols\\\" dataKey=\\\"name\\\" [(contextMenuSelection)]=\\\"selectedNode\\\" [contextMenu]=\\\"cm\\\">\\n        <ng-template pTemplate=\\\"header\\\" let-columns>\\n            <tr>\\n                <th *ngFor=\\\"let col of columns\\\">\\n                    {{col.header}}\\n                </th>\\n            </tr>\\n        </ng-template>\\n        <ng-template pTemplate=\\\"body\\\" let-rowNode let-rowData=\\\"rowData\\\" let-columns=\\\"columns\\\">\\n            <tr [ttContextMenuRow]=\\\"rowNode\\\">\\n                <td *ngFor=\\\"let col of columns; let i = index\\\">\\n                    <p-treeTableToggler [rowNode]=\\\"rowNode\\\" *ngIf=\\\"i == 0\\\"></p-treeTableToggler>\\n                    {{rowData[col.field]}}\\n                </td>\\n            </tr>\\n        </ng-template>\\n    </p-treeTable>\\n\\n    <p-contextMenu #cm [model]=\\\"items\\\"></p-contextMenu>\\n</div>\\n\\n<div class=\\\"content-section documentation\\\">\\n    <p-tabView>\\n        <p-tabPanel header=\\\"treetablecontextmenudemo.ts\\\">\\n            <a href=\\\"https://github.com/primefaces/primeng/tree/master/src/app/showcase/components/treetable/treetablecontextmenudemo.ts\\\" class=\\\"btn-viewsource\\\" target=\\\"_blank\\\">\\n                <span>View on GitHub</span>\\n            </a>\\n            <a href=\\\"https://stackblitz.com/edit/primeng-treetablecontextmenu-demo\\\" class=\\\"btn-viewsource\\\" style=\\\"margin-left: .5em;\\\" target=\\\"_blank\\\">\\n                <span>Edit in StackBlitz</span>\\n            </a>\\n<pre>\\n<code class=\\\"language-typescript\\\" pCode ngNonBindable>\\nexport class TreeTableContextMenuDemo &#123;\\n\\n    files: TreeNode[];\\n\\n    selectedNode: TreeNode;\\n\\n    cols: any[];\\n\\n    items: MenuItem[];\\n\\n    constructor(private nodeService: NodeService, private messageService: MessageService) &#123; &#125;\\n\\n    ngOnInit() &#123;\\n        this.nodeService.getFilesystem().then(files => this.files = files);\\n\\n        this.cols = [\\n            &#123; field: 'name', header: 'Name' &#125;,\\n            &#123; field: 'size', header: 'Size' &#125;,\\n            &#123; field: 'type', header: 'Type' &#125;\\n        ];\\n\\n        this.items = [\\n            &#123; label: 'View', icon: 'pi pi-search', command: (event) => this.viewFile(this.selectedNode) &#125;,\\n            &#123; label: 'Toggle', icon: 'pi pi-sort', command: (event) => this.toggleFile(this.selectedNode) &#125;\\n        ];\\n    &#125;\\n\\n    viewFile(node) &#123;\\n        this.messageService.add(&#123; severity: 'info', summary: 'File Selected', detail: node.data.name + ' - ' + node.data.size &#125;);\\n    &#125;\\n\\n    toggleFile(node) &#123;\\n        node.expanded = !node.expanded;\\n        this.files = [...this.files];\\n    &#125;\\n&#125;\\n</code>\\n</pre>\\n        </p-tabPanel>\\n\\n        <p-tabPanel header=\\\"treetablecontextmenudemo.html\\\">\\n            <a href=\\\"https://github.com/primefaces/primeng/tree/master/src/app/showcase/components/treetable/treetablecontextmenudemo.html\\\" class=\\\"btn-viewsource\\\" target=\\\"_blank\\\">\\n                <span>View on GitHub</span>\\n            </a>\\n            <a href=\\\"https://stackblitz.com/edit/primeng-treetablecontextmenu-demo\\\" class=\\\"btn-viewsource\\\" style=\\\"margin-left: .5em;\\\" target=\\\"_blank\\\">\\n                <span>Edit in StackBlitz</span>\\n            </a>\\n<pre>\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\n&lt;p-toast [style]=\\\"&#123;marginTop: '80px'&#125;\\\"&gt;&lt;/p-toast&gt;\\n\\n&lt;p-treeTable [value]=\\\"files\\\" [columns]=\\\"cols\\\" dataKey=\\\"name\\\" [(contextMenuSelection)]=\\\"selectedNode\\\" [contextMenu]=\\\"cm\\\"&gt;\\n    &lt;ng-template pTemplate=\\\"header\\\" let-columns&gt;\\n        &lt;tr&gt;\\n            &lt;th *ngFor=\\\"let col of columns\\\"&gt;\\n                &#123;&#123;col.header&#125;&#125;\\n            &lt;/th&gt;\\n        &lt;/tr&gt;\\n    &lt;/ng-template&gt;\\n    &lt;ng-template pTemplate=\\\"body\\\" let-rowNode let-rowData=\\\"rowData\\\" let-columns=\\\"columns\\\"&gt;\\n        &lt;tr [ttContextMenuRow]=\\\"rowNode\\\"&gt;\\n            &lt;td *ngFor=\\\"let col of columns; let i = index\\\"&gt;\\n                &lt;p-treeTableToggler [rowNode]=\\\"rowNode\\\" *ngIf=\\\"i == 0\\\"&gt;&lt;/p-treeTableToggler&gt;\\n                &#123;&#123;rowData[col.field]&#125;&#125;\\n            &lt;/td&gt;\\n        &lt;/tr&gt;\\n    &lt;/ng-template&gt;\\n&lt;/p-treeTable&gt;\\n\\n&lt;p-contextMenu #cm [model]=\\\"items\\\"&gt;&lt;/p-contextMenu&gt;\\n</code>\\n</pre>\\n        </p-tabPanel>\\n        <p-tabPanel header=\\\"StackBlitz\\\">\\n            <ng-template pTemplate=\\\"content\\\">\\n                <iframe src=\\\"https://stackblitz.com/edit/primeng-treetablecontextmenu-demo?embed=1\\\" style=\\\"width: 100%; height: 768px; border: none;\\\"></iframe>\\n            </ng-template>\\n        </p-tabPanel>\\n    </p-tabView>\\n</div>\\n\";","export default \"<div class=\\\"content-section introduction\\\">\\n    <div>\\n        <span class=\\\"feature-title\\\">TreeTable</span>\\n        <span>TreeTable is used to display hierarchical data in tabular format.</span>\\n    </div>\\n</div>\\n\\n<div class=\\\"content-section implementation\\\">\\n    <h3 class=\\\"first\\\">Basic</h3>\\n    <p-treeTable [value]=\\\"files1\\\">\\n        <ng-template pTemplate=\\\"header\\\">\\n            <tr>\\n                <th>Name</th>\\n                <th>Size</th>\\n                <th>Type</th>\\n            </tr>\\n        </ng-template>\\n        <ng-template pTemplate=\\\"body\\\" let-rowNode let-rowData=\\\"rowData\\\">\\n            <tr [ttRow]=\\\"rowNode\\\">\\n                <td>\\n                    <p-treeTableToggler [rowNode]=\\\"rowNode\\\"></p-treeTableToggler>\\n                    {{rowData.name}}\\n                </td>\\n                <td>{{rowData.size}}</td>\\n                <td>{{rowData.type}}</td>\\n            </tr>\\n        </ng-template>\\n    </p-treeTable>\\n\\n    <h3>Dynamic Columns</h3>\\n    <p-treeTable [value]=\\\"files2\\\" [columns]=\\\"cols\\\">\\n        <ng-template pTemplate=\\\"header\\\" let-columns>\\n            <tr>\\n                <th *ngFor=\\\"let col of columns\\\">\\n                    {{col.header}}\\n                </th>\\n            </tr>\\n        </ng-template>\\n        <ng-template pTemplate=\\\"body\\\" let-rowNode let-rowData=\\\"rowData\\\" let-columns=\\\"columns\\\">\\n            <tr [ttRow]=\\\"rowNode\\\">\\n                <td *ngFor=\\\"let col of columns; let i = index\\\">\\n                    <p-treeTableToggler [rowNode]=\\\"rowNode\\\" *ngIf=\\\"i == 0\\\"></p-treeTableToggler>\\n                    {{rowData[col.field]}}\\n                </td>\\n            </tr>\\n        </ng-template>\\n    </p-treeTable>\\n</div>\\n\\n<div class=\\\"content-section documentation\\\">\\n    <p-tabView>\\n        <p-tabPanel header=\\\"Documentation\\\">\\n            <h3>CDK</h3>\\n            <p>VirtualScrolling depends on @angular/cdk's ScrollingModule so begin with installing CDK if not already installed.</p>\\n<pre>\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\nnpm install @angular/cdk --save\\n</code>\\n</pre>\\n\\n            <h3>Import</h3>\\n<pre>\\n<code class=\\\"language-typescript\\\" pCode ngNonBindable>\\nimport &#123;TreeTableModule&#125; from 'primeng/treetable';\\nimport &#123;TreeNode&#125; from 'primeng/api';\\n</code>\\n</pre>\\n\\n            <h3>Getting Started</h3>\\n            <p>TreeTable component requires a collection of TreeNode objects as its value and templates for the presentation. TreeNode API represents a node with various properties, here is the list of properties utilized by the TreeTable.</p>\\n<pre>\\n<code class=\\\"language-typescript\\\" pCode ngNonBindable>\\nexport interface TreeNode &#123;\\n    data?: any;\\n    children?: TreeNode[];\\n    leaf?: boolean;\\n    expanded?: boolean;\\n&#125;\\n</code>\\n</pre>\\n\\n            <p>Usually nodes will be loaded from a remote datasoure, an example NodeService that fetches the data from a json file would be;</p>\\n<pre>\\n<code class=\\\"language-typescript\\\" pCode ngNonBindable>\\n@Injectable()\\nexport class NodeService &#123;\\n\\n    constructor(private http: Http) &#123;&#125;\\n\\n    getFilesystem() &#123;\\n        return this.http.get('showcase/resources/data/filesystem.json')\\n                    .toPromise()\\n                    .then(res => &lt;TreeNode[]&gt; res.json().data);\\n    &#125;\\n&#125;\\n</code>\\n</pre>\\n\\n        <p>The filesystem.json file consists of sample data. In a real application, this should be a dynamic response generated from the remote call.</p>\\n<pre>\\n<code class=\\\"language-javascript\\\" pCode ngNonBindable>\\n&#123;\\n    \\\"data\\\":\\n    [\\n        &#123;\\n            \\\"data\\\":&#123;\\n                \\\"name\\\":\\\"Documents\\\",\\n                \\\"size\\\":\\\"75kb\\\",\\n                \\\"type\\\":\\\"Folder\\\"\\n            &#125;,\\n            \\\"children\\\":[\\n                &#123;\\n                    \\\"data\\\":&#123;\\n                        \\\"name\\\":\\\"Work\\\",\\n                        \\\"size\\\":\\\"55kb\\\",\\n                        \\\"type\\\":\\\"Folder\\\"\\n                    &#125;,\\n                    \\\"children\\\":[\\n                        &#123;\\n                            \\\"data\\\":&#123;\\n                                \\\"name\\\":\\\"Expenses.doc\\\",\\n                                \\\"size\\\":\\\"30kb\\\",\\n                                \\\"type\\\":\\\"Document\\\"\\n                            &#125;\\n                        &#125;,\\n                        &#123;\\n                            \\\"data\\\":&#123;\\n                                \\\"name\\\":\\\"Resume.doc\\\",\\n                                \\\"size\\\":\\\"25kb\\\",\\n                                \\\"type\\\":\\\"Resume\\\"\\n                            &#125;\\n                        &#125;\\n                    ]\\n                &#125;,\\n                &#123;\\n                    \\\"data\\\":&#123;\\n                        \\\"name\\\":\\\"Home\\\",\\n                        \\\"size\\\":\\\"20kb\\\",\\n                        \\\"type\\\":\\\"Folder\\\"\\n                    &#125;,\\n                    \\\"children\\\":[\\n                        &#123;\\n                            \\\"data\\\":&#123;\\n                                \\\"name\\\":\\\"Invoices\\\",\\n                                \\\"size\\\":\\\"20kb\\\",\\n                                \\\"type\\\":\\\"Text\\\"\\n                            &#125;\\n                        &#125;\\n                    ]\\n                &#125;\\n            ]\\n        &#125;,\\n        &#123;\\n            \\\"data\\\":&#123;\\n                \\\"name\\\":\\\"Pictures\\\",\\n                \\\"size\\\":\\\"150kb\\\",\\n                \\\"type\\\":\\\"Folder\\\"\\n            &#125;,\\n            \\\"children\\\":[\\n                &#123;\\n                    \\\"data\\\":&#123;\\n                        \\\"name\\\":\\\"barcelona.jpg\\\",\\n                        \\\"size\\\":\\\"90kb\\\",\\n                        \\\"type\\\":\\\"Picture\\\"\\n                    &#125;\\n                &#125;,\\n                &#123;\\n                    \\\"data\\\":&#123;\\n                        \\\"name\\\":\\\"primeui.png\\\",\\n                        \\\"size\\\":\\\"30kb\\\",\\n                        \\\"type\\\":\\\"Picture\\\"\\n                    &#125;\\n                &#125;,\\n                &#123;\\n                    \\\"data\\\":&#123;\\n                        \\\"name\\\":\\\"optimus.jpg\\\",\\n                        \\\"size\\\":\\\"30kb\\\",\\n                        \\\"type\\\":\\\"Picture\\\"\\n                    &#125;\\n                &#125;\\n            ]\\n        &#125;\\n    ]\\n&#125;\\n</code>\\n</pre>\\n\\n<p>Files get loaded from a service and then bound to the <i>value</i> property whereas <i>header</i> and <i>body</i> templates are used to define the content of these sections.</p>\\n\\n<pre>\\n<code class=\\\"language-typescript\\\" pCode ngNonBindable>\\nexport class TreeTableDemoComponent implements OnInit &#123;\\n\\n    files: TreeNode[];\\n\\n    constructor(private nodeService: NodeService) &#123;&#125;\\n\\n    ngOnInit() &#123;\\n        this.nodeService.getFileSystem().then(files => this.files = files);\\n    &#125;\\n\\n&#125;\\n</code>\\n</pre>\\n\\n        <p>Body template gets the following parameters;</p>\\n        <ul>\\n            <li><strong>$implicit</strong>: Wrapper object of a node used to serialized a TreeNode.</li>\\n            <li><strong>node</strong>: TreeNode instance.</li>\\n            <li><strong>rowData</strong>: Data of the TreeNode instance.</li>\\n            <li><strong>columns</strong>: Columns of the TreeTable.</li>\\n        </ul>\\n\\n        <p>Toggle icon is configured using the p-treeTableToggler by binding the rowNode instance. Most of the time, toggler icon is added to the first column however there is no restriction on where the toggler should be located inside the row.</p>\\n<pre>\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\n&lt;p-treeTable [value]=\\\"files\\\"&gt;\\n    &lt;ng-template pTemplate=\\\"header\\\"&gt;\\n        &lt;tr&gt;\\n            &lt;th&gt;Name&lt;/th&gt;\\n            &lt;th&gt;Size&lt;/th&gt;\\n            &lt;th&gt;Type&lt;/th&gt;\\n        &lt;/tr&gt;\\n    &lt;/ng-template&gt;\\n    &lt;ng-template pTemplate=\\\"body\\\" let-rowNode let-rowData=\\\"rowData\\\"&gt;\\n        &lt;tr&gt;\\n            &lt;td&gt;\\n                &lt;p-treeTableToggler [rowNode]=\\\"rowNode\\\"&gt;&lt;/p-treeTableToggler&gt;\\n                &#123;&#123;rowData.name&#125;&#125;\\n            &lt;/td&gt;\\n            &lt;td&gt;&#123;&#123;rowData.size&#125;&#125;&lt;/td&gt;\\n            &lt;td&gt;&#123;&#123;rowData.type&#125;&#125;&lt;/td&gt;\\n        &lt;/tr&gt;\\n    &lt;/ng-template&gt;\\n&lt;/p-treeTable&gt;\\n</code>\\n</pre>\\n\\n        <h3>Dynamic Columns</h3>\\n        <p>Instead of configuring columns one by one, a simple ngFor can be used to implement dynamic columns. cols property below is an array of objects that represent a column,\\n            only property that table component uses is field, rest of the properties like header depend on your choice.\\n        </p>\\n\\n<pre>\\n<code class=\\\"language-typescript\\\" pCode ngNonBindable>\\nexport class TreeTableDemo implements OnInit &#123;\\n\\n    files: TreeNode[];\\n\\n    cols: any[];\\n\\n    constructor(private nodeService: NodeService) &#123; &#125;\\n\\n    ngOnInit() &#123;\\n        this.nodeService.getFilesystem().then(files => this.files = files);\\n\\n        this.cols = [\\n            &#123; field: 'name', header: 'Name' &#125;,\\n            &#123; field: 'size', header: 'Size' &#125;,\\n            &#123; field: 'type', header: 'Type' &#125;\\n        ];\\n    &#125;\\n&#125;\\n</code>\\n</pre>\\n\\n<p>There are two ways to render dynamic columns, since cols property is in the scope of component you can just simply bind it to ngFor directive to generate the structure.</p>\\n\\n<pre>\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\n&lt;p-treeTable [value]=\\\"files\\\"&gt;\\n    &lt;ng-template pTemplate=\\\"header\\\" let-columns&gt;\\n        &lt;tr&gt;\\n            &lt;th *ngFor=\\\"let col of cols\\\"&gt;\\n                &#123;&#123;col.header&#125;&#125;\\n            &lt;/th&gt;\\n        &lt;/tr&gt;\\n    &lt;/ng-template&gt;\\n    &lt;ng-template pTemplate=\\\"body\\\" let-rowNode let-rowData=\\\"rowData\\\"&gt;\\n        &lt;tr&gt;\\n            &lt;td *ngFor=\\\"let col of cols; let i = index\\\"&gt;\\n                &lt;p-treeTableToggler [rowNode]=\\\"rowNode\\\" *ngIf=\\\"i == 0\\\"&gt;&lt;/p-treeTableToggler&gt;\\n                &#123;&#123;rowData[col.field]&#125;&#125;\\n            &lt;/td&gt;\\n        &lt;/tr&gt;\\n    &lt;/ng-template&gt;\\n&lt;/p-treeTable&gt;\\n</code>\\n</pre>\\n\\n            <p>Other alternative is binding the cols array to the <i>columns</i> property and then defining a template variable to access it within your templates.\\n                There is only 1 case where this is required which is reorderable columns.\\n            </p>\\n<pre>\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\n&lt;p-treeTable [value]=\\\"files\\\" [columns]=\\\"cols\\\"&gt;\\n    &lt;ng-template pTemplate=\\\"header\\\" let-columns&gt;\\n        &lt;tr&gt;\\n            &lt;th *ngFor=\\\"let col of columns\\\"&gt;\\n                &#123;&#123;col.header&#125;&#125;\\n            &lt;/th&gt;\\n        &lt;/tr&gt;\\n    &lt;/ng-template&gt;\\n    &lt;ng-template pTemplate=\\\"body\\\" let-rowNode let-rowData=\\\"rowData\\\" let-columns=\\\"columns\\\"&gt;\\n        &lt;tr&gt;\\n            &lt;td *ngFor=\\\"let col of columns; let i = index\\\"&gt;\\n                &lt;p-treeTableToggler [rowNode]=\\\"rowNode\\\" *ngIf=\\\"i == 0\\\"&gt;&lt;/p-treeTableToggler&gt;\\n                &#123;&#123;rowData[col.field]&#125;&#125;\\n            &lt;/td&gt;\\n        &lt;/tr&gt;\\n    &lt;/ng-template&gt;\\n&lt;/p-treeTable&gt;\\n</code>\\n</pre>\\n\\n            <p>Tip: Use ngSwitch to customize the column content per dynamic column.</p>\\n\\n            <h3>Table Layout</h3>\\n            <p>For performance reasons, default table-layout is fixed meaning the cell widths do not depend on their content. If you require cells to scale based on their contents\\n                set <i>autoLayout</i> property to true. Note that for scrollable tables or tables with resizable columns auto layout is not supported.\\n            </p>\\n\\n            <h3>Templates</h3>\\n            <p>TreeTable is a template driven component with named templates such as header and body that we've used so far. Templates grant a great level of customization and flexibility\\n                where you have total control over the presentation while table handles the features such as paging, sorting and more. This speeds up development without sacrifing\\n                flexibility. Here is the full list of available templates.</p>\\n\\n            <div class=\\\"doc-tablewrapper\\\">\\n                <table class=\\\"doc-table\\\">\\n                    <thead>\\n                        <tr>\\n                            <th>Name</th>\\n                            <th>Parameters</th>\\n                            <th>Description</th>\\n                        </tr>\\n                    </thead>\\n                    <tbody>\\n                        <tr>\\n                            <td>caption</td>\\n                            <td>-</td>\\n                            <td>Caption content of the table.</td>\\n                        </tr>\\n                        <tr>\\n                            <td>header</td>\\n                            <td>$implicit: Columns</td>\\n                            <td>Content of the thead element.</td>\\n                        </tr>\\n                        <tr>\\n                            <td>body</td>\\n                            <td>$implicit: Wrapper object of a node used to serialized a TreeNode<br>\\n                                node: TreeNode instance. <br>\\n                                rowData: Data of the TreeNode instance <br>\\n                                columns: Columns of the TreeTable\\n                            </td>\\n                            <td>Content of the tbody element.</td>\\n                        </tr>\\n                        <tr>\\n                            <td>footer</td>\\n                            <td>$implicit: Columns</td>\\n                            <td>Content of the tfoot element.</td>\\n                        </tr>\\n                        <tr>\\n                            <td>summary</td>\\n                            <td>-</td>\\n                            <td>Summary section to display below the table.</td>\\n                        </tr>\\n                        <tr>\\n                            <td>colgroup</td>\\n                            <td>$implicit: Columns</td>\\n                            <td>ColGroup element of the table to customize columns.</td>\\n                        </tr>\\n                        <tr>\\n                            <td>frozenheader</td>\\n                            <td>$implicit: Columns</td>\\n                            <td>Content of the thead element in frozen side.</td>\\n                        </tr>\\n                        <tr>\\n                            <td>frozenbody</td>\\n                            <td>$implicit: Wrapper object of a node used to serialized a TreeNode<br>\\n                                node: TreeNode instance. <br>\\n                                rowData: Data of the TreeNode instance <br>\\n                                columns: Columns of the TreeTable\\n                            </td>\\n                            <td>Content of the tbody element in frozen side.</td>\\n                        </tr>\\n                        <tr>\\n                            <td>frozenfooter</td>\\n                            <td>$implicit: Columns</td>\\n                            <td>Content of the tfoot element in frozen side.</td>\\n                        </tr>\\n                        <tr>\\n                            <td>frozencolgroup</td>\\n                            <td>$implicit: Columns</td>\\n                            <td>ColGroup element of the table to customize frozen columns.</td>\\n                        </tr>\\n                        <tr>\\n                            <td>emptymessage</td>\\n                            <td>$implicit: Columns</td>\\n                            <td>Content to display when there is no value to display.</td>\\n                        </tr>\\n                        <tr>\\n                            <td>paginatorleft</td>\\n                            <td>state: $implicit\\n                                state.page: Current page<br />\\n                                state.rows: Rows per page<br />\\n                                state.first: Index of the first records<br />\\n                                state.totalRecords: Number of total records<br />\\n                            </td>\\n                            <td>Content to display when there is no value to display.</td>\\n                        </tr>\\n                        <tr>\\n                            <td>paginatorright</td>\\n                            <td>state: $implicit\\n                                state.page: Current page<br />\\n                                state.rows: Rows per page<br />\\n                                state.first: Index of the first records<br />\\n                                state.totalRecords: Number of total records<br />\\n                            </td>\\n                            <td>Content to display when there is no value to display.</td>\\n                        </tr>\\n                    </tbody>\\n                </table>\\n            </div>\\n\\n            <h3>Change Detection</h3>\\n            <p>TreeTable may need to be aware of changes in its value in some cases. For the sake of performance, this is only done when the reference of the value changes meaning a\\n                setter is used instead of ngDoCheck/IterableDiffers which can reduce performance. So when you manipulate the value such as removing a node, adding a node or changing children of a node, instead of using array methods such as push, splice\\n                create a new array reference using a spread operator or similar.\\n            </p>\\n<pre>\\n<code class=\\\"language-typescript\\\" pCode ngNonBindable>\\nthis.value = [...this.value];\\n</code>\\n</pre>\\n\\n            <h3>Keyboard Navigation</h3>\\n            <p>Nodes can be navigated and toggles using arrow keys if the optional <i>ttRow</i> directive is applied to the body row element.</p>\\n<pre>\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\n&lt;ng-template pTemplate=\\\"body\\\" let-rowNode let-rowData=\\\"rowData\\\" let-columns=\\\"columns\\\"&gt;\\n    &lt;tr [ttRow]=\\\"rowNode\\\"&gt;\\n        &lt;td *ngFor=\\\"let col of columns; let i = index\\\"&gt;\\n            &lt;p-treeTableToggler [rowNode]=\\\"rowNode\\\" *ngIf=\\\"i == 0\\\"&gt;&lt;/p-treeTableToggler&gt;\\n            &#123;&#123;rowData[col.field]&#125;&#125;\\n        &lt;/td&gt;\\n    &lt;/tr&gt;\\n&lt;/ng-template&gt;\\n</code>\\n</pre>\\n\\n            <h3>Sections</h3>\\n            <p>Table offers various templates to display additional information about the data such as a caption, <i>header</i>, <i>summary</i> and <i>footer</i>.</p>\\n<pre>\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\n&lt;p-treeTable [value]=\\\"files\\\" [columns]=\\\"cols\\\"&gt;\\n    &lt;ng-template pTemplate=\\\"caption\\\"&gt;\\n        FileSystem\\n    &lt;/ng-template&gt;\\n    &lt;ng-template pTemplate=\\\"header\\\" let-columns&gt;\\n        &lt;tr&gt;\\n            &lt;th *ngFor=\\\"let col of columns\\\"&gt;\\n                &#123;&#123;col.header&#125;&#125;\\n            &lt;/th&gt;\\n        &lt;/tr&gt;\\n    &lt;/ng-template&gt;\\n    &lt;ng-template pTemplate=\\\"body\\\" let-rowNode let-rowData=\\\"rowData\\\" let-columns=\\\"columns\\\"&gt;\\n        &lt;tr&gt;\\n            &lt;td *ngFor=\\\"let col of columns; let i = index\\\"&gt;\\n                &lt;p-treeTableToggler [rowNode]=\\\"rowNode\\\" *ngIf=\\\"i == 0\\\"&gt;&lt;/p-treeTableToggler&gt;\\n                &#123;&#123;rowData[col.field]&#125;&#125;\\n            &lt;/td&gt;\\n        &lt;/tr&gt;\\n    &lt;/ng-template&gt;\\n    &lt;ng-template pTemplate=\\\"footer\\\" let-columns&gt;\\n        &lt;tr&gt;\\n            &lt;td *ngFor=\\\"let col of columns\\\"&gt;\\n                &#123;&#123;col.header&#125;&#125;\\n            &lt;/td&gt;\\n        &lt;/tr&gt;\\n    &lt;/ng-template&gt;\\n    &lt;ng-template pTemplate=\\\"summary\\\"&gt;\\n        There are &#123;&#123;files?.length&#125;&#125; Root Folders\\n    &lt;/ng-template&gt;\\n&lt;/p-treeTable&gt;\\n</code>\\n</pre>\\n\\n        <p>See the <a [routerLink]=\\\"['/treetable/sections']\\\">live example.</a></p>\\n\\n            <h3>Column Grouping</h3>\\n            <p>Columns can easily be grouped using templating. Let's start with sample data of sales of brands per year.</p>\\n\\n<div style=\\\"height:400px;overflow: auto\\\">\\n<pre>\\n<code class=\\\"language-typescript\\\" pCode ngNonBindable>\\nexport class TreeTableColGroupDemo implements OnInit &#123;\\n\\n    sales: TreeNode[];\\n\\n    cols: any[];\\n\\n    ngOnInit() &#123;\\n        this.sales = [\\n            &#123;\\n                data: &#123; brand: 'Bliss', lastYearSale: '51%', thisYearSale: '40%', lastYearProfit: '$54,406.00', thisYearProfit: '$43,342'&#125;,\\n                expanded: true,\\n                children: [\\n                    &#123;\\n                        data: &#123; brand: 'Product A', lastYearSale: '25%', thisYearSale: '20%', lastYearProfit: '$34,406.00', thisYearProfit: '$23,342' &#125;,\\n                        expanded: true,\\n                        children: [\\n                            &#123;\\n                                data: &#123; brand: 'Product A-1', lastYearSale: '20%', thisYearSale: '10%', lastYearProfit: '$24,406.00', thisYearProfit: '$13,342' &#125;,\\n                            &#125;,\\n                            &#123;\\n                                data: &#123; brand: 'Product A-2', lastYearSale: '5%', thisYearSale: '10%', lastYearProfit: '$10,000.00', thisYearProfit: '$10,000' &#125;,\\n                            &#125;\\n                        ]\\n                    &#125;,\\n                    &#123;\\n                        data: &#123; brand: 'Product B', lastYearSale: '26%', thisYearSale: '20%', lastYearProfit: '$24,000.00', thisYearProfit: '$23,000' &#125;,\\n                    &#125;\\n                ]\\n            &#125;,\\n            &#123;\\n                data: &#123; brand: 'Fate', lastYearSale: '83%', thisYearSale: '96%', lastYearProfit: '$423,132', thisYearProfit: '$312,122' &#125;,\\n                children: [\\n                    &#123;\\n                        data: &#123; brand: 'Product X', lastYearSale: '50%', thisYearSale: '40%', lastYearProfit: '$223,132', thisYearProfit: '$156,061' &#125;,\\n                    &#125;,\\n                    &#123;\\n                        data: &#123; brand: 'Product Y', lastYearSale: '33%', thisYearSale: '56%', lastYearProfit: '$200,000', thisYearProfit: '$156,061' &#125;,\\n                    &#125;\\n                ]\\n            &#125;,\\n            &#123;\\n                data: &#123; brand: 'Ruby', lastYearSale: '38%', thisYearSale: '5%', lastYearProfit: '$12,321', thisYearProfit: '$8,500' &#125;,\\n                children: [\\n                    &#123;\\n                        data: &#123; brand: 'Product M', lastYearSale: '18%', thisYearSale: '2%', lastYearProfit: '$10,300', thisYearProfit: '$5,500' &#125;,\\n                    &#125;,\\n                    &#123;\\n                        data: &#123; brand: 'Product N', lastYearSale: '20%', thisYearSale: '3%', lastYearProfit: '$2,021', thisYearProfit: '$3,000' &#125;,\\n                    &#125;\\n                ]\\n            &#125;,\\n            &#123;\\n                data: &#123; brand: 'Sky', lastYearSale: '49%', thisYearSale: '22%', lastYearProfit: '$745,232', thisYearProfit: '$650,323' &#125;,\\n                children: [\\n                    &#123;\\n                        data: &#123; brand: 'Product P', lastYearSale: '20%', thisYearSale: '16%', lastYearProfit: '$345,232', thisYearProfit: '$350,000' &#125;,\\n                    &#125;,\\n                    &#123;\\n                        data: &#123; brand: 'Product R', lastYearSale: '29%', thisYearSale: '6%', lastYearProfit: '$400,009', thisYearProfit: '$300,323' &#125;,\\n                    &#125;\\n                ]\\n            &#125;,\\n            &#123;\\n                data: &#123; brand: 'Comfort', lastYearSale: '17%', thisYearSale: '79%', lastYearProfit: '$643,242', thisYearProfit: '500,332' &#125;,\\n                children: [\\n                    &#123;\\n                        data: &#123; brand: 'Product S', lastYearSale: '10%', thisYearSale: '40%', lastYearProfit: '$243,242', thisYearProfit: '$100,000' &#125;,\\n                    &#125;,\\n                    &#123;\\n                        data: &#123; brand: 'Product T', lastYearSale: '7%', thisYearSale: '39%', lastYearProfit: '$400,00', thisYearProfit: '$400,332' &#125;,\\n                    &#125;\\n                ]\\n            &#125;,\\n            &#123;\\n                data: &#123; brand: 'Merit', lastYearSale: '52%', thisYearSale: ' 65%', lastYearProfit: '$421,132', thisYearProfit: '$150,005' &#125;,\\n                children: [\\n                    &#123;\\n                        data: &#123; brand: 'Product L', lastYearSale: '20%', thisYearSale: '40%', lastYearProfit: '$121,132', thisYearProfit: '$100,000' &#125;,\\n                    &#125;,\\n                    &#123;\\n                        data: &#123; brand: 'Product G', lastYearSale: '32%', thisYearSale: '25%', lastYearProfit: '$300,000', thisYearProfit: '$50,005' &#125;,\\n                    &#125;\\n                ]\\n            &#125;,\\n            &#123;\\n                data: &#123; brand: 'Violet', lastYearSale: '82%', thisYearSale: '12%', lastYearProfit: '$131,211', thisYearProfit: '$100,214' &#125;,\\n                children: [\\n                    &#123;\\n                        data: &#123; brand: 'Product SH1', lastYearSale: '30%', thisYearSale: '6%', lastYearProfit: '$101,211', thisYearProfit: '$30,214' &#125;,\\n                    &#125;,\\n                    &#123;\\n                        data: &#123; brand: 'Product SH2', lastYearSale: '52%', thisYearSale: '6%', lastYearProfit: '$30,000', thisYearProfit: '$70,000' &#125;,\\n                    &#125;\\n                ]\\n            &#125;,\\n            &#123;\\n                data: &#123; brand: 'Dulce', lastYearSale: '44%', thisYearSale: '45%', lastYearProfit: '$66,442', thisYearProfit: '$53,322' &#125;,\\n                children: [\\n                    &#123;\\n                        data: &#123; brand: 'Product PN1', lastYearSale: '22%', thisYearSale: '25%', lastYearProfit: '$33,221', thisYearProfit: '$20,000' &#125;,\\n                    &#125;,\\n                    &#123;\\n                        data: &#123; brand: 'Product PN2', lastYearSale: '22%', thisYearSale: '25%', lastYearProfit: '$33,221', thisYearProfit: '$33,322' &#125;,\\n                    &#125;\\n                ]\\n            &#125;,\\n            &#123;\\n                data: &#123; brand: 'Solace', lastYearSale: '90%', thisYearSale: '56%', lastYearProfit: '$765,442', thisYearProfit: '$296,232' &#125;,\\n                children: [\\n                    &#123;\\n                        data: &#123; brand: 'Product HT1', lastYearSale: '60%', thisYearSale: '36%', lastYearProfit: '$465,000', thisYearProfit: '$150,653' &#125;,\\n                    &#125;,\\n                    &#123;\\n                        data: &#123; brand: 'Product HT2', lastYearSale: '30%', thisYearSale: '20%', lastYearProfit: '$300,442', thisYearProfit: '$145,579' &#125;,\\n                    &#125;\\n                ]\\n            &#125;,\\n            &#123;\\n                data:  &#123; brand: 'Essence', lastYearSale: '75%', thisYearSale: '54%', lastYearProfit: '$21,212', thisYearProfit: '$12,533' &#125;,\\n                children: [\\n                    &#123;\\n                        data: &#123; brand: 'Product TS1', lastYearSale: '50%', thisYearSale: '34%', lastYearProfit: '$11,000', thisYearProfit: '$8,562' &#125;,\\n                    &#125;,\\n                    &#123;\\n                        data: &#123; brand: 'Product TS2', lastYearSale: '25%', thisYearSale: '20%', lastYearProfit: '$11,212', thisYearProfit: '$3,971' &#125;,\\n                    &#125;\\n                ]\\n            &#125;\\n        ];\\n    &#125;\\n&#125;\\n</code>\\n</pre>\\n</div>\\n\\n<pre>\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\n&lt;p-treeTable [value]=\\\"sales\\\"&gt;\\n    &lt;ng-template pTemplate=\\\"header\\\"&gt;\\n        &lt;tr&gt;\\n            &lt;th rowspan=\\\"3\\\"&gt;Brand&lt;/th&gt;\\n            &lt;th colspan=\\\"4\\\"&gt;Sale Rate&lt;/th&gt;\\n        &lt;/tr&gt;\\n        &lt;tr&gt;\\n            &lt;th colspan=\\\"2\\\"&gt;Sales&lt;/th&gt;\\n            &lt;th colspan=\\\"2\\\"&gt;Profits&lt;/th&gt;\\n        &lt;/tr&gt;\\n        &lt;tr&gt;\\n            &lt;th&gt;Last Year&lt;/th&gt;\\n            &lt;th&gt;This Year&lt;/th&gt;\\n            &lt;th&gt;Last Year&lt;/th&gt;\\n            &lt;th&gt;This Year&lt;/th&gt;\\n        &lt;/tr&gt;\\n    &lt;/ng-template&gt;\\n    &lt;ng-template pTemplate=\\\"body\\\" let-rowNode let-rowData=\\\"rowData\\\"&gt;\\n        &lt;tr&gt;\\n            &lt;td&gt;\\n                &lt;p-treeTableToggler [rowNode]=\\\"rowNode\\\"&gt;&lt;/p-treeTableToggler&gt;\\n                &#123;&#123;rowData.brand&#125;&#125;\\n            &lt;/td&gt;\\n            &lt;td&gt;&#123;&#123;rowData.lastYearSale&#125;&#125;&lt;/td&gt;\\n            &lt;td&gt;&#123;&#123;rowData.thisYearSale&#125;&#125;&lt;/td&gt;\\n            &lt;td&gt;&#123;&#123;rowData.lastYearProfit&#125;&#125;&lt;/td&gt;\\n            &lt;td&gt;&#123;&#123;rowData.thisYearProfit&#125;&#125;&lt;/td&gt;\\n        &lt;/tr&gt;\\n    &lt;/ng-template&gt;\\n    &lt;ng-template pTemplate=\\\"footer\\\"&gt;\\n        &lt;tr&gt;\\n            &lt;td colspan=\\\"3\\\"&gt;Totals&lt;/td&gt;\\n            &lt;td&gt;$3,283,772&lt;/td&gt;\\n            &lt;td&gt;$2,126,925&lt;/td&gt;\\n        &lt;/tr&gt;\\n    &lt;/ng-template&gt;\\n&lt;/p-treeTable&gt;\\n</code>\\n</pre>\\n            <p>See the <a [routerLink]=\\\"['/treetable/colgroup']\\\">live example.</a></p>\\n\\n            <h3>Paginator</h3>\\n            <p>Pagination is enabled by setting <i>paginator</i> property to true, rows property defines the number of rows per page and pageLinks specify the the number\\n                of page links to display. See <a [routerLink]=\\\"['/paginator']\\\">paginator</a> component for more information.</p>\\n<pre>\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\n&lt;p-treeTable [value]=\\\"files\\\" [columns]=\\\"cols\\\" [paginator]=\\\"true\\\" [rows]=\\\"10\\\"&gt;\\n    &lt;ng-template pTemplate=\\\"header\\\" let-columns&gt;\\n        &lt;tr&gt;\\n            &lt;th *ngFor=\\\"let col of columns\\\"&gt;\\n                &#123;&#123;col.header&#125;&#125;\\n            &lt;/th&gt;\\n        &lt;/tr&gt;\\n    &lt;/ng-template&gt;\\n    &lt;ng-template pTemplate=\\\"body\\\" let-rowNode let-rowData=\\\"rowData\\\" let-columns=\\\"columns\\\"&gt;\\n        &lt;tr&gt;\\n            &lt;td *ngFor=\\\"let col of columns; let i = index\\\"&gt;\\n                &lt;p-treeTableToggler [rowNode]=\\\"rowNode\\\" *ngIf=\\\"i == 0\\\"&gt;&lt;/p-treeTableToggler&gt;\\n                &#123;&#123;rowData[col.field]&#125;&#125;\\n            &lt;/td&gt;\\n        &lt;/tr&gt;\\n    &lt;/ng-template&gt;\\n&lt;/p-treeTable&gt;\\n</code>\\n</pre>\\n\\n            <p>Paginator accepts custom content for the left and the right side via named templates.</p>\\n<pre>\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\n&lt;p-treeTable [value]=\\\"files\\\" [columns]=\\\"cols\\\" [paginator]=\\\"true\\\" [rows]=\\\"10\\\"&gt;\\n    &lt;ng-template pTemplate=\\\"header\\\" let-columns&gt;\\n        &lt;tr&gt;\\n            &lt;th *ngFor=\\\"let col of columns\\\"&gt;\\n                &#123;&#123;col.header&#125;&#125;\\n            &lt;/th&gt;\\n        &lt;/tr&gt;\\n    &lt;/ng-template&gt;\\n    &lt;ng-template pTemplate=\\\"body\\\" let-rowNode let-rowData=\\\"rowData\\\" let-columns=\\\"columns\\\"&gt;\\n        &lt;tr&gt;\\n            &lt;td *ngFor=\\\"let col of columns; let i = index\\\"&gt;\\n                &lt;p-treeTableToggler [rowNode]=\\\"rowNode\\\" *ngIf=\\\"i == 0\\\"&gt;&lt;/p-treeTableToggler&gt;\\n                &#123;&#123;rowData[col.field]&#125;&#125;\\n            &lt;/td&gt;\\n        &lt;/tr&gt;\\n    &lt;/ng-template&gt;\\n    &lt;ng-template pTemplate=\\\"paginatorleft\\\" let-state&gt;\\n        &#123;&#123;state.first&#125;&#125;\\n        &lt;button type=\\\"button\\\" pButton icon=\\\"pi-refresh\\\"&gt;&lt;/button&gt;\\n    &lt;/ng-template&gt;\\n    &lt;ng-template pTemplate=\\\"paginatorright\\\"&gt;\\n        &lt;button type=\\\"button\\\" pButton icon=\\\"pi-cloud-upload\\\"&gt;&lt;/button&gt;\\n    &lt;/ng-template&gt;\\n&lt;/p-treeTable&gt;\\n</code>\\n</pre>\\n\\n            <p>Paginator templates gets the paginator state as an implicit variable that provides the following properties</p>\\n            <ul>\\n                <li>first</li>\\n                <li>rows</li>\\n                <li>page</li>\\n                <li>totalRecords</li>\\n            </ul>\\n\\n            <p>See the <a [routerLink]=\\\"['/treetable/page']\\\">live example.</a></p>\\n\\n            <h3>Sorting</h3>\\n            <p>A column can be made sortable by adding the <i>ttSortableColumn</i> directive whose value is the field to sort against and a sort indicator via <i>p-treeTableSortIcon</i> component. For dynamic columns,\\n                setting <i>ttSortableColumnDisabled</i> property as true disables sorting for that particular column.\\n            </p>\\n<pre>\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\n&lt;p-treeTable [value]=\\\"files\\\" [columns]=\\\"cols\\\"&gt;\\n    &lt;ng-template pTemplate=\\\"header\\\" let-columns&gt;\\n        &lt;tr&gt;\\n            &lt;th *ngFor=\\\"let col of columns\\\" [ttSortableColumn]=\\\"col.field\\\"&gt;\\n                &#123;&#123;col.header&#125;&#125;\\n                &lt;p-treeTableSortIcon [field]=\\\"col.field\\\"&gt;&lt;/p-treeTableSortIcon&gt;\\n            &lt;/th&gt;\\n        &lt;/tr&gt;\\n    &lt;/ng-template&gt;\\n    &lt;ng-template pTemplate=\\\"body\\\" let-rowNode let-rowData=\\\"rowData\\\" let-columns=\\\"columns\\\"&gt;\\n        &lt;tr&gt;\\n            &lt;td *ngFor=\\\"let col of columns; let i = index\\\"&gt;\\n                &lt;p-treeTableToggler [rowNode]=\\\"rowNode\\\" *ngIf=\\\"i == 0\\\"&gt;&lt;/p-treeTableToggler&gt;\\n                &#123;&#123;rowData[col.field]&#125;&#125;\\n            &lt;/td&gt;\\n        &lt;/tr&gt;\\n    &lt;/ng-template&gt;\\n&lt;/p-treeTable&gt;\\n</code>\\n</pre>\\n            <p>Default sorting is executed on a single column, in order to enable multiple field sorting, set <i>sortMode</i> property to \\\"multiple\\\" and use metakey\\n            when clicking on another column.</p>\\n<pre>\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\n&lt;p-treeTable [value]=\\\"cars\\\" sortMode=\\\"multiple\\\"&gt;\\n</code>\\n</pre>\\n\\n            <p>In case you'd like to display the table as sorted by default initially on load, use the <i>sortField</i>-<i>sortOrder</i> properties in single mode.</p>\\n<pre>\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\n&lt;p-treeTable [value]=\\\"files\\\" [columns]=\\\"cols\\\" sortField=\\\"year\\\"&gt;\\n    &lt;ng-template pTemplate=\\\"header\\\" let-columns&gt;\\n        &lt;tr&gt;\\n            &lt;th *ngFor=\\\"let col of columns\\\" [ttSortableColumn]=\\\"col.field\\\"&gt;\\n                &#123;&#123;col.header&#125;&#125;\\n                &lt;p-treeTableSortIcon [field]=\\\"col.field\\\"&gt;&lt;/p-treeTableSortIcon&gt;\\n            &lt;/th&gt;\\n        &lt;/tr&gt;\\n    &lt;/ng-template&gt;\\n    &lt;ng-template pTemplate=\\\"body\\\" let-rowNode let-rowData=\\\"rowData\\\" let-columns=\\\"columns\\\"&gt;\\n        &lt;tr&gt;\\n            &lt;td *ngFor=\\\"let col of columns; let i = index\\\"&gt;\\n                &lt;p-treeTableToggler [rowNode]=\\\"rowNode\\\" *ngIf=\\\"i == 0\\\"&gt;&lt;/p-treeTableToggler&gt;\\n                &#123;&#123;rowData[col.field]&#125;&#125;\\n            &lt;/td&gt;\\n        &lt;/tr&gt;\\n    &lt;/ng-template&gt;\\n&lt;/p-treeTable&gt;\\n</code>\\n</pre>\\n            <p>In multiple mode, use the <i>multiSortMeta</i> property and bind an array of SortMeta objects.</p>\\n<pre>\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\n&lt;p-treeTable [value]=\\\"files\\\" [columns]=\\\"cols\\\" sortMode=\\\"multiple\\\" [multiSortMeta]=\\\"multiSortMeta\\\"&gt;\\n    &lt;ng-template pTemplate=\\\"header\\\" let-columns&gt;\\n        &lt;tr&gt;\\n            &lt;th *ngFor=\\\"let col of columns\\\" [ttSortableColumn]=\\\"col.field\\\"&gt;\\n                &#123;&#123;col.header&#125;&#125;\\n                &lt;p-treeTableSortIcon [field]=\\\"col.field\\\"&gt;&lt;/p-treeTableSortIcon&gt;\\n            &lt;/th&gt;\\n        &lt;/tr&gt;\\n    &lt;/ng-template&gt;\\n    &lt;ng-template pTemplate=\\\"body\\\" let-rowNode let-rowData=\\\"rowData\\\" let-columns=\\\"columns\\\"&gt;\\n        &lt;tr&gt;\\n            &lt;td *ngFor=\\\"let col of columns; let i = index\\\"&gt;\\n                &lt;p-treeTableToggler [rowNode]=\\\"rowNode\\\" *ngIf=\\\"i == 0\\\"&gt;&lt;/p-treeTableToggler&gt;\\n                &#123;&#123;rowData[col.field]&#125;&#125;\\n            &lt;/td&gt;\\n        &lt;/tr&gt;\\n    &lt;/ng-template&gt;\\n&lt;/p-treeTable&gt;\\n</code>\\n</pre>\\n\\n<pre>\\n<code class=\\\"language-typescript\\\" pCode ngNonBindable>\\nthis.multiSortMeta = [];\\nthis.multiSortMeta.push(&#123;field: 'year', order: 1&#125;);\\nthis.multiSortMeta.push(&#123;field: 'brand', order: -1&#125;);\\n</code>\\n</pre>\\n\\n            <p>Instead of using the built-in sorting algorithm a custom sort can be attached by enabling <i>customSort</i> property and defining a <i>sortFunction</i> implementation. This function gets a SortEvent instance\\n                that provides the data to sort, sortField, sortOrder and multiSortMeta.\\n            </p>\\n<pre>\\n<code class=\\\"language-typescript\\\" pCode ngNonBindable>\\nexport class TreeTableSortDemo implements OnInit &#123;\\n\\n    files: TreeNode[];\\n\\n    cols: any[];\\n\\n    constructor(private nodeService: NodeService) &#123; &#125;\\n\\n    ngOnInit() &#123;\\n        this.nodeService.getFilesystem().then(files => this.files = files);\\n\\n        this.cols = [\\n            &#123; field: 'name', header: 'Name' &#125;,\\n            &#123; field: 'size', header: 'Size' &#125;,\\n            &#123; field: 'type', header: 'Type' &#125;\\n        ];\\n    &#125;\\n\\n    customSort(event: SortEvent) &#123;\\n        //event.data = Data to sort\\n        //event.mode = 'single' or 'multiple' sort mode\\n        //event.field = Sort field in single sort\\n        //event.order = Sort order in single sort\\n        //event.multiSortMeta = SortMeta array in multiple sort\\n\\n        event.data.sort((data1, data2) => &#123;\\n            let value1 = data1[event.field];\\n            let value2 = data2[event.field];\\n            let result = null;\\n\\n            if (value1 == null && value2 != null)\\n                result = -1;\\n            else if (value1 != null && value2 == null)\\n                result = 1;\\n            else if (value1 == null && value2 == null)\\n                result = 0;\\n            else if (typeof value1 === 'string' && typeof value2 === 'string')\\n                result = value1.localeCompare(value2);\\n            else\\n                result = (value1 < value2) ? -1 : (value1 > value2) ? 1 : 0;\\n\\n            return (event.order * result);\\n        &#125;);\\n    &#125;\\n&#125;\\n</code>\\n</pre>\\n\\n<pre>\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\n&lt;p-treeTable [value]=\\\"files\\\" [columns]=\\\"cols\\\" (sortFunction)=\\\"customSort($event)\\\" [customSort]=\\\"true\\\"&gt;\\n    &lt;ng-template pTemplate=\\\"header\\\" let-columns&gt;\\n        &lt;tr&gt;\\n            &lt;th *ngFor=\\\"let col of columns\\\" [ttSortableColumn]=\\\"col.field\\\"&gt;\\n                &#123;&#123;col.header&#125;&#125;\\n                &lt;p-treeTableSortIcon [field]=\\\"col.field\\\"&gt;&lt;/p-treeTableSortIcon&gt;\\n            &lt;/th&gt;\\n        &lt;/tr&gt;\\n    &lt;/ng-template&gt;\\n    &lt;ng-template pTemplate=\\\"body\\\" let-rowNode let-rowData=\\\"rowData\\\" let-columns=\\\"columns\\\"&gt;\\n        &lt;tr&gt;\\n            &lt;td *ngFor=\\\"let col of columns; let i = index\\\"&gt;\\n                &lt;p-treeTableToggler [rowNode]=\\\"rowNode\\\" *ngIf=\\\"i == 0\\\"&gt;&lt;/p-treeTableToggler&gt;\\n                &#123;&#123;rowData[col.field]&#125;&#125;\\n            &lt;/td&gt;\\n        &lt;/tr&gt;\\n    &lt;/ng-template&gt;\\n&lt;/p-treeTable&gt;\\n</code>\\n</pre>\\n\\n            <p>For screen reader support of sortable headers, use <i>ariaLabelDesc</i> and <i>ariaLabelAsc</i> properties\\n                on p-sortIcon directive.</p>\\n\\n            <p>See the <a [routerLink]=\\\"['/treetable/sort']\\\">live example.</a></p>\\n\\n            <h3>Filtering</h3>\\n            <p>Filtering is enabled by defining the filter elements and calling filter method on the local template variable of the table with value, column field and match mode parameters. Available match modes are\\n            \\\"startsWith\\\", \\\"contains\\\", \\\"endsWith\\\", \\\"equals\\\", \\\"notEquals\\\", \\\"in\\\", \\\"lt\\\", \\\"lte\\\", \\\"gt\\\" and \\\"gte\\\".</p>\\n\\n            <p>An optional global filter feature is available to search all fields with the same query, to enable this place an input component and call the <i>filterGlobal</i> function with value and match mode properties on your event of choice.</p>\\n\\n            <p>In addition <i>filterMode</i> specifies the filtering strategy. In <b>lenient</b> mode when the query matches a node, children of the node are not searched further as all descendants of the node are included. On the other hand,\\n                in <b>strict</b> mode when the query matches a node, filtering continues on all descendants.</p>\\n<pre>\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\n&lt;p-treeTable #tt [value]=\\\"files\\\" [columns]=\\\"cols\\\"&gt;\\n    &lt;ng-template pTemplate=\\\"caption\\\"&gt;\\n        &lt;div style=\\\"text-align: right\\\"&gt;\\n            &lt;i class=\\\"pi pi-search\\\" style=\\\"margin:4px 4px 0 0\\\"&gt;&lt;/i&gt;\\n            &lt;input type=\\\"text\\\" pInputText size=\\\"50\\\" placeholder=\\\"Global Filter\\\" (input)=\\\"tt.filterGlobal($event.target.value, 'contains')\\\" style=\\\"width:auto\\\"&gt;\\n        &lt;/div&gt;\\n    &lt;/ng-template&gt;\\n    &lt;ng-template pTemplate=\\\"header\\\" let-columns&gt;\\n        &lt;tr&gt;\\n            &lt;th *ngFor=\\\"let col of cols\\\"&gt;\\n                &#123;&#123;col.header&#125;&#125;\\n            &lt;/th&gt;\\n        &lt;/tr&gt;\\n        &lt;tr&gt;\\n            &lt;th *ngFor=\\\"let col of cols\\\"&gt;\\n                &lt;input pInputText type=\\\"text\\\" (input)=\\\"tt.filter($event.target.value, col.field, col.filterMatchMode)\\\"&gt;\\n            &lt;/th&gt;\\n        &lt;/tr&gt;\\n    &lt;/ng-template&gt;\\n    &lt;ng-template pTemplate=\\\"body\\\" let-rowNode let-rowData=\\\"rowData\\\"&gt;\\n        &lt;tr&gt;\\n            &lt;td *ngFor=\\\"let col of cols; let i = index\\\"&gt;\\n                &lt;p-treeTableToggler [rowNode]=\\\"rowNode\\\" *ngIf=\\\"i == 0\\\"&gt;&lt;/p-treeTableToggler&gt;\\n                &#123;&#123;rowData[col.field]&#125;&#125;\\n            &lt;/td&gt;\\n        &lt;/tr&gt;\\n    &lt;/ng-template&gt;\\n&lt;/p-treeTable&gt;\\n</code>\\n</pre>\\n\\n<pre>\\n<code class=\\\"language-typescript\\\" pCode ngNonBindable>\\n@Component(&#123;\\n    templateUrl: './treetablefilterdemo.html'\\n&#125;)\\nexport class TreeTableFilterDemo &#123;\\n\\n    files: TreeNode[];\\n\\n    cols: any[];\\n\\n    constructor(private nodeService: NodeService) &#123; &#125;\\n\\n    ngOnInit() &#123;\\n        this.nodeService.getFilesystem().then(files => this.files = files);\\n\\n        this.cols = [\\n            &#123; field: 'name', header: 'Name' &#125;,\\n            &#123; field: 'size', header: 'Size' &#125;,\\n            &#123; field: 'type', header: 'Type' &#125;\\n        ];\\n    &#125;\\n&#125;\\n</code>\\n</pre>\\n\\n            <p>If you have static columns and need to use global filtering, globalFilterFields property must be defined to configure which fields should be used in global filtering. Another\\n                use case of this property is to change the fields to utilize in global filtering with dynamic columns.\\n            </p>\\n<pre>\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\n&lt;p-treeTable #tt [value]=\\\"files\\\" [columns]=\\\"cols\\\"&gt;\\n    //content\\n&lt;/p-treeTable&gt;\\n</code>\\n</pre>\\n\\n            <p>See the <a [routerLink]=\\\"['/treetable/filter']\\\">live example.</a></p>\\n\\n            <h3>Selection</h3>\\n            <p>TreeTable provides built-in single, multiple and checkbox selection features where selected rows are bound to the selection property and onRowSelect-onRowUnselect events\\n            are provided as optional callbacks. In order to enable this feature, define a <strong>selectionMode</strong>, bind a selection reference and add <strong>ttSelectableRow</strong> directive\\n            whose value is the rowNode to the rows that can be selected. Additionally if you prefer double click use <strong>ttSelectableRowDblClick</strong> directive instead and\\n            to disable selection events on a particular row use <strong>ttSelectableRowDisabled</strong> property.</p>\\n\\n            <p>By default each row click adds or removes the row from the selection, if you prefer a classic\\n            metaKey based selection approach enable <strong>metaKeySelection</strong> true so that multiple selection or unselection of a row requires metaKey to be pressed. Note that, on touch enabled\\n            devices, metaKey based selection is turned off automatically as there is no metaKey in devices such as mobile phones.</p>\\n\\n            <p>Alternative to the row click, checkbox elements can be used to implement row selection as well.</p>\\n\\n            <p>When resolving if a row is selected, by default TreeTable compares selection array with the datasource which may cause a performance issue with huge datasets that do not use pagination.\\n                If available the fastest way is to use dataKey property that identifies a unique row so that Table can avoid comparing arrays as internally a map instance is used instead of looping arrays, on the other hand\\n                if dataKey cannot be provided consider using compareSelectionBy property as \\\"equals\\\" which uses reference comparison instead of the default \\\"deepEquals\\\" comparison. Latter is slower since it checks all properties.\\n            </p>\\n\\n            <p>In single mode, selection binding is an object reference.</p>\\n<pre>\\n<code class=\\\"language-typescript\\\" pCode ngNonBindable>\\nexport class TreeTableSelectionDemo &#123;\\n\\n    files: TreeNode[];\\n\\n    selectedNode: TreeNode;\\n\\n    constructor(private carService: CarService) &#123; &#125;\\n\\n    ngOnInit() &#123;\\n        this.nodeService.getFilesystem().then(files => this.files = files);\\n    &#125;\\n&#125;\\n</code>\\n</pre>\\n\\n<pre>\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\n&lt;p-treeTable [value]=\\\"files\\\" [columns]=\\\"cols\\\" selectionMode=\\\"single\\\" [(selection)]=\\\"selectedNode\\\" dataKey=\\\"name\\\"&gt;\\n    &lt;ng-template pTemplate=\\\"header\\\" let-columns&gt;\\n        &lt;tr&gt;\\n            &lt;th *ngFor=\\\"let col of columns\\\"&gt;\\n                &#123;&#123;col.header&#125;&#125;\\n            &lt;/th&gt;\\n        &lt;/tr&gt;\\n    &lt;/ng-template&gt;\\n    &lt;ng-template pTemplate=\\\"body\\\" let-rowNode let-rowData=\\\"rowData\\\" let-columns=\\\"columns\\\"&gt;\\n        &lt;tr [ttSelectableRow]=\\\"rowNode\\\"&gt;\\n            &lt;td *ngFor=\\\"let col of columns; let i = index\\\"&gt;\\n                &lt;p-treeTableToggler [rowNode]=\\\"rowNode\\\" *ngIf=\\\"i == 0\\\"&gt;&lt;/p-treeTableToggler&gt;\\n                &#123;&#123;rowData[col.field]&#125;&#125;\\n            &lt;/td&gt;\\n        &lt;/tr&gt;\\n    &lt;/ng-template&gt;\\n&lt;/p-treeTable&gt;\\n</code>\\n</pre>\\n\\n        <p>In multiple mode, selection binding should be an array.</p>\\n<pre>\\n<code class=\\\"language-typescript\\\" pCode ngNonBindable>\\nexport class TreeTableSelectionDemo &#123;\\n\\n    files: TreeNode[];\\n\\n    selectedNodes: TreeNode[];\\n\\n    constructor(private carService: CarService) &#123; &#125;\\n\\n    ngOnInit() &#123;\\n        this.nodeService.getFilesystem().then(files => this.files = files);\\n    &#125;\\n&#125;\\n</code>\\n</pre>\\n\\n<pre>\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\n&lt;p-treeTable [value]=\\\"files\\\" [columns]=\\\"cols\\\" selectionMode=\\\"multiple\\\" [(selection)]=\\\"selectedNodes\\\" dataKey=\\\"name\\\"&gt;\\n    &lt;ng-template pTemplate=\\\"header\\\" let-columns&gt;\\n        &lt;tr&gt;\\n            &lt;th *ngFor=\\\"let col of columns\\\"&gt;\\n                &#123;&#123;col.header&#125;&#125;\\n            &lt;/th&gt;\\n        &lt;/tr&gt;\\n    &lt;/ng-template&gt;\\n    &lt;ng-template pTemplate=\\\"body\\\" let-rowNode let-rowData=\\\"rowData\\\" let-columns=\\\"columns\\\"&gt;\\n        &lt;tr [ttSelectableRow]=\\\"rowNode\\\"&gt;\\n            &lt;td *ngFor=\\\"let col of columns; let i = index\\\"&gt;\\n                &lt;p-treeTableToggler [rowNode]=\\\"rowNode\\\" *ngIf=\\\"i == 0\\\"&gt;&lt;/p-treeTableToggler&gt;\\n                &#123;&#123;rowData[col.field]&#125;&#125;\\n            &lt;/td&gt;\\n        &lt;/tr&gt;\\n    &lt;/ng-template&gt;\\n&lt;/p-treeTable&gt;\\n</code>\\n</pre>\\n\\n                <p>Checkbox selection utilizes p-treeTableCheckbox component whose value should be the rowNode. Optionally <i>p-treeTableHeaderCheckbox</i> is available to select or unselect all the nodes.</p>\\n<pre>\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\n&lt;p-treeTable [value]=\\\"files\\\" [columns]=\\\"cols\\\" selectionMode=\\\"checkbox\\\" [(selection)]=\\\"selectedNodes\\\"&gt;\\n    &lt;ng-template pTemplate=\\\"caption\\\"&gt;\\n        &lt;div style=\\\"text-align:left\\\"&gt;\\n            &lt;p-treeTableHeaderCheckbox&gt;&lt;/p-treeTableHeaderCheckbox&gt;\\n            &lt;span style=\\\"margin-left: .25em; vertical-align: middle\\\"&gt;Toggle All&lt;/span&gt;\\n        &lt;/div&gt;\\n    &lt;/ng-template&gt;\\n    &lt;ng-template pTemplate=\\\"header\\\" let-columns&gt;\\n        &lt;tr&gt;\\n            &lt;th *ngFor=\\\"let col of columns\\\"&gt;\\n                &#123;&#123;col.header&#125;&#125;\\n            &lt;/th&gt;\\n        &lt;/tr&gt;\\n    &lt;/ng-template&gt;\\n    &lt;ng-template pTemplate=\\\"body\\\" let-rowNode let-rowData=\\\"rowData\\\" let-columns=\\\"columns\\\"&gt;\\n        &lt;tr&gt;\\n            &lt;td *ngFor=\\\"let col of columns; let i = index\\\"&gt;\\n                &lt;p-treeTableToggler [rowNode]=\\\"rowNode\\\" *ngIf=\\\"i == 0\\\"&gt;&lt;/p-treeTableToggler&gt;\\n                &lt;p-treeTableCheckbox [value]=\\\"rowNode\\\" *ngIf=\\\"i == 0\\\"&gt;&lt;/p-treeTableCheckbox&gt;\\n                &#123;&#123;rowData[col.field]&#125;&#125;\\n            &lt;/td&gt;\\n        &lt;/tr&gt;\\n    &lt;/ng-template&gt;\\n&lt;/p-treeTable&gt;\\n</code>\\n</pre>\\n\\n            <p>See the <a [routerLink]=\\\"['/treetable/selection']\\\">live example.</a></p>\\n\\n            <h3>ContextMenu</h3>\\n            <p>TreeTable has exclusive integration with contextmenu component. In order to attach a menu to a treetable, add <i>ttContextMenuRow</i> directive to the rows that can be selected with context menu, define a local template\\n            variable for the menu and bind it to the contextMenu property of the treetable. This enables displaying the menu whenever a row is right clicked. A separate <i>contextMenuSelection</i>\\n            property is used to get a hold of the right clicked row. For dynamic columns, setting <i>ttContextMenuRowDisabled</i> property as true disables context menu for that particular row.</p>\\n<pre>\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\n&lt;p-toast [style]=\\\"&#123;marginTop: '80px'&#125;\\\"&gt;&lt;/p-toast&gt;\\n\\n&lt;p-treeTable [value]=\\\"files\\\" [columns]=\\\"cols\\\" dataKey=\\\"name\\\" [(contextMenuSelection)]=\\\"selectedNode\\\" [contextMenu]=\\\"cm\\\"&gt;\\n    &lt;ng-template pTemplate=\\\"header\\\" let-columns&gt;\\n        &lt;tr&gt;\\n            &lt;th *ngFor=\\\"let col of columns\\\"&gt;\\n                &#123;&#123;col.header&#125;&#125;\\n            &lt;/th&gt;\\n        &lt;/tr&gt;\\n    &lt;/ng-template&gt;\\n    &lt;ng-template pTemplate=\\\"body\\\" let-rowNode let-rowData=\\\"rowData\\\" let-columns=\\\"columns\\\"&gt;\\n        &lt;tr [ttContextMenuRow]=\\\"rowNode\\\"&gt;\\n            &lt;td *ngFor=\\\"let col of columns; let i = index\\\"&gt;\\n                &lt;p-treeTableToggler [rowNode]=\\\"rowNode\\\" *ngIf=\\\"i == 0\\\"&gt;&lt;/p-treeTableToggler&gt;\\n                &#123;&#123;rowData[col.field]&#125;&#125;\\n            &lt;/td&gt;\\n        &lt;/tr&gt;\\n    &lt;/ng-template&gt;\\n&lt;/p-treeTable&gt;\\n\\n&lt;p-contextMenu #cm [model]=\\\"items\\\"&gt;&lt;/p-contextMenu&gt;\\n</code>\\n</pre>\\n\\n            <p>See the <a [routerLink]=\\\"['/treetable/contextmenu']\\\">live example.</a></p>\\n\\n            <h3>Editing</h3>\\n            <p>Incell editing is enabled by adding <i>ttEditableColumn</i> directive to an editable cell that has a <i>p-treeTableCellEditor</i> helper\\n                component to define the input-output templates for the edit and view modes respectively.</p>\\n<pre>\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\n&lt;p-treeTable [value]=\\\"files\\\" [columns]=\\\"cols\\\"&gt;\\n    &lt;ng-template pTemplate=\\\"header\\\" let-columns&gt;\\n        &lt;tr&gt;\\n            &lt;th *ngFor=\\\"let col of columns\\\"&gt;\\n                {{col.header}}\\n            &lt;/th&gt;\\n        &lt;/tr&gt;\\n    &lt;/ng-template&gt;\\n    &lt;ng-template pTemplate=\\\"body\\\" let-rowNode let-rowData=\\\"rowData\\\" let-columns=\\\"columns\\\"&gt;\\n        &lt;tr&gt;\\n            &lt;td *ngFor=\\\"let col of columns; let i = index\\\" ttEditableColumn&gt;\\n                &lt;p-treeTableToggler [rowNode]=\\\"rowNode\\\" *ngIf=\\\"i == 0\\\"&gt;&lt;/p-treeTableToggler&gt;\\n                &lt;p-treeTableCellEditor&gt;\\n                    &lt;ng-template pTemplate=\\\"input\\\"&gt;\\n                        &lt;input type=\\\"text\\\" [(ngModel)]=\\\"rowData[col.field]\\\"&gt;\\n                    &lt;/ng-template&gt;\\n                    &lt;ng-template pTemplate=\\\"output\\\"&gt;\\n                        &#123;&#123;rowData[col.field]&#125;&#125;\\n                    &lt;/ng-template&gt;\\n                &lt;/p-treeTableCellEditor&gt;\\n            &lt;/td&gt;\\n        &lt;/tr&gt;\\n    &lt;/ng-template&gt;\\n&lt;/p-treeTable&gt;\\n</code>\\n</pre>\\n\\n            <p>If you require the edited row data and the field at onEditComplete event, bind the data to the <i>ttEditableColumn</i> directive and the field to the <i>ttEditableColumnField</i> directive</p>\\n<pre>\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\n&lt;td [ttEditableColumn]=\\\"rowData\\\" [ttEditableColumnField]=\\\"'year'\\\"&gt;\\n</code>\\n</pre>\\n\\n            <p>See the <a [routerLink]=\\\"['/treetable/editable']\\\">live example.</a></p>\\n\\n            <h3>Column Resize</h3>\\n            <p>Columns can be resized using drag drop by setting the <i>resizableColumns</i> to true. There are two resize modes; \\\"fit\\\" and \\\"expand\\\". Fit is the default one and\\n            the overall table width does not change when a column is resized. In \\\"expand\\\" mode, table width also changes along with the column width. <i>onColumnResize</i>\\n            is a callback that passes the resized column header as a parameter. For dynamic columns, setting <i>ttResizableColumnDisabled</i> property as true disables resizing for that particular column.\\n            When you need to change column widths, since table width is 100%, giving fixed pixel widths does not work well as browsers scale them, instead give percentage widths.\\n            </p>\\n\\n<pre>\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\n&lt;p-treeTable [value]=\\\"files\\\" [columns]=\\\"cols\\\" [resizableColumns]=\\\"true\\\"&gt;\\n    &lt;ng-template pTemplate=\\\"header\\\" let-columns&gt;\\n        &lt;tr&gt;\\n            &lt;th *ngFor=\\\"let col of columns\\\" ttResizableColumn&gt;\\n                &#123;&#123;col.header&#125;&#125;\\n            &lt;/th&gt;\\n        &lt;/tr&gt;\\n    &lt;/ng-template&gt;\\n    &lt;ng-template pTemplate=\\\"body\\\" let-rowNode let-rowData=\\\"rowData\\\" let-columns=\\\"columns\\\"&gt;\\n        &lt;tr&gt;\\n            &lt;td *ngFor=\\\"let col of columns; let i = index\\\"&gt;\\n                &lt;p-treeTableToggler [rowNode]=\\\"rowNode\\\" *ngIf=\\\"i == 0\\\"&gt;&lt;/p-treeTableToggler&gt;\\n                &#123;&#123;rowData[col.field]&#125;&#125;\\n            &lt;/td&gt;\\n        &lt;/tr&gt;\\n    &lt;/ng-template&gt;\\n&lt;/p-treeTable&gt;\\n</code>\\n</pre>\\n\\n            <p><b>Note:</b> Scrollable tables require a column group to support resizing.</p>\\n<pre>\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\n&lt;p-treeTable [value]=\\\"files\\\" [columns]=\\\"cols\\\" [scrollable]=\\\"true\\\" scrollHeight=\\\"200px\\\" [resizableColumns]=\\\"true\\\"&gt;\\n    &lt;ng-template pTemplate=\\\"colgroup\\\" let-columns&gt;\\n        &lt;colgroup&gt;\\n            &lt;col *ngFor=\\\"let col of columns\\\" &gt;\\n        &lt;/colgroup&gt;\\n    &lt;/ng-template&gt;\\n    &lt;ng-template pTemplate=\\\"header\\\" let-columns&gt;\\n        &lt;tr&gt;\\n            &lt;th *ngFor=\\\"let col of columns\\\" ttResizableColumn&gt;\\n                &#123;&#123;col.header&#125;&#125;\\n            &lt;/th&gt;\\n        &lt;/tr&gt;\\n    &lt;/ng-template&gt;\\n    &lt;ng-template pTemplate=\\\"body\\\" let-rowNode let-rowData=\\\"rowData\\\" let-columns=\\\"columns\\\"&gt;\\n        &lt;tr&gt;\\n            &lt;td *ngFor=\\\"let col of columns; let i = index\\\"&gt;\\n                &lt;p-treeTableToggler [rowNode]=\\\"rowNode\\\" *ngIf=\\\"i == 0\\\"&gt;&lt;/p-treeTableToggler&gt;\\n                &#123;&#123;rowData[col.field]&#125;&#125;\\n            &lt;/td&gt;\\n        &lt;/tr&gt;\\n    &lt;/ng-template&gt;\\n&lt;/p-treeTable&gt;\\n</code>\\n</pre>\\n\\n            <p>See the <a [routerLink]=\\\"['/treetable/colresize']\\\">live example.</a></p>\\n\\n            <h3>Column Reordering</h3>\\n            <p>Columns can be reordered using drag drop by setting the <i>reorderableColumns</i> to true and adding <i>ttReorderableColumn</i> directive to the columns that can be dragged. Note that\\n                columns should be dynamic for reordering to work. For dynamic columns, setting <i>ttReorderableColumnDisabled</i> property as true disables reordering for that particular column.</p>\\n<pre>\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\n&lt;p-treeTable [value]=\\\"files\\\" [columns]=\\\"cols\\\" [reorderableColumns]=\\\"true\\\"&gt;\\n    &lt;ng-template pTemplate=\\\"header\\\" let-columns&gt;\\n        &lt;tr&gt;\\n            &lt;th *ngFor=\\\"let col of columns\\\" ttReorderableColumn&gt;\\n                &#123;&#123;col.header&#125;&#125;\\n            &lt;/th&gt;\\n        &lt;/tr&gt;\\n    &lt;/ng-template&gt;\\n    &lt;ng-template pTemplate=\\\"body\\\" let-rowNode let-rowData=\\\"rowData\\\" let-columns=\\\"columns\\\"&gt;\\n        &lt;tr&gt;\\n            &lt;td *ngFor=\\\"let col of columns; let i = index\\\"&gt;\\n                &lt;p-treeTableToggler [rowNode]=\\\"rowNode\\\" *ngIf=\\\"i == 0\\\"&gt;&lt;/p-treeTableToggler&gt;\\n                &#123;&#123;rowData[col.field]&#125;&#125;\\n            &lt;/td&gt;\\n        &lt;/tr&gt;\\n    &lt;/ng-template&gt;\\n&lt;/p-treeTable&gt;\\n</code>\\n</pre>\\n            <p>See the <a [routerLink]=\\\"['/treetable/colreorder']\\\">live example.</a></p>\\n\\n            <h3>Scrolling</h3>\\n            <p>TreeTable supports both horizontal and vertical scrolling as well as frozen columns and rows. Additionally, virtualScroll mode enables dealing with large datasets by rendering data on demand during scrolling.</p>\\n\\n            <p>Sample below uses vertical scrolling where headers are fixed and data is <i>scrollable</i>.</p>\\n<pre>\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\n&lt;p-treeTable [value]=\\\"files\\\" [columns]=\\\"cols\\\" [scrollable]=\\\"true\\\" scrollHeight=\\\"200px\\\"&gt;\\n    &lt;ng-template pTemplate=\\\"header\\\" let-columns&gt;\\n        &lt;tr&gt;\\n            &lt;th *ngFor=\\\"let col of columns\\\"&gt;\\n                &#123;&#123;col.header&#125;&#125;\\n            &lt;/th&gt;\\n        &lt;/tr&gt;\\n    &lt;/ng-template&gt;\\n    &lt;ng-template pTemplate=\\\"body\\\" let-rowNode let-rowData=\\\"rowData\\\" let-columns=\\\"columns\\\"&gt;\\n        &lt;tr&gt;\\n            &lt;td *ngFor=\\\"let col of columns; let i = index\\\"&gt;\\n                &lt;p-treeTableToggler [rowNode]=\\\"rowNode\\\" *ngIf=\\\"i == 0\\\"&gt;&lt;/p-treeTableToggler&gt;\\n                &#123;&#123;rowData[col.field]&#125;&#125;\\n            &lt;/td&gt;\\n        &lt;/tr&gt;\\n    &lt;/ng-template&gt;\\n&lt;/p-treeTable&gt;\\n</code>\\n</pre>\\n\\n            <h3>Flex Scroll</h3>\\n            <p>In cases where viewport should adjust itself according to the table parent's height instead of a fixed viewport height, set <i>scrollHeight</i> option as <b>flex</b>. In example below,\\n            table is inside a Dialog where viewport size dynamically responds to the dialog size changes such as resizing or maximizing.</p>\\n\\n<pre>\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\n&lt;button type=\\\"button\\\" (click)=\\\"showDialog()\\\" pButton icon=\\\"pi pi-external-link\\\" label=\\\"View\\\"&gt;&lt;/button&gt;\\n&lt;p-dialog header=\\\"Flexible ScrollHeight\\\" [(visible)]=\\\"dialogVisible\\\" [style]=\\\"&#123;width: '50vw'&#125;\\\" [baseZIndex]=\\\"10000\\\" [maximizable]=\\\"true\\\" [modal]=\\\"true\\\" [resizable]=\\\"true\\\" [contentStyle]=\\\"&#123;height: '300px'&#125;\\\"&gt;\\n    &lt;p-treeTable [value]=\\\"files2\\\" [columns]=\\\"cols\\\" [scrollable]=\\\"true\\\" scrollHeight=\\\"flex\\\"&gt;\\n        &lt;ng-template pTemplate=\\\"header\\\" let-columns&gt;\\n            &lt;tr&gt;\\n                &lt;th *ngFor=\\\"let col of columns\\\"&gt;\\n                    &#123;&#123;col.header&#125;&#125;\\n                &lt;/th&gt;\\n            &lt;/tr&gt;\\n        &lt;/ng-template&gt;\\n        &lt;ng-template pTemplate=\\\"body\\\" let-rowNode let-rowData=\\\"rowData\\\" let-columns=\\\"columns\\\"&gt;\\n            &lt;tr&gt;\\n                &lt;td *ngFor=\\\"let col of columns; let i = index\\\"&gt;\\n                    &lt;p-treeTableToggler [rowNode]=\\\"rowNode\\\" *ngIf=\\\"i == 0\\\"&gt;&lt;/p-treeTableToggler&gt;\\n                    &#123;&#123;rowData[col.field]&#125;&#125;\\n                &lt;/td&gt;\\n            &lt;/tr&gt;            \\n        &lt;/ng-template&gt;\\n    &lt;/p-treeTable&gt;\\n    &lt;p-footer&gt;\\n        &lt;button type=\\\"button\\\" pButton icon=\\\"pi pi-check\\\" (click)=\\\"dialogVisible=false\\\" label=\\\"Yes\\\"&gt;&lt;/button&gt;\\n        &lt;button type=\\\"button\\\" pButton icon=\\\"pi pi-times\\\" (click)=\\\"dialogVisible=false\\\" label=\\\"No\\\" class=\\\"ui-button-secondary\\\"&gt;&lt;/button&gt;\\n    &lt;/p-footer&gt;        \\n&lt;/p-dialog&gt;\\n</code>\\n</pre>\\n\\n            <h3>Full Page Scroll</h3>\\n            <p>FlexScroll can also be used for cases where scrollable viewport should be responsive with respect to the window size. See the <a [routerLink]=\\\"['/treetable/flexscroll']\\\">Full Page</a> demo for an example.</p>\\n\\n<pre>\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\n&lt;div class=\\\"content-section implementation\\\" style=\\\"height: calc(100vh - 149px)\\\"&gt;\\n    &lt;p-treeTable [value]=\\\"virtualFiles\\\" [columns]=\\\"cols\\\" [scrollable]=\\\"true\\\" [rows]=\\\"100\\\" scrollHeight=\\\"flex\\\"\\n        [virtualScroll]=\\\"true\\\" [virtualRowHeight]=\\\"34\\\"&gt;\\n        &lt;ng-template pTemplate=\\\"caption\\\"&gt;\\n            Virtual Scrolling with Full Page Viewport \\n        &lt;/ng-template&gt;\\n        &lt;ng-template pTemplate=\\\"header\\\" let-columns&gt;\\n            &lt;tr&gt;\\n                &lt;th *ngFor=\\\"let col of columns\\\"&gt;\\n                    &#123;&#123;col.header&#125;&#125;\\n                &lt;/th&gt;\\n            &lt;/tr&gt;\\n        &lt;/ng-template&gt;\\n        &lt;ng-template pTemplate=\\\"body\\\" let-rowNode let-rowData=\\\"rowData\\\" let-columns=\\\"columns\\\"&gt;\\n            &lt;tr style=\\\"height:34px\\\"&gt;\\n                &lt;td *ngFor=\\\"let col of columns; let i = index\\\"&gt;\\n                    &lt;p-treeTableToggler [rowNode]=\\\"rowNode\\\" *ngIf=\\\"i == 0\\\"&gt;&lt;/p-treeTableToggler&gt;\\n                    &#123;&#123;rowData[col.field]&#125;&#125;\\n                &lt;/td&gt;\\n            &lt;/tr&gt;\\n        &lt;/ng-template&gt;\\n    &lt;/p-treeTable&gt;\\n&lt;/div&gt;\\n</code>\\n</pre>\\n\\n            <h3>Horizontal Scrolling</h3>\\n            <p>In horizontal scrolling on the other hand, it is important to give fixed widths to columns. In general when customizing the column widths of scrollable tables,\\n                use colgroup as below to avoid misalignment issues as it will apply both the header, body and footer sections which are different separate elements internally.</p>\\n\\n<pre>\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\n&lt;p-treeTable [value]=\\\"files\\\" [columns]=\\\"cols\\\" [scrollable]=\\\"true\\\" [style]=\\\"&#123;width:'600px'&#125;\\\"&gt;\\n    &lt;ng-template pTemplate=\\\"colgroup\\\" let-columns&gt;\\n        &lt;colgroup&gt;\\n            &lt;col *ngFor=\\\"let col of columns\\\" style=\\\"width:350px\\\"&gt;\\n        &lt;/colgroup&gt;\\n    &lt;/ng-template&gt;\\n    &lt;ng-template pTemplate=\\\"header\\\" let-columns&gt;\\n        &lt;tr&gt;\\n            &lt;th *ngFor=\\\"let col of columns\\\"&gt;\\n                &#123;&#123;col.header&#125;&#125;\\n            &lt;/th&gt;\\n        &lt;/tr&gt;\\n    &lt;/ng-template&gt;\\n    &lt;ng-template pTemplate=\\\"body\\\" let-rowNode let-rowData=\\\"rowData\\\" let-columns=\\\"columns\\\"&gt;\\n        &lt;tr&gt;\\n            &lt;td *ngFor=\\\"let col of columns; let i = index\\\"&gt;\\n                &lt;p-treeTableToggler [rowNode]=\\\"rowNode\\\" *ngIf=\\\"i == 0\\\"&gt;&lt;/p-treeTableToggler&gt;\\n                &#123;&#123;rowData[col.field]&#125;&#125;\\n            &lt;/td&gt;\\n        &lt;/tr&gt;\\n    &lt;/ng-template&gt;\\n&lt;/p-treeTable&gt;\\n</code>\\n</pre>\\n\\n        <p>Horizontal and Vertical scrolling can be combined as well on the same table.</p>\\n<pre>\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\n&lt;p-treeTable [value]=\\\"files\\\" [columns]=\\\"cols\\\" [scrollable]=\\\"true\\\" scrollHeight=\\\"200px\\\" [style]=\\\"&#123;width:'600px'&#125;\\\"&gt;\\n    &lt;ng-template pTemplate=\\\"colgroup\\\" let-columns&gt;\\n        &lt;colgroup&gt;\\n            &lt;col *ngFor=\\\"let col of columns\\\" style=\\\"width:350px\\\"&gt;\\n        &lt;/colgroup&gt;\\n    &lt;/ng-template&gt;\\n    &lt;ng-template pTemplate=\\\"header\\\" let-columns&gt;\\n        &lt;tr&gt;\\n            &lt;th *ngFor=\\\"let col of columns\\\"&gt;\\n                &#123;&#123;col.header&#125;&#125;\\n            &lt;/th&gt;\\n        &lt;/tr&gt;\\n    &lt;/ng-template&gt;\\n    &lt;ng-template pTemplate=\\\"body\\\" let-rowNode let-rowData=\\\"rowData\\\" let-columns=\\\"columns\\\"&gt;\\n        &lt;tr&gt;\\n            &lt;td *ngFor=\\\"let col of columns; let i = index\\\"&gt;\\n                &lt;p-treeTableToggler [rowNode]=\\\"rowNode\\\" *ngIf=\\\"i == 0\\\"&gt;&lt;/p-treeTableToggler&gt;\\n                &#123;&#123;rowData[col.field]&#125;&#125;\\n            &lt;/td&gt;\\n        &lt;/tr&gt;\\n    &lt;/ng-template&gt;\\n&lt;/p-treeTable&gt;\\n</code>\\n</pre>\\n\\n        <h3>Frozen Columns</h3>\\n        <p>Particular columns can be made fixed where others remain scrollable, there are to ways to implement this functionality, either\\n            define a <i>frozenColumns</i> property if your frozen columns are dynamic or use frozenbody template. The width of the frozen section also\\n            must be defined with frozenWidth property. Templates including header, body and footer apply to the frozen section as well, however\\n            if require different content for the frozen section use frozenheader, frozenbody and frozenfooter instead.\\n        </p>\\n\\n<pre>\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\n&lt;p-treeTable [value]=\\\"files\\\" [columns]=\\\"scrollableCols\\\" [frozenColumns]=\\\"frozenCols\\\" [scrollable]=\\\"true\\\" scrollHeight=\\\"200px\\\" frozenWidth=\\\"200px\\\"&gt;\\n    &lt;ng-template pTemplate=\\\"colgroup\\\" let-columns&gt;\\n        &lt;colgroup&gt;\\n            &lt;col *ngFor=\\\"let col of columns\\\" style=\\\"width:250px\\\"&gt;\\n        &lt;/colgroup&gt;\\n    &lt;/ng-template&gt;\\n    &lt;ng-template pTemplate=\\\"header\\\" let-columns&gt;\\n        &lt;tr&gt;\\n            &lt;th *ngFor=\\\"let col of columns\\\"&gt;\\n                &#123;&#123;col.header&#125;&#125;\\n            &lt;/th&gt;\\n        &lt;/tr&gt;\\n    &lt;/ng-template&gt;\\n    &lt;ng-template pTemplate=\\\"body\\\" let-rowData=\\\"rowData\\\" let-columns=\\\"columns\\\"&gt;\\n        &lt;tr&gt;\\n            &lt;td *ngFor=\\\"let col of columns; let i = index\\\"&gt;\\n                &#123;&#123;rowData[col.field]&#125;&#125;\\n            &lt;/td&gt;\\n        &lt;/tr&gt;\\n    &lt;/ng-template&gt;\\n    &lt;ng-template pTemplate=\\\"frozenbody\\\" let-rowNode let-rowData=\\\"rowData\\\"&gt;\\n        &lt;tr&gt;\\n            &lt;td&gt;\\n                &lt;p-treeTableToggler [rowNode]=\\\"rowNode\\\"&gt;&lt;/p-treeTableToggler&gt;\\n                &#123;&#123;rowData.name&#125;&#125;\\n            &lt;/td&gt;\\n        &lt;/tr&gt;\\n    &lt;/ng-template&gt;\\n&lt;/p-treeTable&gt;\\n</code>\\n</pre>\\n\\n            <p>When frozen columns are enabled, frozen and scrollable cells may have content with varying height which leads to misalignment. To avoid a performance hit, Table avoids expensive calculations\\n             to align the row heights as it can be easily done with templating.</p>\\n<pre>\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\n&lt;ng-template pTemplate=\\\"body\\\" let-rowData=\\\"rowData\\\" let-columns=\\\"columns\\\"&gt;\\n    &lt;tr style=\\\"30px\\\"&gt;\\n        &lt;td *ngFor=\\\"let col of columns; let i = index\\\"&gt;\\n            &#123;&#123;rowData[col.field]&#125;&#125;\\n        &lt;/td&gt;\\n    &lt;/tr&gt;\\n&lt;/ng-template&gt;\\n</code>\\n</pre>\\n\\n            <h3>Virtual Scrolling</h3>\\n            <p>VirtualScroller is a performant approach to handle huge data efficiently. Setting <i>virtualScroll</i> property as true and providing a <i>virtualRowHeight</i> in pixels\\n                would be enough to enable this functionality. It is also suggested to use the same virtualRowHeight value on the tr element inside the body template.</p>\\n<pre>\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\n&lt;p-treeTable [value]=\\\"virtualFiles\\\" [columns]=\\\"cols\\\" [scrollable]=\\\"true\\\" [rows]=\\\"100\\\" scrollHeight=\\\"200px\\\"\\n    [virtualScroll]=\\\"true\\\" [virtualRowHeight]=\\\"34\\\"&gt;\\n    &lt;ng-template pTemplate=\\\"header\\\" let-columns&gt;\\n        &lt;tr&gt;\\n            &lt;th *ngFor=\\\"let col of columns\\\"&gt;\\n                &#123;&#123;col.header&#125;&#125;\\n            &lt;/th&gt;\\n        &lt;/tr&gt;\\n    &lt;/ng-template&gt;\\n    &lt;ng-template pTemplate=\\\"body\\\" let-rowNode let-rowData=\\\"rowData\\\" let-columns=\\\"columns\\\"&gt;\\n        &lt;tr style=\\\"height:34px\\\"&gt;\\n            &lt;td *ngFor=\\\"let col of columns; let i = index\\\"&gt;\\n                &lt;p-treeTableToggler [rowNode]=\\\"rowNode\\\" *ngIf=\\\"i == 0\\\"&gt;&lt;/p-treeTableToggler&gt;\\n                &#123;&#123;rowData[col.field]&#125;&#125;\\n            &lt;/td&gt;\\n        &lt;/tr&gt;\\n    &lt;/ng-template&gt;\\n&lt;/p-treeTable&gt;\\n</code>\\n</pre>\\n\\n            <p>See the <a [routerLink]=\\\"['/treetable/scroll']\\\">scroll</a> and <a [routerLink]=\\\"['/treetable/virtualscroll']\\\">virtual scroll</a> examples.</p>\\n\\n            <h3>Lazy Loading</h3>\\n            <p>Lazy mode is handy to deal with large datasets, instead of loading the entire data, small chunks of data is loaded by invoking\\n            onLazyLoad callback everytime paging and sorting. To implement lazy loading,\\n            enable <i>lazy</i> attribute and provide a method callback using <i>onLazyLoad</i> that actually loads the data from a remote datasource. onLazyLoad gets an event object\\n            that contains information about how the data should be loaded. It is also important to assign the logical number of rows to totalRecords by doing a projection query for paginator configuration so that paginator\\n            displays the UI assuming there are actually records of totalRecords size although in reality they aren't as in lazy mode, only the records that are displayed on the current page exist.</p>\\n\\n            <pre>\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\n&lt;p-treeTable [value]=\\\"files\\\" [columns]=\\\"cols\\\" [paginator]=\\\"true\\\" [rows]=\\\"10\\\" [lazy]=\\\"true\\\"\\n    (onLazyLoad)=\\\"loadNodes($event)\\\" [totalRecords]=\\\"totalRecords\\\"&gt;\\n    &lt;ng-template pTemplate=\\\"header\\\" let-columns&gt;\\n        &lt;tr&gt;\\n            &lt;th *ngFor=\\\"let col of columns\\\"&gt;\\n                &#123;&#123;col.header&#125;&#125;\\n            &lt;/th&gt;\\n        &lt;/tr&gt;\\n    &lt;/ng-template&gt;\\n    &lt;ng-template pTemplate=\\\"body\\\" let-rowNode let-rowData=\\\"rowData\\\" let-columns=\\\"columns\\\"&gt;\\n        &lt;tr&gt;\\n            &lt;td *ngFor=\\\"let col of columns; let i = index\\\"&gt;\\n                &lt;p-treeTableToggler [rowNode]=\\\"rowNode\\\" *ngIf=\\\"i == 0\\\"&gt;&lt;/p-treeTableToggler&gt;\\n                &#123;&#123;rowData[col.field]&#125;&#125;\\n            &lt;/td&gt;\\n        &lt;/tr&gt;\\n    &lt;/ng-template&gt;\\n&lt;/p-treeTable&gt;\\n</code>\\n</pre>\\n\\n<pre>\\n<code class=\\\"language-typescript\\\" pCode ngNonBindable>\\nloadNodes(event: LazyLoadEvent) &#123;\\n    //event.first = First row offset\\n    //event.rows = Number of rows per page\\n    //event.sortField = Field name to sort in single sort mode\\n    //event.sortOrder = Sort order as number, 1 for asc and -1 for dec in single sort mode\\n    //event.multiSortMeta: An array of SortMeta objects used in multiple columns sorting. Each SortMeta has field and order properties.\\n    //event.filters: FilterMetadata object having field as key and filter value, filter matchMode as value\\n    //event.globalFilter: Value of the global filter if available\\n\\n    this.files = //do a request to a remote datasource using a service and return the cars that match the lazy load criteria\\n&#125;\\n</code>\\n</pre>\\n\\n            <p>Lazy loading applies to the first level nodes in the tree hierarchy, instead if you need to lazy load the children of a node, set <i>leaf</i> as true on that node\\n                and use onNodeExpand event to load children when a node is expanded only.</p>\\n<pre>\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\n&lt;p-treeTable [value]=\\\"files\\\" [columns]=\\\"cols\\\" (onNodeExpand)=\\\"onNodeExpand($event)\\\"&gt;\\n    &lt;ng-template pTemplate=\\\"header\\\" let-columns&gt;\\n        &lt;tr&gt;\\n            &lt;th *ngFor=\\\"let col of columns\\\"&gt;\\n                &#123;&#123;col.header&#125;&#125;\\n            &lt;/th&gt;\\n        &lt;/tr&gt;\\n    &lt;/ng-template&gt;\\n    &lt;ng-template pTemplate=\\\"body\\\" let-rowNode let-rowData=\\\"rowData\\\" let-columns=\\\"columns\\\"&gt;\\n        &lt;tr&gt;\\n            &lt;td *ngFor=\\\"let col of columns; let i = index\\\"&gt;\\n                &lt;p-treeTableToggler [rowNode]=\\\"rowNode\\\" *ngIf=\\\"i == 0\\\"&gt;&lt;/p-treeTableToggler&gt;\\n                &#123;&#123;rowData[col.field]&#125;&#125;\\n            &lt;/td&gt;\\n        &lt;/tr&gt;\\n    &lt;/ng-template&gt;\\n&lt;/p-treeTable&gt;\\n</code>\\n</pre>\\n\\n<pre>\\n<code class=\\\"language-typescript\\\" pCode ngNonBindable>\\nonNodeExpand(event) &#125;\\n    //const node = event.node;\\n    //populate node.children\\n\\n    //refresh the data\\n    this.files = [...this.files];\\n&#125;\\n</code>\\n</pre>\\n\\n            <p>See the <a [routerLink]=\\\"['/treetable/lazy']\\\">live example.</a></p>\\n\\n            <h3>Responsive</h3>\\n            <p>TreeTable does not provide a built-in responsive feature as it is easy to implement as you have full control over the presentation, here is an\\n                example with media queries.</p>\\n<pre>\\n<code class=\\\"language-typescript\\\" pCode ngNonBindable>\\n@Component(&#123;\\n    templateUrl: './treetableresponsivedemo.html',\\n    styles: [`\\n        :host ::ng-deep .priority-2,\\n        :host ::ng-deep .priority-3,\\n        :host ::ng-deep .visibility-sm &#123;\\n            display: none;\\n        &#125;\\n\\n        @media screen and (max-width: 39.938em) &#123;\\n            :host ::ng-deep .visibility-sm &#123;\\n                display: inline;\\n            &#125;\\n        &#125;\\n\\n        @media screen and (min-width: 40em) &#123;\\n            :host ::ng-deep .priority-2 &#123;\\n                display: table-cell;\\n            &#125;\\n        &#125;\\n\\n        @media screen and (min-width: 64em) &#123;\\n            :host ::ng-deep .priority-3 &#123;\\n                display: table-cell;\\n            &#125;\\n        &#125;\\n    `]\\n&#125;)\\nexport class TreeTableResponsiveDemo &#123;\\n\\n    files: TreeNode[];\\n\\n    cols: any[];\\n\\n    constructor(private nodeService: NodeService) &#123; &#125;\\n\\n    ngOnInit() &#123;\\n        this.nodeService.getFilesystem().then(files => this.files = files);\\n\\n        this.cols = [\\n            &#123; field: 'name', header: 'Name' &#125;,\\n            &#123; field: 'size', header: 'Size' &#125;,\\n            &#123; field: 'type', header: 'Type' &#125;\\n        ];\\n    &#125;\\n&#125;\\n</code>\\n</pre>\\n\\n<pre>\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\n&lt;p-treeTable [value]=\\\"files\\\"&gt;\\n    &lt;ng-template pTemplate=\\\"header\\\"&gt;\\n        &lt;tr&gt;\\n            &lt;th&gt;Name&lt;/th&gt;\\n            &lt;th class=\\\"priority-2\\\"&gt;Size&lt;/th&gt;\\n            &lt;th class=\\\"priority-3\\\"&gt;Type&lt;/th&gt;\\n        &lt;/tr&gt;\\n    &lt;/ng-template&gt;\\n    &lt;ng-template pTemplate=\\\"body\\\" let-rowNode let-rowData=\\\"rowData\\\"&gt;\\n        &lt;tr&gt;\\n            &lt;td&gt;\\n                &lt;p-treeTableToggler [rowNode]=\\\"rowNode\\\"&gt;&lt;/p-treeTableToggler&gt;\\n                &#123;&#123;rowData.name&#125;&#125;\\n                &lt;span class=\\\"visibility-sm\\\"&gt;\\n                    / &#123;&#123;rowData.size&#125;&#125; - &#123;&#123;rowData.type&#125;&#125;\\n                &lt;/span&gt;\\n            &lt;/td&gt;\\n            &lt;td class=\\\"priority-2\\\"&gt;&#123;&#123;rowData.size&#125;&#125;&lt;/td&gt;\\n            &lt;td class=\\\"priority-3\\\"&gt;&#123;&#123;rowData.type&#125;&#125;&lt;/td&gt;\\n        &lt;/tr&gt;\\n    &lt;/ng-template&gt;\\n&lt;/p-treeTable&gt;\\n</code>\\n</pre>\\n            <p>See the <a [routerLink]=\\\"['/treetable/responsive']\\\">live example.</a></p>\\n\\n            <h3>EmptyMessage</h3>\\n            <p>When there is no data, <i>emptymessage</i> template can be used to display a message.</p>\\n<pre>\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\n&lt;p-treeTable [value]=\\\"files\\\"&gt;\\n    &lt;ng-template pTemplate=\\\"header\\\"&gt;\\n        &lt;tr&gt;\\n            &lt;th&gt;Name&lt;/th&gt;\\n            &lt;th&gt;Size&lt;/th&gt;\\n            &lt;th&gt;Type&lt;/th&gt;\\n        &lt;/tr&gt;\\n    &lt;/ng-template&gt;\\n    &lt;ng-template pTemplate=\\\"body\\\" let-rowNode let-rowData=\\\"rowData\\\"&gt;\\n        &lt;tr&gt;\\n            &lt;td&gt;\\n                &lt;p-treeTableToggler [rowNode]=\\\"rowNode\\\"&gt;&lt;/p-treeTableToggler&gt;\\n                &#123;&#123;rowData.name&#125;&#125;\\n            &lt;/td&gt;\\n            &lt;td&gt;&#123;&#123;rowData.size&#125;&#125;&lt;/td&gt;\\n            &lt;td&gt;&#123;&#123;rowData.type&#125;&#125;&lt;/td&gt;\\n        &lt;/tr&gt;\\n    &lt;/ng-template&gt;\\n    &lt;ng-template pTemplate=\\\"emptymessage\\\" let-columns&gt;\\n        &lt;tr&gt;\\n            &lt;td [attr.colspan]=\\\"columns.length\\\"&gt;\\n                No records found\\n            &lt;/td&gt;\\n        &lt;/tr&gt;\\n    &lt;/ng-template&gt;\\n&lt;/p-treeTable&gt;\\n</code>\\n</pre>\\n\\n            <h3>Loading Status</h3>\\n            <p>TreeTable has a <i>loading</i> property, when enabled a spinner icon is displayed to indicate data load.\\n                An optional <i>loadingIcon</i> property can be passed in case you'd like a different loading icon.</p>\\n<pre>\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\n&lt;p-treeTable [value]=\\\"files\\\" [columns]=\\\"cols\\\" [loading]=\\\"loading\\\"&gt;\\n    &lt;ng-template pTemplate=\\\"header\\\" let-columns&gt;\\n        &lt;tr&gt;\\n            &lt;th *ngFor=\\\"let col of columns\\\"&gt;\\n                &#123;&#123;col.header&#125;&#125;\\n            &lt;/th&gt;\\n        &lt;/tr&gt;\\n    &lt;/ng-template&gt;\\n    &lt;ng-template pTemplate=\\\"body\\\" let-rowNode let-rowData=\\\"rowData\\\" let-columns=\\\"columns\\\"&gt;\\n        &lt;tr&gt;\\n            &lt;td *ngFor=\\\"let col of columns; let i = index\\\"&gt;\\n                &lt;p-treeTableToggler [rowNode]=\\\"rowNode\\\" *ngIf=\\\"i == 0\\\"&gt;&lt;/p-treeTableToggler&gt;\\n                &#123;&#123;rowData[col.field]&#125;&#125;\\n            &lt;/td&gt;\\n        &lt;/tr&gt;\\n    &lt;/ng-template&gt;\\n&lt;/p-treeTable&gt;\\n</code>\\n</pre>\\n\\n<pre>\\n<code class=\\\"language-typescript\\\" pCode ngNonBindable>\\nexport class TreeTableDemo implements OnInit &#123;\\n\\n    files: TreeNode[];\\n\\n    loading: boolean;\\n\\n    cols: any[];\\n\\n    constructor(private nodeService: NodeService) &#123; &#125;\\n\\n    ngOnInit() &#123;\\n        this.loading = true;\\n        this.nodeService.getFilesystem().then(files => &#123;\\n            this.files = files;\\n            this.loading = false;\\n        &#123;);\\n\\n        this.cols = [\\n            &#123; field: 'name', header: 'Name' &#125;,\\n            &#123; field: 'size', header: 'Size' &#125;,\\n            &#123; field: 'type', header: 'Type' &#125;\\n        ];\\n    &#125;\\n&#125;\\n</code>\\n</pre>\\n\\n            <h3>Styling Certain Rows and Columns</h3>\\n            <p>Certain rows and cells can easily be styled using templating features. In example below, the row whose vin property is '123' will get the 'success' style class. Example here\\n                paint the background of the last cell using a colgroup and highlights rows whose year is older than 2000.\\n            </p>\\n<pre>\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\n&lt;p-treeTable [value]=\\\"files\\\" [columns]=\\\"cols\\\"&gt;\\n    &lt;ng-template pTemplate=\\\"header\\\" let-columns&gt;\\n        &lt;tr&gt;\\n            &lt;th *ngFor=\\\"let col of columns\\\"&gt;\\n                &#123;&#123;col.header&#125;&#125;\\n            &lt;/th&gt;\\n        &lt;/tr&gt;\\n    &lt;/ng-template&gt;\\n    &lt;ng-template pTemplate=\\\"body\\\" let-rowNode let-rowData=\\\"rowData\\\" let-columns=\\\"columns\\\"&gt;\\n        &lt;tr [ngClass]=\\\"&#123;'kb-row': rowData.size.endsWith('kb')&#125;\\\"&gt;\\n            &lt;td *ngFor=\\\"let col of columns; let i = index\\\" [ngClass]=\\\"&#123;'kb-cell': col.field === 'size' && rowData.size.endsWith('kb')&#125;\\\"&gt;\\n                &lt;p-treeTableToggler [rowNode]=\\\"rowNode\\\" *ngIf=\\\"i == 0\\\"&gt;&lt;/p-treeTableToggler&gt;\\n                &#123;&#123;rowData[col.field]&#125;&#125;\\n            &lt;/td&gt;\\n        &lt;/tr&gt;\\n    &lt;/ng-template&gt;\\n&lt;/p-treeTable&gt;\\n</code>\\n</pre>\\n\\n            <p>See the <a [routerLink]=\\\"['/treetable/style']\\\">live example.</a></p>\\n\\n            <h3>Performance Tips</h3>\\n            <ul>\\n                <li>When selection is enabled use dataKey to avoid deep checking when comparing objects.</li>\\n                <li>Use rowTrackBy to avoid unnecessary dom operations.</li>\\n                <li>Prefer lazy loading techniques for large datasets.</li>\\n            </ul>\\n\\n            <h3>Properties</h3>\\n            <div class=\\\"doc-tablewrapper\\\">\\n                <table class=\\\"doc-table\\\">\\n                    <thead>\\n                        <tr>\\n                            <th>Name</th>\\n                            <th>Type</th>\\n                            <th>Default</th>\\n                            <th>Description</th>\\n                        </tr>\\n                    </thead>\\n                    <tbody>\\n                        <tr>\\n                            <td>value</td>\\n                            <td>array</td>\\n                            <td>null</td>\\n                            <td>An array of objects to display.</td>\\n                        </tr>\\n                        <tr>\\n                            <td>columns</td>\\n                            <td>array</td>\\n                            <td>null</td>\\n                            <td>An array of objects to represent dynamic columns.</td>\\n                        </tr>\\n                        <tr>\\n                            <td>style</td>\\n                            <td>string</td>\\n                            <td>null</td>\\n                            <td>Inline style of the component.</td>\\n                        </tr>\\n                        <tr>\\n                            <td>styleClass</td>\\n                            <td>string</td>\\n                            <td>null</td>\\n                            <td>Style class of the component.</td>\\n                        </tr>\\n                        <tr>\\n                            <td>tableStyle</td>\\n                            <td>any</td>\\n                            <td>null</td>\\n                            <td>Inline style of the table.</td>\\n                        </tr>\\n                        <tr>\\n                            <td>tableStyleClass</td>\\n                            <td>string</td>\\n                            <td>null</td>\\n                            <td>Style class of the table.</td>\\n                        </tr>\\n                        <tr>\\n                            <td>autoLayout</td>\\n                            <td>boolean</td>\\n                            <td>false</td>\\n                            <td>Whether the cell widths scale according to their content or not.</td>\\n                        </tr>\\n                        <tr>\\n                            <td>lazy</td>\\n                            <td>boolean</td>\\n                            <td>false</td>\\n                            <td>Defines if data is loaded and interacted with in lazy manner.</td>\\n                        </tr>\\n                        <tr>\\n                            <td>lazyLoadOnInit</td>\\n                            <td>boolean</td>\\n                            <td>true</td>\\n                            <td>Whether to call lazy loading on initialization.</td>\\n                        </tr>\\n                        <tr>\\n                            <td>paginator</td>\\n                            <td>boolean</td>\\n                            <td>false</td>\\n                            <td>When specified as true, enables the pagination.</td>\\n                        </tr>\\n                        <tr>\\n                            <td>rows</td>\\n                            <td>number</td>\\n                            <td>null</td>\\n                            <td>Number of rows to display per page.</td>\\n                        </tr>\\n                        <tr>\\n                            <td>first</td>\\n                            <td>number</td>\\n                            <td>0</td>\\n                            <td>Index of the first row to be displayed.</td>\\n                        </tr>\\n                        <tr>\\n                            <td>totalRecords</td>\\n                            <td>number</td>\\n                            <td>null</td>\\n                            <td>Number of total records, defaults to length of value when not defined.</td>\\n                        </tr>\\n                        <tr>\\n                            <td>pageLinks</td>\\n                            <td>number</td>\\n                            <td>null</td>\\n                            <td>Number of page links to display in paginator.</td>\\n                        </tr>\\n                        <tr>\\n                            <td>rowsPerPageOptions</td>\\n                            <td>array</td>\\n                            <td>null</td>\\n                            <td>Array of integer/object values to display inside rows per page dropdown of paginator</td>\\n                        </tr>\\n                        <tr>\\n                            <td>alwaysShowPaginator</td>\\n                            <td>boolean</td>\\n                            <td>true</td>\\n                            <td>Whether to show it even there is only one page.</td>\\n                        </tr>\\n                        <tr>\\n                            <td>paginatorPosition</td>\\n                            <td>string</td>\\n                            <td>bottom</td>\\n                            <td>Position of the paginator, options are \\\"top\\\",\\\"bottom\\\" or \\\"both\\\".</td>\\n                        </tr>\\n                        <tr>\\n                            <td>paginatorDropdownAppendTo</td>\\n                            <td>any</td>\\n                            <td>null</td>\\n                            <td>Target element to attach the paginator dropdown overlay, valid values are \\\"body\\\" or a local ng-template variable of another element (note: use binding with brackets for template variables, e.g. [appendTo]=\\\"mydiv\\\" for a div element having #mydiv as variable name).</td>\\n                        </tr>\\n                        <tr>\\n                            <td>currentPageReportTemplate</td>\\n                            <td>string</td>\\n                            <td>(&#123;currentPage&#125; of &#123;totalPages&#125;)</td>\\n                            <td>Template of the current page report element. Available placeholders are\\n                                &#123;currentPage&#125;,&#123;totalPages&#125;,&#123;rows&#125;,&#123;first&#125;,&#123;last&#125; and &#123;totalRecords&#125;\\n                            </td>\\n                        </tr>\\n                        <tr>\\n                            <td>showCurrentPageReport</td>\\n                            <td>boolean</td>\\n                            <td>false</td>\\n                            <td>Whether to display current page report.</td>\\n                        </tr>\\n                        <tr>\\n                            <td>defaultSortOrder</td>\\n                            <td>number</td>\\n                            <td>1</td>\\n                            <td>Sort order to use when an unsorted column gets sorted by user interaction.</td>\\n                        </tr>\\n                        <tr>\\n                            <td>sortMode</td>\\n                            <td>string</td>\\n                            <td>single</td>\\n                            <td>Defines whether sorting works on single column or on multiple columns.</td>\\n                        </tr>\\n                        <tr>\\n                            <td>resetPageOnSort</td>\\n                            <td>boolean</td>\\n                            <td>true</td>\\n                            <td>When true, resets paginator to first page after sorting.</td>\\n                        </tr>\\n                        <tr>\\n                            <td>customSort</td>\\n                            <td>boolean</td>\\n                            <td>false</td>\\n                            <td>Whether to use the default sorting or a custom one using sortFunction.</td>\\n                        </tr>\\n                        <tr>\\n                            <td>sortField</td>\\n                            <td>string</td>\\n                            <td>null</td>\\n                            <td>Name of the field to sort data by default.</td>\\n                        </tr>\\n                        <tr>\\n                            <td>sortOrder</td>\\n                            <td>number</td>\\n                            <td>1</td>\\n                            <td>Order to sort when default sorting is enabled.</td>\\n                        </tr>\\n                        <tr>\\n                            <td>multiSortMeta</td>\\n                            <td>array</td>\\n                            <td>null</td>\\n                            <td>An array of SortMeta objects to sort the data by default in multiple sort mode.</td>\\n                        </tr>\\n                        <tr>\\n                            <td>sortFunction</td>\\n                            <td>function</td>\\n                            <td>null</td>\\n                            <td>An event emitter to invoke on custom sorting, refer to sorting section for details.</td>\\n                        </tr>\\n                        <tr>\\n                            <td>filters</td>\\n                            <td>array</td>\\n                            <td>null</td>\\n                            <td>An array of FilterMetadata objects to provide external filters.</td>\\n                        </tr>\\n                        <tr>\\n                            <td>filterDelay</td>\\n                            <td>number</td>\\n                            <td>300</td>\\n                            <td>Delay in milliseconds before filtering the data.</td>\\n                        </tr>\\n                        <tr>\\n                            <td>globalFilterFields</td>\\n                            <td>array</td>\\n                            <td>null</td>\\n                            <td>An array of fields as string to use in global filtering.</td>\\n                        </tr>\\n                        <tr>\\n                            <td>filterMode</td>\\n                            <td>string</td>\\n                            <td>lenient</td>\\n                            <td>Mode for filtering valid values are \\\"lenient\\\" and \\\"strict\\\". Default is lenient.</td>\\n                        </tr>\\n                        <tr>\\n                            <td>filterLocale</td>\\n                            <td>string</td>\\n                            <td>undefined</td>\\n                            <td>Locale to use in filtering. The default locale is the host environment's current locale.</td>\\n                        </tr>\\n                        <tr>\\n                            <td>selectionMode</td>\\n                            <td>string</td>\\n                            <td>null</td>\\n                            <td>Specifies the selection mode, valid values are \\\"single\\\" and \\\"multiple\\\".</td>\\n                        </tr>\\n                        <tr>\\n                            <td>selection</td>\\n                            <td>any</td>\\n                            <td>null</td>\\n                            <td>Selected row in single mode or an array of values in multiple mode.</td>\\n                        </tr>\\n                        <tr>\\n                            <td>contextMenuSelection</td>\\n                            <td>any</td>\\n                            <td>null</td>\\n                            <td>Selected row with a context menu.</td>\\n                        </tr>\\n                        <tr>\\n                            <td>dataKey</td>\\n                            <td>string</td>\\n                            <td>null</td>\\n                            <td>A property to uniquely identify a record in data.</td>\\n                        </tr>\\n                        <tr>\\n                            <td>metaKeySelection</td>\\n                            <td>boolean</td>\\n                            <td>true</td>\\n                            <td>Defines whether metaKey is should be considered for the selection. On touch enabled devices, metaKeySelection is turned off automatically.</td>\\n                        </tr>\\n                        <tr>\\n                            <td>compareSelectionBy</td>\\n                            <td>string</td>\\n                            <td>deepEquals</td>\\n                            <td>Algorithm to define if a row is selected, valid values are \\\"equals\\\" that compares by reference and \\\"deepEquals\\\" that compares all fields.</td>\\n                        </tr>\\n                        <tr>\\n                            <td>rowHover</td>\\n                            <td>boolean</td>\\n                            <td>false</td>\\n                            <td>Adds hover effect to rows without the need for selectionMode.</td>\\n                        </tr>\\n                        <tr>\\n                            <td>loading</td>\\n                            <td>boolean</td>\\n                            <td>false</td>\\n                            <td>Displays a loader to indicate data load is in progress.</td>\\n                        </tr>\\n                        <tr>\\n                            <td>loadingIcon</td>\\n                            <td>string</td>\\n                            <td>pi pi-spinner</td>\\n                            <td>The icon to show while indicating data load is in progress.</td>\\n                        </tr>\\n                        <tr>\\n                            <td>showLoader</td>\\n                            <td>boolean</td>\\n                            <td>true</td>\\n                            <td>Whether to show the loading mask when loading property is true.</td>\\n                        </tr>\\n                        <tr>\\n                            <td>scrollable</td>\\n                            <td>boolean</td>\\n                            <td>false</td>\\n                            <td>When specifies, enables horizontal and/or vertical scrolling.</td>\\n                        </tr>\\n                        <tr>\\n                            <td>scrollHeight</td>\\n                            <td>string</td>\\n                            <td>null</td>\\n                            <td>Height of the scroll viewport in fixed pixels or the \\\"flex\\\" keyword for a dynamic size.</td>\\n                        </tr>\\n                        <tr>\\n                            <td>virtualScroll</td>\\n                            <td>boolean</td>\\n                            <td>false</td>\\n                            <td>Whether the data should be loaded on demand during scroll.</td>\\n                        </tr>\\n                        <tr>\\n                            <td>virtualRowHeight</td>\\n                            <td>number</td>\\n                            <td>28</td>\\n                            <td>Height of a row to use in calculations of virtual scrolling.</td>\\n                        </tr>\\n                        <tr>\\n                            <td>minBufferPx</td>\\n                            <td>number</td>\\n                            <td>null</td>\\n                            <td>Minimum amount of content buffer (in pixels) that the viewport must render.</td>\\n                        </tr>\\n                        <tr>\\n                            <td>maxBufferPx</td>\\n                            <td>number</td>\\n                            <td>null</td>\\n                            <td>Configures how much buffer space to render back up to when it detects that more buffer is required.</td>\\n                        </tr>\\n                        <tr>\\n                            <td>frozenWidth</td>\\n                            <td>string</td>\\n                            <td>null</td>\\n                            <td>Width of the frozen columns container.</td>\\n                        </tr>\\n                        <tr>\\n                            <td>frozenColumns</td>\\n                            <td>array</td>\\n                            <td>null</td>\\n                            <td>An array of objects to represent dynamic columns that are frozen.</td>\\n                        </tr>\\n                        <tr>\\n                            <td>resizableColumns</td>\\n                            <td>boolean</td>\\n                            <td>false</td>\\n                            <td>When enabled, columns can be resized using drag and drop.</td>\\n                        </tr>\\n                        <tr>\\n                            <td>columnResizeMode</td>\\n                            <td>string</td>\\n                            <td>fit</td>\\n                            <td>Defines whether the overall table width should change on column resize, valid values are \\\"fit\\\" and \\\"expand\\\".</td>\\n                        </tr>\\n                        <tr>\\n                            <td>reorderableColumns</td>\\n                            <td>boolean</td>\\n                            <td>false</td>\\n                            <td>When enabled, columns can be reordered using drag and drop.</td>\\n                        </tr>\\n                        <tr>\\n                            <td>contextMenu</td>\\n                            <td>ContextMenu</td>\\n                            <td>null</td>\\n                            <td>Local ng-template varilable of a ContextMenu.</td>\\n                        </tr>\\n                        <tr>\\n                            <td>rowTrackBy</td>\\n                            <td>Function</td>\\n                            <td>null</td>\\n                            <td>Function to optimize the dom operations by delegating to ngForTrackBy, default algoritm checks for object identity.</td>\\n                        </tr>\\n                    </tbody>\\n                </table>\\n            </div>\\n\\n            <h3>Events</h3>\\n            <div class=\\\"doc-tablewrapper\\\">\\n                <table class=\\\"doc-table\\\">\\n                    <thead>\\n                    <tr>\\n                        <th>Name</th>\\n                        <th>Parameters</th>\\n                        <th>Description</th>\\n                    </tr>\\n                    </thead>\\n                    <tbody>\\n                        <tr>\\n                            <td>onNodeExpand</td>\\n                            <td>event.originalEvent: Browser event<br>\\n                                node: Expanded node.</td>\\n                            <td>Callback to invoke when a node is expanded.</td>\\n                        </tr>\\n                        <tr>\\n                            <td>onNodeCollapse</td>\\n                            <td>event.originalEvent: Browser event<br>\\n                                node: Collapsed node.</td>\\n                            <td>Callback to invoke when a node is collapsed.</td>\\n                        </tr>\\n                        <tr>\\n                            <td>onPage</td>\\n                            <td>event.first: Index of first record in page<br>\\n                                event.rows: Number of rows on the page</td>\\n                            <td>Callback to invoke when pagination occurs.</td>\\n                        </tr>\\n                        <tr>\\n                            <td>onSort</td>\\n                            <td>event.field: Field name of the sorted column<br>\\n                                event.order: Sort order as 1 or -1<br>\\n                                event.multisortmeta: Sort metadata in multi sort mode. See multiple sorting section for the structure of this object.</td>\\n                            <td>Callback to invoke when a column gets sorted.</td>\\n                        </tr>\\n                        <tr>\\n                            <td>onFilter</td>\\n                            <td>event.filters: Filters object having a field as the property key and an object with value, matchMode as the property value.<br>\\n                                event.filteredValue: Filtered data after running the filtering.</td>\\n                            <td>Callback to invoke when data is filtered.</td>\\n                        </tr>\\n                        <tr>\\n                            <td>onLazyLoad</td>\\n                            <td>event.first = First row offset <br>\\n                                event.rows = Number of rows per page <br>\\n                                event.sortField = Field name to sort with <br>\\n                                event.sortOrder = Sort order as number, 1 for asc and -1 for dec <br>\\n                                event.multiSortMeta: An array of SortMeta objects used in multiple columns sorting. Each SortMeta has field and order properties.</td>\\n                                event.filters: FilterMetadata object having field as key and filter value, filter matchMode as value<br>\\n                                event.globalFilter: Value of the global filter if available\\n                            <td>Callback to invoke when paging, sorting or filtering happens in lazy mode.</td>\\n                        </tr>\\n                        <tr>\\n                            <td>onColResize</td>\\n                            <td>event.element: Resized column header <br>\\n                                event.delta: Change of width in number of pixels</td>\\n                            <td>Callback to invoke when a column is resized.</td>\\n                        </tr>\\n                        <tr>\\n                            <td>onColReorder</td>\\n                            <td>event.dragIndex: Index of the dragged column <br>\\n                                event.dropIndex: Index of the dropped column <br>\\n                                event.columns: Columns array after reorder.</td>\\n                            <td>Callback to invoke when a column is reordered.</td>\\n                        </tr>\\n                        <tr>\\n                            <td>onNodeSelect</td>\\n                            <td>event.originalEvent: Browser event <br>\\n                                event.nıde: Selected node\\n                            </td>\\n                            <td>Callback to invoke when a node is selected.</td>\\n                        </tr>\\n                        <tr>\\n                            <td>onNodeUnselect</td>\\n                            <td>event.originalEvent: Browser event <br>\\n                                event.data: Unselected node</td>\\n                            <td>Callback to invoke when a node is unselected.</td>\\n                        </tr>\\n                        <tr>\\n                            <td>onContextMenuSelect</td>\\n                            <td>event.originalEvent: Browser event <br>\\n                                event.node: Selected node</td>\\n                            <td>Callback to invoke when a node is selected with right click.</td>\\n                        </tr>\\n                        <tr>\\n                            <td>onHeaderCheckboxToggle</td>\\n                            <td>event.originalEvent: Browser event <br>\\n                                event.checked: State of the header checkbox</td>\\n                            <td>Callback to invoke when state of header checkbox changes.</td>\\n                        </tr>\\n                        <tr>\\n                            <td>onEditInit</td>\\n                            <td>event.column: Column object of the cell<br>\\n                                event.data: Node data</td>\\n                            <td>Callback to invoke when a cell switches to edit mode.</td>\\n                        </tr>\\n                        <tr>\\n                            <td>onEditComplete</td>\\n                            <td>event.column: Column object of the cell<br>\\n                                event.data: Node data</td>\\n                            <td>Callback to invoke when cell edit is completed.</td>\\n                        </tr>\\n                        <tr>\\n                            <td>onEditCancel</td>\\n                            <td>event.column: Column object of the cell<br>\\n                                event.data: Node data</td>\\n                            <td>Callback to invoke when cell edit is cancelled with escape key.</td>\\n                        </tr>\\n                    </tbody>\\n                </table>\\n            </div>\\n\\n            <h3>Methods</h3>\\n            <div class=\\\"doc-tablewrapper\\\">\\n                <table class=\\\"doc-table\\\">\\n                    <thead>\\n                        <tr>\\n                            <th>Name</th>\\n                            <th>Parameters</th>\\n                            <th>Description</th>\\n                        </tr>\\n                    </thead>\\n                    <tbody>\\n                        <tr>\\n                            <td>reset</td>\\n                            <td>-</td>\\n                            <td>Clears the sort and paginator state.</td>\\n                        </tr>\\n                    </tbody>\\n                </table>\\n            </div>\\n\\n            <h3>Styling</h3>\\n            <p>Following is the list of structural style classes, for theming classes visit <a href=\\\"#\\\" [routerLink]=\\\"['/theming']\\\">theming page</a>.</p>\\n            <div class=\\\"doc-tablewrapper\\\">\\n                <table class=\\\"doc-table\\\">\\n                    <thead>\\n                    <tr>\\n                        <th>Name</th>\\n                        <th>Element</th>\\n                    </tr>\\n                    </thead>\\n                    <tbody>\\n                        <tr>\\n                            <td>ui-treetable</td>\\n                            <td>Container element.</td>\\n                        </tr>\\n                        <tr>\\n                            <td>ui-treetable-caption</td>\\n                            <td>Caption element.</td>\\n                        </tr>\\n                        <tr>\\n                            <td>ui-treetable-summary</td>\\n                            <td>Section section.</td>\\n                        </tr>\\n                        <tr>\\n                            <td>ui-sortable-column</td>\\n                            <td>Sortable column header.</td>\\n                        </tr>\\n                        <tr>\\n                            <td>ui-treetable-scrollable-header</td>\\n                            <td>Container of header in a scrollable table.</td>\\n                        </tr>\\n                        <tr>\\n                            <td>ui-treetable-scrollable-body</td>\\n                            <td>Container of body in a scrollable table.</td>\\n                        </tr>\\n                        <tr>\\n                            <td>ui-treetable-scrollable-footer</td>\\n                            <td>Container of footer in a scrollable table.</td>\\n                        </tr>\\n                        <tr>\\n                            <td>ui-treetable-loading</td>\\n                            <td>Loader mask.</td>\\n                        </tr>\\n                        <tr>\\n                            <td>ui-treetable-loading-content</td>\\n                            <td>Loader content.</td>\\n                        </tr>\\n                        <tr>\\n                            <td>ui-treetable-wrapper</td>\\n                            <td>Loader content.</td>\\n                        </tr>\\n                        <tr>\\n                            <td>ui-treetable-scrollable-wrapper</td>\\n                            <td>Loader content.</td>\\n                        </tr>\\n                        <tr>\\n                            <td>ui-treetable-resizer-helper</td>\\n                            <td>Vertical resize indicator bar.</td>\\n                        </tr>\\n                        <tr>\\n                            <td>ui-treetable-reorder-indicator-top</td>\\n                            <td>Top indicator of column reordering.</td>\\n                        </tr>\\n                        <tr>\\n                            <td>ui-treetable-reorder-indicator-top</td>\\n                            <td>Bottom indicator of column reordering.</td>\\n                        </tr>\\n                    </tbody>\\n                </table>\\n            </div>\\n\\n            <h3>Dependencies</h3>\\n            <p>None.</p>\\n        </p-tabPanel>\\n        <p-tabPanel header=\\\"Source\\\">\\n            <a href=\\\"https://github.com/primefaces/primeng/tree/master/src/app/showcase/components/treetable\\\" class=\\\"btn-viewsource\\\" target=\\\"_blank\\\">\\n                <span>View on GitHub</span>\\n            </a>\\n            <a href=\\\"https://stackblitz.com/edit/primeng-treetable-demo\\\" class=\\\"btn-viewsource\\\" style=\\\"margin-left: .5em;\\\" target=\\\"_blank\\\">\\n                <span>Edit in StackBlitz</span>\\n            </a>\\n<pre>\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\n&lt;h3 class=\\\"first\\\"&gt;Basic&lt;/h3&gt;\\n&lt;p-treeTable [value]=\\\"files1\\\"&gt;\\n    &lt;ng-template pTemplate=\\\"header\\\"&gt;\\n        &lt;tr&gt;\\n            &lt;th&gt;Name&lt;/th&gt;\\n            &lt;th&gt;Size&lt;/th&gt;\\n            &lt;th&gt;Type&lt;/th&gt;\\n        &lt;/tr&gt;\\n    &lt;/ng-template&gt;\\n    &lt;ng-template pTemplate=\\\"body\\\" let-rowNode let-rowData=\\\"rowData\\\"&gt;\\n        &lt;tr [ttRow]=\\\"rowNode\\\"&gt;\\n            &lt;td&gt;\\n                &lt;p-treeTableToggler [rowNode]=\\\"rowNode\\\"&gt;&lt;/p-treeTableToggler&gt;\\n                &#123;&#123;rowData.name&#125;&#125;\\n            &lt;/td&gt;\\n            &lt;td&gt;&#123;&#123;rowData.size&#125;&#125;&lt;/td&gt;\\n            &lt;td&gt;&#123;&#123;rowData.type&#125;&#125;&lt;/td&gt;\\n        &lt;/tr&gt;\\n    &lt;/ng-template&gt;\\n&lt;/p-treeTable&gt;\\n\\n&lt;h3&gt;Dynamic Columns&lt;/h3&gt;\\n&lt;p-treeTable [value]=\\\"files2\\\" [columns]=\\\"cols\\\"&gt;\\n    &lt;ng-template pTemplate=\\\"header\\\" let-columns&gt;\\n        &lt;tr [ttRow]=\\\"rowNode\\\"&gt;\\n            &lt;th *ngFor=\\\"let col of columns\\\"&gt;\\n                &#123;&#123;col.header&#125;&#125;\\n            &lt;/th&gt;\\n        &lt;/tr&gt;\\n    &lt;/ng-template&gt;\\n    &lt;ng-template pTemplate=\\\"body\\\" let-rowNode let-rowData=\\\"rowData\\\" let-columns=\\\"columns\\\"&gt;\\n        &lt;tr&gt;\\n            &lt;td *ngFor=\\\"let col of columns; let i = index\\\"&gt;\\n                &lt;p-treeTableToggler [rowNode]=\\\"rowNode\\\" *ngIf=\\\"i == 0\\\"&gt;&lt;/p-treeTableToggler&gt;\\n                &#123;&#123;rowData[col.field]&#125;&#125;\\n            &lt;/td&gt;\\n        &lt;/tr&gt;\\n    &lt;/ng-template&gt;\\n&lt;/p-treeTable&gt;\\n</code>\\n</pre>\\n\\n<pre>\\n<code class=\\\"language-typescript\\\" pCode ngNonBindable>\\nexport class TreeTableDemo implements OnInit &#123;\\n\\n    files1: TreeNode[];\\n\\n    files2: TreeNode[];\\n\\n    cols: any[];\\n\\n    constructor(private nodeService: NodeService) &#123; &#125;\\n\\n    ngOnInit() &#123;\\n        this.nodeService.getFilesystem().then(files => this.files1 = files);\\n        this.nodeService.getFilesystem().then(files => this.files2 = files);\\n\\n        this.cols = [\\n            &#123; field: 'name', header: 'Name' &#125;,\\n            &#123; field: 'size', header: 'Size' &#125;,\\n            &#123; field: 'type', header: 'Type' &#125;\\n        ];\\n    &#125;\\n&#125;\\n</code>\\n</pre>\\n        </p-tabPanel>\\n        <p-tabPanel header=\\\"StackBlitz\\\">\\n            <ng-template pTemplate=\\\"content\\\">\\n                <iframe src=\\\"https://stackblitz.com/edit/primeng-treetable-demo?embed=1\\\" style=\\\"width: 100%; height: 768px; border: none;\\\"></iframe>\\n            </ng-template>\\n        </p-tabPanel>\\n    </p-tabView>\\n</div>\\n\";","export default \"<div class=\\\"content-section introduction\\\">\\n    <div>\\n        <span class=\\\"feature-title\\\">TreeTable <span class=\\\"subitem\\\">Edit</span></span>\\n        <span>In-cell editing provides a quick and user friendly way to manipulate data.</span>\\n    </div>\\n</div>\\n\\n<div class=\\\"content-section implementation\\\">\\n    <p-treeTable [value]=\\\"files\\\" [columns]=\\\"cols\\\">\\n        <ng-template pTemplate=\\\"header\\\" let-columns>\\n            <tr>\\n                <th *ngFor=\\\"let col of columns\\\">\\n                    {{col.header}}\\n                </th>\\n            </tr>\\n        </ng-template>\\n        <ng-template pTemplate=\\\"body\\\" let-rowNode let-rowData=\\\"rowData\\\" let-columns=\\\"columns\\\">\\n            <tr>\\n                <td *ngFor=\\\"let col of columns; let i = index\\\" ttEditableColumn [ngClass]=\\\"{'ui-toggler-column': i === 0}\\\">\\n                    <p-treeTableToggler [rowNode]=\\\"rowNode\\\" *ngIf=\\\"i === 0\\\"></p-treeTableToggler>\\n                    <p-treeTableCellEditor>\\n                        <ng-template pTemplate=\\\"input\\\">\\n                            <input pInputText type=\\\"text\\\" [(ngModel)]=\\\"rowData[col.field]\\\" [ngStyle]=\\\"{'width': i == 0 ? '90%': '100%'}\\\">\\n                        </ng-template>\\n                        <ng-template pTemplate=\\\"output\\\">{{rowData[col.field]}}</ng-template>\\n                    </p-treeTableCellEditor>\\n                </td>\\n            </tr>            \\n        </ng-template>\\n    </p-treeTable>\\n</div>\\n\\n<div class=\\\"content-section documentation\\\">\\n    <p-tabView>\\n        <p-tabPanel header=\\\"treetableeditdemo.ts\\\">\\n            <a href=\\\"https://github.com/primefaces/primeng/tree/master/src/app/showcase/components/treetable/treetableeditdemo.ts\\\" class=\\\"btn-viewsource\\\" target=\\\"_blank\\\">\\n                <span>View on GitHub</span>\\n            </a>\\n            <a href=\\\"https://stackblitz.com/edit/primeng-treetableedit-demo\\\" class=\\\"btn-viewsource\\\" style=\\\"margin-left: .5em;\\\" target=\\\"_blank\\\">\\n                <span>Edit in StackBlitz</span>\\n            </a>\\n<pre>\\n<code class=\\\"language-typescript\\\" pCode ngNonBindable>\\n@Component(&#123;\\n    templateUrl: './treetableeditdemo.html',\\n    styles: [`\\n        :host ::ng-deep .ui-editing-cell &#123;\\n            padding: 0 !important;\\n            &#125;\\n\\n        :host ::ng-deep .ui-toggler-column.ui-editing-cell &#123;\\n            padding-left: 0.857em !important;\\n            &#125;\\n    `]\\n&#125;)\\nexport class TreeTableEditDemo &#123;\\n\\n    files: TreeNode[];\\n\\n    cols: any[];\\n\\n    constructor(private nodeService: NodeService) &#123; &#125;\\n\\n    ngOnInit() &#123;\\n        this.nodeService.getFilesystem().then(files => this.files = files);\\n\\n        this.cols = [\\n            &#123; field: 'name', header: 'Name' &#125;,\\n            &#123; field: 'size', header: 'Size' &#125;,\\n            &#123; field: 'type', header: 'Type' &#125;\\n        ];\\n    &#125;\\n&#125;\\n</code>\\n</pre>   \\n        </p-tabPanel>\\n        <p-tabPanel header=\\\"treetableeditdemo.html\\\">\\n            <a href=\\\"https://github.com/primefaces/primeng/tree/master/src/app/showcase/components/treetable/treetableeditdemo.html\\\" class=\\\"btn-viewsource\\\" target=\\\"_blank\\\">\\n                <span>View on GitHub</span>\\n            </a>\\n            <a href=\\\"https://stackblitz.com/edit/primeng-treetableedit-demo\\\" class=\\\"btn-viewsource\\\" style=\\\"margin-left: .5em;\\\" target=\\\"_blank\\\">\\n                <span>Edit in StackBlitz</span>\\n            </a>\\n<pre>\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\n&lt;p-treeTable [value]=\\\"files\\\" [columns]=\\\"cols\\\"&gt;\\n    &lt;ng-template pTemplate=\\\"header\\\" let-columns&gt;\\n        &lt;tr&gt;\\n            &lt;th *ngFor=\\\"let col of columns\\\"&gt;\\n                &#123;&#123;col.header&#125;&#125;\\n            &lt;/th&gt;\\n        &lt;/tr&gt;\\n    &lt;/ng-template&gt;\\n    &lt;ng-template pTemplate=\\\"body\\\" let-rowNode let-rowData=\\\"rowData\\\" let-columns=\\\"columns\\\"&gt;\\n        &lt;tr&gt;\\n            &lt;td *ngFor=\\\"let col of columns; let i = index\\\" ttEditableColumn [ngClass]=\\\"&#123;'ui-toggler-column': i === 0&#125;\\\"&gt;\\n                &lt;p-treeTableToggler [rowNode]=\\\"rowNode\\\" *ngIf=\\\"i === 0\\\"&gt;&lt;/p-treeTableToggler&gt;\\n                &lt;p-treeTableCellEditor&gt;\\n                    &lt;ng-template pTemplate=\\\"input\\\"&gt;\\n                        &lt;input pInputText type=\\\"text\\\" [(ngModel)]=\\\"rowData[col.field]\\\" [ngStyle]=\\\"&#123;'width': i == 0 ? '90%': '100%'&#125;\\\"&gt;\\n                    &lt;/ng-template&gt;\\n                    &lt;ng-template pTemplate=\\\"output\\\"&gt;&#123;&#123;rowData[col.field]&#125;&#125;&lt;/ng-template&gt;\\n                &lt;/p-treeTableCellEditor&gt;\\n            &lt;/td&gt;\\n        &lt;/tr&gt;            \\n    &lt;/ng-template&gt;\\n&lt;/p-treeTable&gt;\\n</code>\\n</pre>\\n        </p-tabPanel>\\n        <p-tabPanel header=\\\"StackBlitz\\\">\\n            <ng-template pTemplate=\\\"content\\\">\\n                <iframe src=\\\"https://stackblitz.com/edit/primeng-treetableedit-demo?embed=1\\\" style=\\\"width: 100%; height: 768px; border: none;\\\"></iframe>\\n            </ng-template>\\n        </p-tabPanel>\\n    </p-tabView>\\n</div>\\n\";","export default \"<div class=\\\"content-section introduction\\\">\\n    <div>\\n        <span class=\\\"feature-title\\\">TreeTable <span class=\\\"subitem\\\">Filter</span></span>\\n        <span>Filtering reduces the data by running a search using column filters and an optional global filter.</span>\\n    </div>\\n</div>\\n\\n<div class=\\\"content-section implementation\\\">\\n    <p-treeTable #tt [value]=\\\"files\\\" [columns]=\\\"cols\\\">\\n        <ng-template pTemplate=\\\"caption\\\">\\n            <div style=\\\"text-align: right\\\">        \\n                <i class=\\\"pi pi-search\\\" style=\\\"margin:4px 4px 0 0\\\"></i>\\n                <input type=\\\"text\\\" pInputText size=\\\"50\\\" placeholder=\\\"Global Filter\\\" (input)=\\\"tt.filterGlobal($event.target.value, 'contains')\\\" style=\\\"width:auto\\\">\\n            </div>\\n        </ng-template>\\n        <ng-template pTemplate=\\\"header\\\" let-columns>\\n            <tr>\\n                <th *ngFor=\\\"let col of cols\\\">\\n                    {{col.header}}\\n                </th>\\n            </tr>\\n            <tr>\\n                <th *ngFor=\\\"let col of cols\\\">\\n                    <input pInputText type=\\\"text\\\" (input)=\\\"tt.filter($event.target.value, col.field, col.filterMatchMode)\\\">\\n                </th>\\n            </tr>\\n        </ng-template>\\n        <ng-template pTemplate=\\\"body\\\" let-rowNode let-rowData=\\\"rowData\\\">\\n            <tr>\\n                <td *ngFor=\\\"let col of cols; let i = index\\\">\\n                    <p-treeTableToggler [rowNode]=\\\"rowNode\\\" *ngIf=\\\"i == 0\\\"></p-treeTableToggler>\\n                    {{rowData[col.field]}}\\n                </td>\\n            </tr>\\n        </ng-template>\\n        <ng-template pTemplate=\\\"emptymessage\\\">\\n            <tr>        \\n                <td [attr.colspan]=\\\"cols.length\\\">No data found.</td>\\n            </tr>\\n        </ng-template>\\n    </p-treeTable>\\n</div>\\n\\n<div class=\\\"content-section documentation\\\">\\n    <p-tabView>\\n        <p-tabPanel header=\\\"treetablefilterdemo.ts\\\">\\n            <a href=\\\"https://github.com/primefaces/primeng/tree/master/src/app/showcase/components/treetable/treetablefilterdemo.ts\\\" class=\\\"btn-viewsource\\\" target=\\\"_blank\\\">\\n                <span>View on GitHub</span>\\n            </a>\\n            <a href=\\\"https://stackblitz.com/edit/primeng-treetablefilter-demo\\\" class=\\\"btn-viewsource\\\" style=\\\"margin-left: .5em;\\\" target=\\\"_blank\\\">\\n                <span>Edit in StackBlitz</span>\\n            </a>\\n<pre>\\n<code class=\\\"language-typescript\\\" pCode ngNonBindable>\\n@Component(&#123;\\n    templateUrl: './treetablefilterdemo.html'\\n&#125;)\\nexport class TreeTableFilterDemo &#123;\\n\\n    files: TreeNode[];\\n\\n    cols: any[];\\n\\n    constructor(private nodeService: NodeService) &#123; &#125;\\n\\n    ngOnInit() &#123;\\n        this.nodeService.getFilesystem().then(files => this.files = files);\\n\\n        this.cols = [\\n            &#123; field: 'name', header: 'Name' &#125;,\\n            &#123; field: 'size', header: 'Size' &#125;,\\n            &#123; field: 'type', header: 'Type' &#125;\\n        ];\\n    &#125;\\n&#125;\\n</code>\\n</pre>   \\n        </p-tabPanel>\\n\\n        <p-tabPanel header=\\\"treetablefilterdemo.html\\\">\\n            <a href=\\\"https://github.com/primefaces/primeng/tree/master/src/app/showcase/components/treetable/treetablefilterdemo.html\\\" class=\\\"btn-viewsource\\\" target=\\\"_blank\\\">\\n                <span>View on GitHub</span>\\n            </a>\\n            <a href=\\\"https://stackblitz.com/edit/primeng-treetablefilter-demo\\\" class=\\\"btn-viewsource\\\" style=\\\"margin-left: .5em;\\\" target=\\\"_blank\\\">\\n                <span>Edit in StackBlitz</span>\\n            </a>\\n<pre>\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\n&lt;p-treeTable #tt [value]=\\\"files\\\" [columns]=\\\"cols\\\"&gt;\\n    &lt;ng-template pTemplate=\\\"caption\\\"&gt;\\n        &lt;div style=\\\"text-align: right\\\"&gt;        \\n            &lt;i class=\\\"pi pi-search\\\" style=\\\"margin:4px 4px 0 0\\\"&gt;&lt;/i&gt;\\n            &lt;input type=\\\"text\\\" pInputText size=\\\"50\\\" placeholder=\\\"Global Filter\\\" (input)=\\\"tt.filterGlobal($event.target.value, 'contains')\\\" style=\\\"width:auto\\\"&gt;\\n        &lt;/div&gt;\\n    &lt;/ng-template&gt;\\n    &lt;ng-template pTemplate=\\\"header\\\" let-columns&gt;\\n        &lt;tr&gt;\\n            &lt;th *ngFor=\\\"let col of cols\\\"&gt;\\n                &#123;&#123;col.header&#125;&#125;\\n            &lt;/th&gt;\\n        &lt;/tr&gt;\\n        &lt;tr&gt;\\n            &lt;th *ngFor=\\\"let col of cols\\\"&gt;\\n                &lt;input pInputText type=\\\"text\\\" (input)=\\\"tt.filter($event.target.value, col.field, col.filterMatchMode)\\\"&gt;\\n            &lt;/th&gt;\\n        &lt;/tr&gt;\\n    &lt;/ng-template&gt;\\n    &lt;ng-template pTemplate=\\\"body\\\" let-rowNode let-rowData=\\\"rowData\\\"&gt;\\n        &lt;tr&gt;\\n            &lt;td *ngFor=\\\"let col of cols; let i = index\\\"&gt;\\n                &lt;p-treeTableToggler [rowNode]=\\\"rowNode\\\" *ngIf=\\\"i == 0\\\"&gt;&lt;/p-treeTableToggler&gt;\\n                &#123;&#123;rowData[col.field]&#125;&#125;\\n            &lt;/td&gt;\\n        &lt;/tr&gt;\\n    &lt;/ng-template&gt;\\n    &lt;ng-template pTemplate=\\\"emptymessage\\\"&gt;\\n        &lt;tr&gt;        \\n            &lt;td [attr.colspan]=\\\"cols.length\\\"&gt;No data found.&lt;/td&gt;\\n        &lt;/tr&gt;\\n    &lt;/ng-template&gt;\\n&lt;/p-treeTable&gt;\\n</code>\\n</pre>\\n        </p-tabPanel>\\n        <p-tabPanel header=\\\"StackBlitz\\\">\\n            <ng-template pTemplate=\\\"content\\\">\\n                <iframe src=\\\"https://stackblitz.com/edit/primeng-treetablefilter-demo?embed=1\\\" style=\\\"width: 100%; height: 768px; border: none;\\\"></iframe>\\n            </ng-template>\\n        </p-tabPanel>\\n    </p-tabView>\\n</div>\";","export default \"<div class=\\\"content-section implementation\\\" style=\\\"height: calc(100vh - 149px)\\\">\\n    <p-treeTable [value]=\\\"virtualFiles\\\" [columns]=\\\"cols\\\" [scrollable]=\\\"true\\\" [rows]=\\\"100\\\" scrollHeight=\\\"flex\\\"\\n        [virtualScroll]=\\\"true\\\" [virtualRowHeight]=\\\"34\\\">\\n        <ng-template pTemplate=\\\"caption\\\">\\n            Virtual Scrolling with Full Page Viewport \\n        </ng-template>\\n        <ng-template pTemplate=\\\"header\\\" let-columns>\\n            <tr>\\n                <th *ngFor=\\\"let col of columns\\\">\\n                    {{col.header}}\\n                </th>\\n            </tr>\\n        </ng-template>\\n        <ng-template pTemplate=\\\"body\\\" let-rowNode let-rowData=\\\"rowData\\\" let-columns=\\\"columns\\\">\\n            <tr style=\\\"height:34px\\\">\\n                <td *ngFor=\\\"let col of columns; let i = index\\\">\\n                    <p-treeTableToggler [rowNode]=\\\"rowNode\\\" *ngIf=\\\"i == 0\\\"></p-treeTableToggler>\\n                    {{rowData[col.field]}}\\n                </td>\\n            </tr>\\n        </ng-template>\\n    </p-treeTable>\\n</div>\";","export default \"<div class=\\\"content-section introduction\\\">\\n    <div>\\n        <span class=\\\"feature-title\\\">TreeTable <span class=\\\"subitem\\\">Lazy</span></span>\\n        <span>Lazy mode is handy to deal with large datasets, instead of loading the entire data, small chunks of data is loaded by invoking\\n            onLazyLoad callback everytime paging or sorting happens. In addition, children of a node can be loaded on demand at onNodeExpand event as well.\\n            Sample belows imitates lazy paging by using an in memory list.</span>\\n    </div>\\n</div>\\n\\n<div class=\\\"content-section implementation\\\">\\n    <p-treeTable [value]=\\\"files\\\" [columns]=\\\"cols\\\" [paginator]=\\\"true\\\" [rows]=\\\"10\\\" [lazy]=\\\"true\\\" \\n        (onLazyLoad)=\\\"loadNodes($event)\\\" [totalRecords]=\\\"1000\\\" [loading]=\\\"loading\\\" (onNodeExpand)=\\\"onNodeExpand($event)\\\">\\n        <ng-template pTemplate=\\\"header\\\" let-columns>\\n            <tr>\\n                <th *ngFor=\\\"let col of columns\\\">\\n                    {{col.header}}\\n                </th>\\n            </tr>\\n        </ng-template>\\n        <ng-template pTemplate=\\\"body\\\" let-rowNode let-rowData=\\\"rowData\\\" let-columns=\\\"columns\\\">\\n            <tr>\\n                <td *ngFor=\\\"let col of columns; let i = index\\\">\\n                    <p-treeTableToggler [rowNode]=\\\"rowNode\\\" *ngIf=\\\"i == 0\\\"></p-treeTableToggler>\\n                    {{rowData[col.field]}}\\n                </td>\\n            </tr>\\n        </ng-template>\\n    </p-treeTable>\\n</div>\\n\\n<div class=\\\"content-section documentation\\\">\\n    <p-tabView>\\n        <p-tabPanel header=\\\"treetablelazydemo.ts\\\">\\n            <a href=\\\"https://github.com/primefaces/primeng/tree/master/src/app/showcase/components/treetable/treetablelazydemo.ts\\\" class=\\\"btn-viewsource\\\" target=\\\"_blank\\\">\\n                <span>View on GitHub</span>\\n            </a>\\n            <a href=\\\"https://stackblitz.com/edit/primeng-treetablelazy-demo\\\" class=\\\"btn-viewsource\\\" style=\\\"margin-left: .5em;\\\" target=\\\"_blank\\\">\\n                <span>Edit in StackBlitz</span>\\n            </a>\\n<pre>\\n<code class=\\\"language-typescript\\\" pCode ngNonBindable>\\nexport class TreeTableLazyDemo &#123;\\n\\n    files: TreeNode[];\\n\\n    cols: any[];\\n\\n    totalRecords: number;\\n\\n    loading: boolean;\\n\\n    constructor(private nodeService: NodeService) &#123; &#125;\\n\\n    ngOnInit() &#123;\\n        this.cols = [\\n            &#123; field: 'name', header: 'Name' &#125;,\\n            &#123; field: 'size', header: 'Size' &#125;,\\n            &#123; field: 'type', header: 'Type' &#125;\\n        ];\\n\\n        //in a production application, retrieve the logical number of rows from a remote datasource\\n        this.totalRecords = 1000;\\n\\n        this.loading = true;\\n    &#125;\\n\\n    loadNodes(event) &#123;\\n        this.loading = true;\\n\\n        //in a production application, make a remote request to load data using state metadata from event\\n        //event.first = First row offset\\n        //event.rows = Number of rows per page\\n        //event.sortField = Field name to sort with\\n        //event.sortOrder = Sort order as number, 1 for asc and -1 for dec\\n        //filters: FilterMetadata object having field as key and filter value, filter matchMode as value\\n\\n        //imitate db connection over a network\\n        setTimeout(() => &#123;\\n            this.loading = false;\\n            this.files = [];\\n\\n            for(let i = 0; i &lt; event.rows; i++) &#123;\\n                let node = &#123;\\n                    data: &#123;  \\n                        name: 'Item ' + (event.first + i),\\n                        size: Math.floor(Math.random() * 1000) + 1 + 'kb',\\n                        type: 'Type ' + (event.first + i)\\n                    &#125;,\\n                    leaf: false\\n                &#125;;\\n\\n                this.files.push(node);\\n            &#125;\\n        &#125;, 1000);\\n    &#125;\\n\\n    onNodeExpand(event) &#123;\\n        this.loading = true;\\n\\n        setTimeout(() => &#123;\\n            this.loading = false;\\n            const node = event.node;\\n\\n            node.children = [\\n                &#123;\\n                    data: &#123;  \\n                        name: node.data.name + ' - 0',\\n                        size: Math.floor(Math.random() * 1000) + 1 + 'kb',\\n                        type: 'File'\\n                    &#125;,\\n                &#125;,\\n                &#123;\\n                    data: &#123;  \\n                        name: node.data.name + ' - 1',\\n                        size: Math.floor(Math.random() * 1000) + 1 + 'kb',\\n                        type: 'File'\\n                    &#125;\\n                &#125;\\n            ];\\n\\n            this.files = [...this.files];\\n        &#125;, 250);\\n        \\n    &#125;\\n&#125;\\n</code>\\n</pre>   \\n        </p-tabPanel>\\n\\n        <p-tabPanel header=\\\"treetablelazydemo.html\\\">\\n            <a href=\\\"https://github.com/primefaces/primeng/tree/master/src/app/showcase/components/treetable/treetablelazydemo.html\\\" class=\\\"btn-viewsource\\\" target=\\\"_blank\\\">\\n                <span>View on GitHub</span>\\n            </a>\\n            <a href=\\\"https://stackblitz.com/edit/primeng-treetablelazy-demo\\\" class=\\\"btn-viewsource\\\" style=\\\"margin-left: .5em;\\\" target=\\\"_blank\\\">\\n                <span>Edit in StackBlitz</span>\\n            </a>\\n<pre>\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\n&lt;p-treeTable [value]=\\\"files\\\" [columns]=\\\"cols\\\" [paginator]=\\\"true\\\" [rows]=\\\"10\\\" [lazy]=\\\"true\\\" \\n    (onLazyLoad)=\\\"loadNodes($event)\\\" [totalRecords]=\\\"1000\\\" [loading]=\\\"loading\\\" (onNodeExpand)=\\\"onNodeExpand($event)\\\"&gt;\\n    &lt;ng-template pTemplate=\\\"header\\\" let-columns&gt;\\n        &lt;tr&gt;\\n            &lt;th *ngFor=\\\"let col of columns\\\"&gt;\\n                &#123;&#123;col.header&#125;&#125;\\n            &lt;/th&gt;\\n        &lt;/tr&gt;\\n    &lt;/ng-template&gt;\\n    &lt;ng-template pTemplate=\\\"body\\\" let-rowNode let-rowData=\\\"rowData\\\" let-columns=\\\"columns\\\"&gt;\\n        &lt;tr&gt;\\n            &lt;td *ngFor=\\\"let col of columns; let i = index\\\"&gt;\\n                &lt;p-treeTableToggler [rowNode]=\\\"rowNode\\\" *ngIf=\\\"i == 0\\\"&gt;&lt;/p-treeTableToggler&gt;\\n                &#123;&#123;rowData[col.field]&#125;&#125;\\n            &lt;/td&gt;\\n        &lt;/tr&gt;\\n    &lt;/ng-template&gt;\\n&lt;/p-treeTable&gt;\\n</code>\\n</pre>\\n        </p-tabPanel>\\n        <p-tabPanel header=\\\"StackBlitz\\\">\\n            <ng-template pTemplate=\\\"content\\\">\\n                <iframe src=\\\"https://stackblitz.com/edit/primeng-treetablelazy-demo?embed=1\\\" style=\\\"width: 100%; height: 768px; border: none;\\\"></iframe>\\n            </ng-template>\\n        </p-tabPanel>\\n    </p-tabView>\\n</div>\";","export default \"<div class=\\\"content-section introduction\\\">\\n    <div>\\n        <span class=\\\"feature-title\\\">TreeTable <span class=\\\"subitem\\\">Page</span></span>\\n        <span>Pagination is enabled by setting paginator property to true and defining a rows property to specify the number of rows per page.</span>\\n    </div>\\n</div>\\n\\n<div class=\\\"content-section implementation\\\">\\n    <p-treeTable [value]=\\\"files\\\" [columns]=\\\"cols\\\" [paginator]=\\\"true\\\" [rows]=\\\"10\\\">\\n        <ng-template pTemplate=\\\"header\\\" let-columns>\\n            <tr>\\n                <th *ngFor=\\\"let col of columns\\\">\\n                    {{col.header}}\\n                </th>\\n            </tr>\\n        </ng-template>\\n        <ng-template pTemplate=\\\"body\\\" let-rowNode let-rowData=\\\"rowData\\\" let-columns=\\\"columns\\\">\\n            <tr>\\n                <td *ngFor=\\\"let col of columns; let i = index\\\">\\n                    <p-treeTableToggler [rowNode]=\\\"rowNode\\\" *ngIf=\\\"i == 0\\\"></p-treeTableToggler>\\n                    {{rowData[col.field]}}\\n                </td>\\n            </tr>\\n        </ng-template>\\n    </p-treeTable>\\n</div>\\n\\n<div class=\\\"content-section documentation\\\">\\n    <p-tabView>\\n        <p-tabPanel header=\\\"treetablepagedemo.ts\\\">\\n            <a href=\\\"https://github.com/primefaces/primeng/tree/master/src/app/showcase/components/treetable/treetablepagedemo.ts\\\" class=\\\"btn-viewsource\\\" target=\\\"_blank\\\">\\n                <span>View on GitHub</span>\\n            </a>\\n            <a href=\\\"https://stackblitz.com/edit/primeng-treetablepage-demo\\\" class=\\\"btn-viewsource\\\" style=\\\"margin-left: .5em;\\\" target=\\\"_blank\\\">\\n                <span>Edit in StackBlitz</span>\\n            </a>\\n<pre>\\n<code class=\\\"language-typescript\\\" pCode ngNonBindable>\\nexport class TreeTablePageDemo implements OnInit &#123;\\n\\n    files: TreeNode[];\\n\\n    cols: any[];\\n\\n    constructor(private nodeService: NodeService) &#123; &#125;\\n\\n    ngOnInit() &#123;\\n        this.files = [];\\n        for(let i = 0; i &lt; 50; i++) &#123;\\n            let node = &#123;\\n                data:&#123;  \\n                    name: 'Item ' + i,\\n                    size: Math.floor(Math.random() * 1000) + 1 + 'kb',\\n                    type: 'Type ' + i\\n                &#125;,\\n                children: [\\n                    &#123;\\n                        data: &#123;  \\n                            name: 'Item ' + i + ' - 0',\\n                            size: Math.floor(Math.random() * 1000) + 1 + 'kb',\\n                            type: 'Type ' + i\\n                        &#125;\\n                    &#125;\\n                ]\\n            &#125;;\\n\\n            this.files.push(node);\\n        &#125;\\n\\n        this.cols = [\\n            &#123; field: 'name', header: 'Name' &#125;,\\n            &#123; field: 'size', header: 'Size' &#125;,\\n            &#123; field: 'type', header: 'Type' &#125;\\n        ];\\n    &#125;\\n&#125;\\n</code>\\n</pre>   \\n        </p-tabPanel>\\n\\n        <p-tabPanel header=\\\"treetablepagedemo.html\\\">\\n            <a href=\\\"https://github.com/primefaces/primeng/tree/master/src/app/showcase/components/treetable/treetablepagedemo.html\\\" class=\\\"btn-viewsource\\\" target=\\\"_blank\\\">\\n                <span>View on GitHub</span>\\n            </a>\\n            <a href=\\\"https://stackblitz.com/edit/primeng-treetablepage-demo\\\" class=\\\"btn-viewsource\\\" style=\\\"margin-left: .5em;\\\" target=\\\"_blank\\\">\\n                <span>Edit in StackBlitz</span>\\n            </a>\\n<pre>\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\n&lt;p-treeTable [value]=\\\"files\\\" [columns]=\\\"cols\\\" [paginator]=\\\"true\\\" [rows]=\\\"10\\\"&gt;\\n    &lt;ng-template pTemplate=\\\"header\\\" let-columns&gt;\\n        &lt;tr&gt;\\n            &lt;th *ngFor=\\\"let col of columns\\\"&gt;\\n                &#123;&#123;col.header&#125;&#125;\\n            &lt;/th&gt;\\n        &lt;/tr&gt;\\n    &lt;/ng-template&gt;\\n    &lt;ng-template pTemplate=\\\"body\\\" let-rowNode let-rowData=\\\"rowData\\\" let-columns=\\\"columns\\\"&gt;\\n        &lt;tr&gt;\\n            &lt;td *ngFor=\\\"let col of columns; let i = index\\\"&gt;\\n                &lt;p-treeTableToggler [rowNode]=\\\"rowNode\\\" *ngIf=\\\"i == 0\\\"&gt;&lt;/p-treeTableToggler&gt;\\n                &#123;&#123;rowData[col.field]&#125;&#125;\\n            &lt;/td&gt;\\n        &lt;/tr&gt;\\n    &lt;/ng-template&gt;\\n&lt;/p-treeTable&gt;\\n</code>\\n</pre>\\n        </p-tabPanel>\\n        <p-tabPanel header=\\\"StackBlitz\\\">\\n            <ng-template pTemplate=\\\"content\\\">\\n                <iframe src=\\\"https://stackblitz.com/edit/primeng-treetablepage-demo?embed=1\\\" style=\\\"width: 100%; height: 768px; border: none;\\\"></iframe>\\n            </ng-template>\\n        </p-tabPanel>\\n    </p-tabView>\\n</div>\";","export default \"<div class=\\\"content-section introduction\\\">\\n    <div>\\n        <span class=\\\"feature-title\\\">TreeTable <span class=\\\"subitem\\\">Reorder</span></span>\\n        <span>Order of the columns can be changed using drag and drop.</span>\\n    </div>\\n</div>\\n\\n<div class=\\\"content-section implementation\\\">\\n    <p-treeTable [value]=\\\"files\\\" [columns]=\\\"cols\\\" [reorderableColumns]=\\\"true\\\">\\n        <ng-template pTemplate=\\\"header\\\" let-columns>\\n            <tr>\\n                <th *ngFor=\\\"let col of columns\\\" ttReorderableColumn>\\n                    {{col.header}}\\n                </th>\\n            </tr>\\n        </ng-template>\\n        <ng-template pTemplate=\\\"body\\\" let-rowNode let-rowData=\\\"rowData\\\" let-columns=\\\"columns\\\">\\n            <tr>\\n                <td *ngFor=\\\"let col of columns; let i = index\\\">\\n                    <p-treeTableToggler [rowNode]=\\\"rowNode\\\" *ngIf=\\\"i == 0\\\"></p-treeTableToggler>\\n                    {{rowData[col.field]}}\\n                </td>\\n            </tr>            \\n        </ng-template>\\n    </p-treeTable>\\n</div>\\n\\n<div class=\\\"content-section documentation\\\">\\n    <p-tabView>\\n        <p-tabPanel header=\\\"treetablecolreorder.ts\\\">\\n            <a href=\\\"https://github.com/primefaces/primeng/tree/master/src/app/showcase/components/treetable/treetablecolreorder.ts\\\" class=\\\"btn-viewsource\\\" target=\\\"_blank\\\">\\n                <span>View on GitHub</span>\\n            </a>\\n            <a href=\\\"https://stackblitz.com/edit/primeng-treetablereorder-demo\\\" class=\\\"btn-viewsource\\\" style=\\\"margin-left: .5em;\\\" target=\\\"_blank\\\">\\n                <span>Edit in StackBlitz</span>\\n            </a>\\n<pre>\\n<code class=\\\"language-typescript\\\" pCode ngNonBindable>\\nexport class TreeTableReorderDemo &#123;\\n\\n    files: TreeNode[];\\n\\n    cols: any[];\\n\\n    constructor(private nodeService: NodeService) &#123; &#125;\\n\\n    ngOnInit() &#123;\\n        this.nodeService.getFilesystem().then(files => this.files = files);\\n\\n        this.cols = [\\n            &#123; field: 'name', header: 'Name' &#125;,\\n            &#123; field: 'size', header: 'Size' &#125;,\\n            &#123; field: 'type', header: 'Type' &#125;\\n        ];\\n    &#125;\\n&#125;\\n</code>\\n</pre>   \\n        </p-tabPanel>\\n        <p-tabPanel header=\\\"treetablecolreorder.html\\\">\\n            <a href=\\\"https://github.com/primefaces/primeng/tree/master/src/app/showcase/components/treeable/treetablecolreorder.html\\\" class=\\\"btn-viewsource\\\" target=\\\"_blank\\\">\\n                <span>View on GitHub</span>\\n            </a>\\n            <a href=\\\"https://stackblitz.com/edit/primeng-treetablereorder-demo\\\" class=\\\"btn-viewsource\\\" style=\\\"margin-left: .5em;\\\" target=\\\"_blank\\\">\\n                <span>Edit in StackBlitz</span>\\n            </a>\\n<pre>\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\n&lt;p-treeTable [value]=\\\"files\\\" [columns]=\\\"cols\\\" [reorderableColumns]=\\\"true\\\"&gt;\\n    &lt;ng-template pTemplate=\\\"header\\\" let-columns&gt;\\n        &lt;tr&gt;\\n            &lt;th *ngFor=\\\"let col of columns\\\" ttReorderableColumn&gt;\\n                &#123;&#123;col.header&#125;&#125;\\n            &lt;/th&gt;\\n        &lt;/tr&gt;\\n    &lt;/ng-template&gt;\\n    &lt;ng-template pTemplate=\\\"body\\\" let-rowNode let-rowData=\\\"rowData\\\" let-columns=\\\"columns\\\"&gt;\\n        &lt;tr&gt;\\n            &lt;td *ngFor=\\\"let col of columns; let i = index\\\"&gt;\\n                &lt;p-treeTableToggler [rowNode]=\\\"rowNode\\\" *ngIf=\\\"i == 0\\\"&gt;&lt;/p-treeTableToggler&gt;\\n                &#123;&#123;rowData[col.field]&#125;&#125;\\n            &lt;/td&gt;\\n        &lt;/tr&gt;            \\n    &lt;/ng-template&gt;\\n&lt;/p-treeTable&gt;\\n</code>\\n</pre>\\n        </p-tabPanel>\\n        <p-tabPanel header=\\\"StackBlitz\\\">\\n            <ng-template pTemplate=\\\"content\\\">\\n                <iframe src=\\\"https://stackblitz.com/edit/primeng-treetablereorder-demo?embed=1\\\" style=\\\"width: 100%; height: 768px; border: none;\\\"></iframe>\\n            </ng-template>\\n        </p-tabPanel>\\n    </p-tabView>\\n</div>\";","export default \"<div class=\\\"content-section introduction\\\">\\n    <div>\\n        <span class=\\\"feature-title\\\">TreeTable <span class=\\\"subitem\\\">Responsive</span></span>\\n        <span>This sample demonstrates how to implement a responsive TreeTable using media queries.</span>\\n    </div>\\n</div>\\n\\n<div class=\\\"content-section implementation\\\">\\n    <p-treeTable [value]=\\\"files\\\">\\n        <ng-template pTemplate=\\\"header\\\">\\n            <tr>\\n                <th>Name</th>\\n                <th class=\\\"priority-2\\\">Size</th>\\n                <th class=\\\"priority-3\\\">Type</th>\\n            </tr>\\n        </ng-template>\\n        <ng-template pTemplate=\\\"body\\\" let-rowNode let-rowData=\\\"rowData\\\">\\n            <tr>\\n                <td>\\n                    <p-treeTableToggler [rowNode]=\\\"rowNode\\\"></p-treeTableToggler>\\n                    {{rowData.name}}\\n                    <span class=\\\"visibility-sm\\\">\\n                        / {{rowData.size}} - {{rowData.type}}\\n                    </span>\\n                </td>\\n                <td class=\\\"priority-2\\\">{{rowData.size}}</td>\\n                <td class=\\\"priority-3\\\">{{rowData.type}}</td>\\n            </tr>            \\n        </ng-template>\\n    </p-treeTable>\\n</div>\\n\\n<div class=\\\"content-section documentation\\\">\\n    <p-tabView>\\n        <p-tabPanel header=\\\"treetableresponsivedemo.ts\\\">\\n            <a href=\\\"https://github.com/primefaces/primeng/tree/master/src/app/showcase/components/treetable/treetablepagedemo.ts\\\" class=\\\"btn-viewsource\\\" target=\\\"_blank\\\">\\n                <span>View on GitHub</span>\\n            </a>\\n            <a href=\\\"https://stackblitz.com/edit/primeng-treetableresponsive-demo\\\" class=\\\"btn-viewsource\\\" style=\\\"margin-left: .5em;\\\" target=\\\"_blank\\\">\\n                <span>Edit in StackBlitz</span>\\n            </a>\\n<pre>\\n<code class=\\\"language-typescript\\\" pCode ngNonBindable>\\n@Component(&#123;\\n    templateUrl: './treetableresponsivedemo.html',\\n    styles: [`\\n        :host ::ng-deep .priority-2, \\n        :host ::ng-deep .priority-3,\\n        :host ::ng-deep .visibility-sm &#123;\\n            display: none;\\n        &#125;\\n\\n        @media screen and (max-width: 39.938em) &#123;\\n            :host ::ng-deep .visibility-sm &#123;\\n                display: inline;\\n            &#125;\\n        &#125;\\n\\n        @media screen and (min-width: 40em) &#123;\\n            :host ::ng-deep .priority-2 &#123;\\n                display: table-cell;\\n            &#125;\\n        &#125;\\n\\n        @media screen and (min-width: 64em) &#123;\\n            :host ::ng-deep .priority-3 &#123;\\n                display: table-cell;\\n            &#125;\\n        &#125;\\n    `]\\n&#125;)\\nexport class TreeTableResponsiveDemo &#123;\\n\\n    files: TreeNode[];\\n\\n    cols: any[];\\n\\n    constructor(private nodeService: NodeService) &#123; &#125;\\n\\n    ngOnInit() &#123;\\n        this.nodeService.getFilesystem().then(files => this.files = files);\\n\\n        this.cols = [\\n            &#123; field: 'name', header: 'Name' &#125;,\\n            &#123; field: 'size', header: 'Size' &#125;,\\n            &#123; field: 'type', header: 'Type' &#125;\\n        ];\\n    &#125;\\n&#125;\\n</code>\\n</pre>   \\n        </p-tabPanel>\\n\\n        <p-tabPanel header=\\\"treetableresponsivedemo.html\\\">\\n            <a href=\\\"https://github.com/primefaces/primeng/tree/master/src/app/showcase/components/treetable/treetablepagedemo.html\\\" class=\\\"btn-viewsource\\\" target=\\\"_blank\\\">\\n                <span>View on GitHub</span>\\n            </a>\\n            <a href=\\\"https://stackblitz.com/edit/primeng-treetableresponsive-demo\\\" class=\\\"btn-viewsource\\\" style=\\\"margin-left: .5em;\\\" target=\\\"_blank\\\">\\n                <span>Edit in StackBlitz</span>\\n            </a>\\n<pre>\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\n&lt;p-treeTable [value]=\\\"files\\\"&gt;\\n    &lt;ng-template pTemplate=\\\"header\\\"&gt;\\n        &lt;tr&gt;\\n            &lt;th&gt;Name&lt;/th&gt;\\n            &lt;th class=\\\"priority-2\\\"&gt;Size&lt;/th&gt;\\n            &lt;th class=\\\"priority-3\\\"&gt;Type&lt;/th&gt;\\n        &lt;/tr&gt;\\n    &lt;/ng-template&gt;\\n    &lt;ng-template pTemplate=\\\"body\\\" let-rowNode let-rowData=\\\"rowData\\\"&gt;\\n        &lt;tr&gt;\\n            &lt;td&gt;\\n                &lt;p-treeTableToggler [rowNode]=\\\"rowNode\\\"&gt;&lt;/p-treeTableToggler&gt;\\n                &#123;&#123;rowData.name&#125;&#125;\\n                &lt;span class=\\\"visibility-sm\\\"&gt;\\n                    / &#123;&#123;rowData.size&#125;&#125; - &#123;&#123;rowData.type&#125;&#125;\\n                &lt;/span&gt;\\n            &lt;/td&gt;\\n            &lt;td class=\\\"priority-2\\\"&gt;&#123;&#123;rowData.size&#125;&#125;&lt;/td&gt;\\n            &lt;td class=\\\"priority-3\\\"&gt;&#123;&#123;rowData.type&#125;&#125;&lt;/td&gt;\\n        &lt;/tr&gt;            \\n    &lt;/ng-template&gt;\\n&lt;/p-treeTable&gt;\\n</code>\\n</pre>\\n        </p-tabPanel>\\n        <p-tabPanel header=\\\"StackBlitz\\\">\\n            <ng-template pTemplate=\\\"content\\\">\\n                <iframe src=\\\"https://stackblitz.com/edit/primeng-treetableresponsive-demo?embed=1\\\" style=\\\"width: 100%; height: 768px; border: none;\\\"></iframe>\\n            </ng-template>\\n        </p-tabPanel>\\n    </p-tabView>\\n</div>\";","export default \"<div class=\\\"content-section introduction\\\">\\n    <div>\\n        <span class=\\\"feature-title\\\">TreeTable - <span class=\\\"ubitem\\\">Scroll</span></span>\\n        <span>Scrollable view is available horizontally, vertically or both.</span>\\n    </div>\\n</div>\\n\\n<div class=\\\"content-section implementation\\\">\\n    <h3>Vertical with Fixed Viewport</h3>\\n    <p-treeTable [value]=\\\"files1\\\" [columns]=\\\"cols\\\" [scrollable]=\\\"true\\\" scrollHeight=\\\"200px\\\">\\n        <ng-template pTemplate=\\\"header\\\" let-columns>\\n            <tr>\\n                <th *ngFor=\\\"let col of columns\\\">\\n                    {{col.header}}\\n                </th>\\n            </tr>\\n        </ng-template>\\n        <ng-template pTemplate=\\\"body\\\" let-rowNode let-rowData=\\\"rowData\\\" let-columns=\\\"columns\\\">\\n            <tr>\\n                <td *ngFor=\\\"let col of columns; let i = index\\\">\\n                    <p-treeTableToggler [rowNode]=\\\"rowNode\\\" *ngIf=\\\"i == 0\\\"></p-treeTableToggler>\\n                    {{rowData[col.field]}}\\n                </td>\\n            </tr>            \\n        </ng-template>\\n    </p-treeTable>\\n\\n    <h3>Flexible Viewport</h3>\\n    <p>Flex scroll feature makes the scrollable viewport section dynamic so that it can grow or shrink relative to the parent size of the table. Click the button below\\n        to display a resizable and maximizable Dialog where data viewport adjusts itself according to the size changes.</p>\\n\\n    <button type=\\\"button\\\" (click)=\\\"showDialog()\\\" pButton icon=\\\"pi pi-external-link\\\" label=\\\"View\\\"></button>\\n    <p-dialog header=\\\"Flexible ScrollHeight\\\" [(visible)]=\\\"dialogVisible\\\" [style]=\\\"{width: '50vw'}\\\" [baseZIndex]=\\\"10000\\\" [maximizable]=\\\"true\\\" [modal]=\\\"true\\\" [resizable]=\\\"true\\\" [contentStyle]=\\\"{height: '300px'}\\\">\\n        <p-treeTable [value]=\\\"files2\\\" [columns]=\\\"cols\\\" [scrollable]=\\\"true\\\" scrollHeight=\\\"flex\\\">\\n            <ng-template pTemplate=\\\"header\\\" let-columns>\\n                <tr>\\n                    <th *ngFor=\\\"let col of columns\\\">\\n                        {{col.header}}\\n                    </th>\\n                </tr>\\n            </ng-template>\\n            <ng-template pTemplate=\\\"body\\\" let-rowNode let-rowData=\\\"rowData\\\" let-columns=\\\"columns\\\">\\n                <tr>\\n                    <td *ngFor=\\\"let col of columns; let i = index\\\">\\n                        <p-treeTableToggler [rowNode]=\\\"rowNode\\\" *ngIf=\\\"i == 0\\\"></p-treeTableToggler>\\n                        {{rowData[col.field]}}\\n                    </td>\\n                </tr>            \\n            </ng-template>\\n        </p-treeTable>\\n        <p-footer>\\n            <button type=\\\"button\\\" pButton icon=\\\"pi pi-check\\\" (click)=\\\"dialogVisible=false\\\" label=\\\"Yes\\\"></button>\\n            <button type=\\\"button\\\" pButton icon=\\\"pi pi-times\\\" (click)=\\\"dialogVisible=false\\\" label=\\\"No\\\" class=\\\"ui-button-secondary\\\"></button>\\n        </p-footer>        \\n    </p-dialog>\\n\\n    <h3>Full Page Scroll</h3>\\n    <p>FlexScroll can also be used for cases where scrollable viewport should be responsive with respect to the window size. See the <a [routerLink]=\\\"['/treetable/flexscroll']\\\">Full Page</a> demo for an example.</p>\\n\\n    <h3>Virtual Scroll with 100000 Nodes</h3>\\n    <p-treeTable [value]=\\\"virtualFiles\\\" [columns]=\\\"cols\\\" [scrollable]=\\\"true\\\" [rows]=\\\"100\\\" scrollHeight=\\\"200px\\\"\\n        [virtualScroll]=\\\"true\\\" [virtualRowHeight]=\\\"34\\\">\\n        <ng-template pTemplate=\\\"header\\\" let-columns>\\n            <tr>\\n                <th *ngFor=\\\"let col of columns\\\">\\n                    {{col.header}}\\n                </th>\\n            </tr>\\n        </ng-template>\\n        <ng-template pTemplate=\\\"body\\\" let-rowNode let-rowData=\\\"rowData\\\" let-columns=\\\"columns\\\">\\n            <tr style=\\\"height:34px\\\">\\n                <td *ngFor=\\\"let col of columns; let i = index\\\">\\n                    <p-treeTableToggler [rowNode]=\\\"rowNode\\\" *ngIf=\\\"i == 0\\\"></p-treeTableToggler>\\n                    {{rowData[col.field]}}\\n                </td>\\n            </tr>\\n        </ng-template>\\n    </p-treeTable>\\n\\n    <h3>Horizontal</h3>\\n    <p-treeTable [value]=\\\"files3\\\" [columns]=\\\"cols\\\" [scrollable]=\\\"true\\\" [style]=\\\"{width:'600px'}\\\">\\n        <ng-template pTemplate=\\\"colgroup\\\" let-columns>\\n            <colgroup>\\n                <col *ngFor=\\\"let col of columns\\\" style=\\\"width:350px\\\">\\n            </colgroup>\\n        </ng-template>\\n        <ng-template pTemplate=\\\"header\\\" let-columns>\\n            <tr>\\n                <th *ngFor=\\\"let col of columns\\\">\\n                    {{col.header}}\\n                </th>\\n            </tr>\\n        </ng-template>\\n        <ng-template pTemplate=\\\"body\\\" let-rowNode let-rowData=\\\"rowData\\\" let-columns=\\\"columns\\\">\\n            <tr>\\n                <td *ngFor=\\\"let col of columns; let i = index\\\">\\n                    <p-treeTableToggler [rowNode]=\\\"rowNode\\\" *ngIf=\\\"i == 0\\\"></p-treeTableToggler>\\n                    {{rowData[col.field]}}\\n                </td>\\n            </tr>            \\n        </ng-template>\\n    </p-treeTable>\\n\\n    <h3>Horizontal and Vertical</h3>\\n    <p-treeTable [value]=\\\"files4\\\" [columns]=\\\"cols\\\" [scrollable]=\\\"true\\\" scrollHeight=\\\"200px\\\" [style]=\\\"{width:'600px'}\\\">\\n        <ng-template pTemplate=\\\"colgroup\\\" let-columns>\\n            <colgroup>\\n                <col *ngFor=\\\"let col of columns\\\" style=\\\"width:350px\\\">\\n            </colgroup>\\n        </ng-template>\\n        <ng-template pTemplate=\\\"header\\\" let-columns>\\n            <tr>\\n                <th *ngFor=\\\"let col of columns\\\">\\n                    {{col.header}}\\n                </th>\\n            </tr>\\n        </ng-template>\\n        <ng-template pTemplate=\\\"body\\\" let-rowNode let-rowData=\\\"rowData\\\" let-columns=\\\"columns\\\">\\n            <tr>\\n                <td *ngFor=\\\"let col of columns; let i = index\\\">\\n                    <p-treeTableToggler [rowNode]=\\\"rowNode\\\" *ngIf=\\\"i == 0\\\"></p-treeTableToggler>\\n                    {{rowData[col.field]}}\\n                </td>\\n            </tr>            \\n        </ng-template>\\n    </p-treeTable>\\n\\n    <h3>Frozen Columns</h3>\\n    <p-treeTable [value]=\\\"files5\\\" [columns]=\\\"scrollableCols\\\" [frozenColumns]=\\\"frozenCols\\\" [scrollable]=\\\"true\\\" scrollHeight=\\\"200px\\\" frozenWidth=\\\"200px\\\">\\n        <ng-template pTemplate=\\\"colgroup\\\" let-columns>\\n            <colgroup>\\n                <col *ngFor=\\\"let col of columns\\\" style=\\\"width:250px\\\">\\n            </colgroup>\\n        </ng-template>\\n        <ng-template pTemplate=\\\"header\\\" let-columns>\\n            <tr>\\n                <th *ngFor=\\\"let col of columns\\\">\\n                    {{col.header}}\\n                </th>\\n            </tr>\\n        </ng-template>\\n        <ng-template pTemplate=\\\"body\\\" let-rowData=\\\"rowData\\\" let-columns=\\\"columns\\\">\\n            <tr>\\n                <td *ngFor=\\\"let col of columns; let i = index\\\">\\n                    {{rowData[col.field]}}\\n                </td>\\n            </tr>            \\n        </ng-template>\\n        <ng-template pTemplate=\\\"frozenbody\\\" let-rowNode let-rowData=\\\"rowData\\\">\\n            <tr>\\n                <td>\\n                    <p-treeTableToggler [rowNode]=\\\"rowNode\\\"></p-treeTableToggler>\\n                    {{rowData.name}}\\n                </td>\\n            </tr>            \\n        </ng-template>\\n    </p-treeTable>\\n</div>\\n\\n<div class=\\\"content-section documentation\\\">\\n    <p-tabView>\\n        <p-tabPanel header=\\\"treetablescrolldemo.ts\\\">\\n            <a href=\\\"https://github.com/primefaces/primeng/tree/master/src/app/showcase/components/treetable/treetablescrolldemo.ts\\\" class=\\\"btn-viewsource\\\" target=\\\"_blank\\\">\\n                <span>View on GitHub</span>\\n            </a>\\n            <a href=\\\"https://stackblitz.com/edit/primeng-treetablescroll-demo\\\" class=\\\"btn-viewsource\\\" style=\\\"margin-left: .5em;\\\" target=\\\"_blank\\\">\\n                <span>Edit in StackBlitz</span>\\n            </a>\\n<pre>\\n<code class=\\\"language-typescript\\\" pCode ngNonBindable>\\nimport &#123; Component &#125; from '@angular/core';\\nimport &#123; TreeNode &#125; from 'primeng/api';\\nimport &#123; NodeService &#125; from '../../service/nodeservice';\\n\\n@Component(&#123;\\n    templateUrl: './treetablescrolldemo.html'\\n&#125;)\\nexport class TreeTableScrollDemo &#123;\\n    \\n    files1: TreeNode[];\\n\\n    files2: TreeNode[];\\n\\n    files3: TreeNode[];\\n\\n    files4: TreeNode[];\\n\\n    files5: TreeNode[];\\n\\n    virtualFiles: TreeNode[];\\n\\n    cols: any[];\\n\\n    frozenCols: any[];\\n\\n    scrollableCols: any[];\\n\\n    dialogVisible: boolean;\\n\\n    constructor(private nodeService: NodeService) &#123; &#125;\\n\\n    ngOnInit() &#123;\\n        this.nodeService.getFilesystem().then(files => this.files1 = files);\\n        this.nodeService.getFilesystem().then(files => this.files3 = files);\\n        this.nodeService.getFilesystem().then(files => this.files4 = files);\\n        this.nodeService.getFilesystem().then(files => this.files5 = files);\\n        this.files2 = Array.from(&#123;length: 100&#125;).map((_,i) => this.createNode(i, 5));\\n        this.virtualFiles = Array.from(&#123;length: 1000&#125;).map((_,i) => this.createNode(i, 100));\\n\\n        this.cols = [\\n            &#123; field: 'name', header: 'Name' &#125;,\\n            &#123; field: 'size', header: 'Size' &#125;,\\n            &#123; field: 'type', header: 'Type' &#125;\\n        ];\\n\\n        this.scrollableCols = [\\n            &#123; field: 'size', header: 'Size' &#125;,\\n            &#123; field: 'type', header: 'Type' &#125;,\\n            &#123; field: 'size', header: 'Size' &#125;,\\n            &#123; field: 'type', header: 'Type' &#125;,\\n            &#123; field: 'size', header: 'Size' &#125;,\\n            &#123; field: 'type', header: 'Type' &#125;\\n        ];\\n\\n        this.frozenCols = [\\n            &#123; field: 'name', header: 'Name' &#125;\\n        ];\\n    &#125;\\n\\n    createNode(i: number, children: number): TreeNode &#123;\\n        let node: TreeNode = &#123;\\n            data: &#123;name: 'Node ' + i, type: 'virtual node', size: Math.ceil(Math.random() * 10000) + 'kb'&#125;,\\n            children: Array.from(&#123;length: children&#125;).map((_,j) => &#123;\\n                return &#123; \\n                    data: &#123;name: 'Node ' + i + '.' + j, type: 'virtual child node', size: Math.ceil(Math.random() * 10000) + 'kb'&#125;\\n                &#125;\\n            &#125;)\\n        &#125;;\\n\\n        return node;\\n    &#125;\\n\\n    showDialog() &#123;\\n        this.dialogVisible = true;\\n    &#125;\\n&#125;\\n</code>\\n</pre>\\n        </p-tabPanel>\\n\\n        <p-tabPanel header=\\\"treetablescrolldemo.html\\\">\\n            <a href=\\\"https://github.com/primefaces/primeng/tree/master/src/app/showcase/components/table/treetablescrolldemo.html\\\" class=\\\"btn-viewsource\\\" target=\\\"_blank\\\">\\n                <span>View on GitHub</span>\\n            </a>\\n            <a href=\\\"https://stackblitz.com/edit/primeng-treetablescroll-demo\\\" class=\\\"btn-viewsource\\\" style=\\\"margin-left: .5em;\\\" target=\\\"_blank\\\">\\n                <span>Edit in StackBlitz</span>\\n            </a>\\n<pre>\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\n&lt;h3&gt;Vertical with Fixed Viewport&lt;/h3&gt;\\n&lt;p-treeTable [value]=\\\"files1\\\" [columns]=\\\"cols\\\" [scrollable]=\\\"true\\\" scrollHeight=\\\"200px\\\"&gt;\\n    &lt;ng-template pTemplate=\\\"header\\\" let-columns&gt;\\n        &lt;tr&gt;\\n            &lt;th *ngFor=\\\"let col of columns\\\"&gt;\\n                &#123;&#123;col.header&#125;&#125;\\n            &lt;/th&gt;\\n        &lt;/tr&gt;\\n    &lt;/ng-template&gt;\\n    &lt;ng-template pTemplate=\\\"body\\\" let-rowNode let-rowData=\\\"rowData\\\" let-columns=\\\"columns\\\"&gt;\\n        &lt;tr&gt;\\n            &lt;td *ngFor=\\\"let col of columns; let i = index\\\"&gt;\\n                &lt;p-treeTableToggler [rowNode]=\\\"rowNode\\\" *ngIf=\\\"i == 0\\\"&gt;&lt;/p-treeTableToggler&gt;\\n                &#123;&#123;rowData[col.field]&#125;&#125;\\n            &lt;/td&gt;\\n        &lt;/tr&gt;            \\n    &lt;/ng-template&gt;\\n&lt;/p-treeTable&gt;\\n\\n&lt;h3&gt;Flexible Viewport&lt;/h3&gt;\\n&lt;p&gt;Flex scroll feature makes the scrollable viewport section dynamic so that it can grow or shrink relative to the parent size of the table. Click the button below\\n    to display a resizable and maximizable Dialog where data viewport adjusts itself according to the size changes.&lt;/p&gt;\\n\\n&lt;button type=\\\"button\\\" (click)=\\\"showDialog()\\\" pButton icon=\\\"pi pi-external-link\\\" label=\\\"View\\\"&gt;&lt;/button&gt;\\n&lt;p-dialog header=\\\"Flexible ScrollHeight\\\" [(visible)]=\\\"dialogVisible\\\" [style]=\\\"&#123;width: '50vw'&#125;\\\" [baseZIndex]=\\\"10000\\\" [maximizable]=\\\"true\\\" [modal]=\\\"true\\\" [resizable]=\\\"true\\\" [contentStyle]=\\\"&#123;height: '300px'&#125;\\\"&gt;\\n    &lt;p-treeTable [value]=\\\"files2\\\" [columns]=\\\"cols\\\" [scrollable]=\\\"true\\\" scrollHeight=\\\"flex\\\"&gt;\\n        &lt;ng-template pTemplate=\\\"header\\\" let-columns&gt;\\n            &lt;tr&gt;\\n                &lt;th *ngFor=\\\"let col of columns\\\"&gt;\\n                    &#123;&#123;col.header&#125;&#125;\\n                &lt;/th&gt;\\n            &lt;/tr&gt;\\n        &lt;/ng-template&gt;\\n        &lt;ng-template pTemplate=\\\"body\\\" let-rowNode let-rowData=\\\"rowData\\\" let-columns=\\\"columns\\\"&gt;\\n            &lt;tr&gt;\\n                &lt;td *ngFor=\\\"let col of columns; let i = index\\\"&gt;\\n                    &lt;p-treeTableToggler [rowNode]=\\\"rowNode\\\" *ngIf=\\\"i == 0\\\"&gt;&lt;/p-treeTableToggler&gt;\\n                    &#123;&#123;rowData[col.field]&#125;&#125;\\n                &lt;/td&gt;\\n            &lt;/tr&gt;            \\n        &lt;/ng-template&gt;\\n    &lt;/p-treeTable&gt;\\n    &lt;p-footer&gt;\\n        &lt;button type=\\\"button\\\" pButton icon=\\\"pi pi-check\\\" (click)=\\\"dialogVisible=false\\\" label=\\\"Yes\\\"&gt;&lt;/button&gt;\\n        &lt;button type=\\\"button\\\" pButton icon=\\\"pi pi-times\\\" (click)=\\\"dialogVisible=false\\\" label=\\\"No\\\" class=\\\"ui-button-secondary\\\"&gt;&lt;/button&gt;\\n    &lt;/p-footer&gt;        \\n&lt;/p-dialog&gt;\\n\\n&lt;h3&gt;Full Page Scroll&lt;/h3&gt;\\n&lt;p&gt;FlexScroll can also be used for cases where scrollable viewport should be responsive with respect to the window size. See the &lt;a [routerLink]=\\\"['/treetable/flexscroll']\\\"&gt;Full Page&lt;/a&gt; demo for an example.&lt;/p&gt;\\n\\n&lt;h3&gt;Virtual Scroll with 100000 Nodes&lt;/h3&gt;\\n&lt;p-treeTable [value]=\\\"virtualFiles\\\" [columns]=\\\"cols\\\" [scrollable]=\\\"true\\\" [rows]=\\\"100\\\" scrollHeight=\\\"200px\\\"\\n    [virtualScroll]=\\\"true\\\" [virtualRowHeight]=\\\"34\\\"&gt;\\n    &lt;ng-template pTemplate=\\\"header\\\" let-columns&gt;\\n        &lt;tr&gt;\\n            &lt;th *ngFor=\\\"let col of columns\\\"&gt;\\n                &#123;&#123;col.header&#125;&#125;\\n            &lt;/th&gt;\\n        &lt;/tr&gt;\\n    &lt;/ng-template&gt;\\n    &lt;ng-template pTemplate=\\\"body\\\" let-rowNode let-rowData=\\\"rowData\\\" let-columns=\\\"columns\\\"&gt;\\n        &lt;tr style=\\\"height:34px\\\"&gt;\\n            &lt;td *ngFor=\\\"let col of columns; let i = index\\\"&gt;\\n                &lt;p-treeTableToggler [rowNode]=\\\"rowNode\\\" *ngIf=\\\"i == 0\\\"&gt;&lt;/p-treeTableToggler&gt;\\n                &#123;&#123;rowData[col.field]&#125;&#125;\\n            &lt;/td&gt;\\n        &lt;/tr&gt;\\n    &lt;/ng-template&gt;\\n&lt;/p-treeTable&gt;\\n\\n&lt;h3&gt;Horizontal&lt;/h3&gt;\\n&lt;p-treeTable [value]=\\\"files3\\\" [columns]=\\\"cols\\\" [scrollable]=\\\"true\\\" [style]=\\\"&#123;width:'600px'&#125;\\\"&gt;\\n    &lt;ng-template pTemplate=\\\"colgroup\\\" let-columns&gt;\\n        &lt;colgroup&gt;\\n            &lt;col *ngFor=\\\"let col of columns\\\" style=\\\"width:350px\\\"&gt;\\n        &lt;/colgroup&gt;\\n    &lt;/ng-template&gt;\\n    &lt;ng-template pTemplate=\\\"header\\\" let-columns&gt;\\n        &lt;tr&gt;\\n            &lt;th *ngFor=\\\"let col of columns\\\"&gt;\\n                &#123;&#123;col.header&#125;&#125;\\n            &lt;/th&gt;\\n        &lt;/tr&gt;\\n    &lt;/ng-template&gt;\\n    &lt;ng-template pTemplate=\\\"body\\\" let-rowNode let-rowData=\\\"rowData\\\" let-columns=\\\"columns\\\"&gt;\\n        &lt;tr&gt;\\n            &lt;td *ngFor=\\\"let col of columns; let i = index\\\"&gt;\\n                &lt;p-treeTableToggler [rowNode]=\\\"rowNode\\\" *ngIf=\\\"i == 0\\\"&gt;&lt;/p-treeTableToggler&gt;\\n                &#123;&#123;rowData[col.field]&#125;&#125;\\n            &lt;/td&gt;\\n        &lt;/tr&gt;            \\n    &lt;/ng-template&gt;\\n&lt;/p-treeTable&gt;\\n\\n&lt;h3&gt;Horizontal and Vertical&lt;/h3&gt;\\n&lt;p-treeTable [value]=\\\"files4\\\" [columns]=\\\"cols\\\" [scrollable]=\\\"true\\\" scrollHeight=\\\"200px\\\" [style]=\\\"&#123;width:'600px'&#125;\\\"&gt;\\n    &lt;ng-template pTemplate=\\\"colgroup\\\" let-columns&gt;\\n        &lt;colgroup&gt;\\n            &lt;col *ngFor=\\\"let col of columns\\\" style=\\\"width:350px\\\"&gt;\\n        &lt;/colgroup&gt;\\n    &lt;/ng-template&gt;\\n    &lt;ng-template pTemplate=\\\"header\\\" let-columns&gt;\\n        &lt;tr&gt;\\n            &lt;th *ngFor=\\\"let col of columns\\\"&gt;\\n                &#123;&#123;col.header&#125;&#125;\\n            &lt;/th&gt;\\n        &lt;/tr&gt;\\n    &lt;/ng-template&gt;\\n    &lt;ng-template pTemplate=\\\"body\\\" let-rowNode let-rowData=\\\"rowData\\\" let-columns=\\\"columns\\\"&gt;\\n        &lt;tr&gt;\\n            &lt;td *ngFor=\\\"let col of columns; let i = index\\\"&gt;\\n                &lt;p-treeTableToggler [rowNode]=\\\"rowNode\\\" *ngIf=\\\"i == 0\\\"&gt;&lt;/p-treeTableToggler&gt;\\n                &#123;&#123;rowData[col.field]&#125;&#125;\\n            &lt;/td&gt;\\n        &lt;/tr&gt;            \\n    &lt;/ng-template&gt;\\n&lt;/p-treeTable&gt;\\n\\n&lt;h3&gt;Frozen Columns&lt;/h3&gt;\\n&lt;p-treeTable [value]=\\\"files5\\\" [columns]=\\\"scrollableCols\\\" [frozenColumns]=\\\"frozenCols\\\" [scrollable]=\\\"true\\\" scrollHeight=\\\"200px\\\" frozenWidth=\\\"200px\\\"&gt;\\n    &lt;ng-template pTemplate=\\\"colgroup\\\" let-columns&gt;\\n        &lt;colgroup&gt;\\n            &lt;col *ngFor=\\\"let col of columns\\\" style=\\\"width:250px\\\"&gt;\\n        &lt;/colgroup&gt;\\n    &lt;/ng-template&gt;\\n    &lt;ng-template pTemplate=\\\"header\\\" let-columns&gt;\\n        &lt;tr&gt;\\n            &lt;th *ngFor=\\\"let col of columns\\\"&gt;\\n                &#123;&#123;col.header&#125;&#125;\\n            &lt;/th&gt;\\n        &lt;/tr&gt;\\n    &lt;/ng-template&gt;\\n    &lt;ng-template pTemplate=\\\"body\\\" let-rowData=\\\"rowData\\\" let-columns=\\\"columns\\\"&gt;\\n        &lt;tr&gt;\\n            &lt;td *ngFor=\\\"let col of columns; let i = index\\\"&gt;\\n                &#123;&#123;rowData[col.field]&#125;&#125;\\n            &lt;/td&gt;\\n        &lt;/tr&gt;            \\n    &lt;/ng-template&gt;\\n    &lt;ng-template pTemplate=\\\"frozenbody\\\" let-rowNode let-rowData=\\\"rowData\\\"&gt;\\n        &lt;tr&gt;\\n            &lt;td&gt;\\n                &lt;p-treeTableToggler [rowNode]=\\\"rowNode\\\"&gt;&lt;/p-treeTableToggler&gt;\\n                &#123;&#123;rowData.name&#125;&#125;\\n            &lt;/td&gt;\\n        &lt;/tr&gt;            \\n    &lt;/ng-template&gt;\\n&lt;/p-treeTable&gt;\\n</code>\\n</pre>\\n        </p-tabPanel>\\n        <p-tabPanel header=\\\"StackBlitz\\\">\\n            <ng-template pTemplate=\\\"content\\\">\\n                <iframe src=\\\"https://stackblitz.com/edit/primeng-treetablescroll-demo?embed=1\\\" style=\\\"width: 100%; height: 768px; border: none;\\\"></iframe>\\n            </ng-template>\\n        </p-tabPanel>\\n    </p-tabView>\\n</div>\\n\";","export default \"<div class=\\\"content-section introduction\\\">\\n    <div>\\n        <span class=\\\"feature-title\\\">TreeTable <span class=\\\"subitem\\\">Sections</span></span>\\n        <span>TreeTable provides templates to customize the content of various sections such as caption and summary.</span>\\n    </div>\\n</div>\\n\\n<div class=\\\"content-section implementation\\\">\\n    <p-treeTable [value]=\\\"files\\\" [columns]=\\\"cols\\\">\\n        <ng-template pTemplate=\\\"caption\\\">\\n            FileSystem\\n        </ng-template>\\n        <ng-template pTemplate=\\\"header\\\" let-columns>\\n            <tr>\\n                <th *ngFor=\\\"let col of columns\\\">\\n                    {{col.header}}\\n                </th>\\n            </tr>\\n        </ng-template>\\n        <ng-template pTemplate=\\\"body\\\" let-rowNode let-rowData=\\\"rowData\\\" let-columns=\\\"columns\\\">\\n            <tr>\\n                <td *ngFor=\\\"let col of columns; let i = index\\\">\\n                    <p-treeTableToggler [rowNode]=\\\"rowNode\\\" *ngIf=\\\"i == 0\\\"></p-treeTableToggler>\\n                    {{rowData[col.field]}}\\n                </td>\\n            </tr>            \\n        </ng-template>\\n        <ng-template pTemplate=\\\"footer\\\" let-columns>\\n            <tr>\\n                <td *ngFor=\\\"let col of columns\\\">\\n                    {{col.header}}\\n                </td>\\n            </tr>\\n        </ng-template>\\n        <ng-template pTemplate=\\\"summary\\\">\\n            There are {{files?.length}} Root Folders\\n        </ng-template>\\n    </p-treeTable>\\n</div>\\n\\n<div class=\\\"content-section documentation\\\">\\n    <p-tabView>\\n        <p-tabPanel header=\\\"treetablesectionsdemo.ts\\\">\\n            <a href=\\\"https://github.com/primefaces/primeng/tree/master/src/app/showcase/components/treetable/treetablesectionsdemo.ts\\\" class=\\\"btn-viewsource\\\" target=\\\"_blank\\\">\\n                <span>View on GitHub</span>\\n            </a>\\n            <a href=\\\"https://stackblitz.com/edit/primeng-treetablesections-demo\\\" class=\\\"btn-viewsource\\\" style=\\\"margin-left: .5em;\\\" target=\\\"_blank\\\">\\n                <span>Edit in StackBlitz</span>\\n            </a>\\n<pre>\\n<code class=\\\"language-typescript\\\" pCode ngNonBindable>\\nexport class TreeTableSectionsDemo implements OnInit &123;\\n\\n    files: TreeNode[];\\n\\n    cols: any[];\\n\\n    constructor(private nodeService: NodeService) &123; &125;\\n\\n    ngOnInit() &123;\\n        this.nodeService.getFilesystem().then(files => this.files = files);\\n\\n        this.cols = [\\n            &123; field: 'name', header: 'Name' &125;,\\n            &123; field: 'size', header: 'Size' &125;,\\n            &123; field: 'type', header: 'Type' &125;\\n        ];\\n    &125;\\n&125;\\n</code>\\n</pre>   \\n        </p-tabPanel>\\n\\n        <p-tabPanel header=\\\"treetablesectionsdemo.html\\\">\\n            <a href=\\\"https://github.com/primefaces/primeng/tree/master/src/app/showcase/components/treetable/treetablesectionsdemo.html\\\" class=\\\"btn-viewsource\\\" target=\\\"_blank\\\">\\n                <span>View on GitHub</span>\\n            </a>\\n            <a href=\\\"https://stackblitz.com/edit/primeng-treetablesections-demo\\\" class=\\\"btn-viewsource\\\" style=\\\"margin-left: .5em;\\\" target=\\\"_blank\\\">\\n                <span>Edit in StackBlitz</span>\\n            </a>\\n<pre>\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\n&lt;p-treeTable [value]=\\\"files\\\" [columns]=\\\"cols\\\"&gt;\\n    &lt;ng-template pTemplate=\\\"caption\\\"&gt;\\n        FileSystem\\n    &lt;/ng-template&gt;\\n    &lt;ng-template pTemplate=\\\"header\\\" let-columns&gt;\\n        &lt;tr&gt;\\n            &lt;th *ngFor=\\\"let col of columns\\\"&gt;\\n                &123;&123;col.header&125;&125;\\n            &lt;/th&gt;\\n        &lt;/tr&gt;\\n    &lt;/ng-template&gt;\\n    &lt;ng-template pTemplate=\\\"body\\\" let-rowNode let-rowData=\\\"rowData\\\" let-columns=\\\"columns\\\"&gt;\\n        &lt;tr&gt;\\n            &lt;td *ngFor=\\\"let col of columns; let i = index\\\"&gt;\\n                &lt;p-treeTableToggler [rowNode]=\\\"rowNode\\\" *ngIf=\\\"i == 0\\\"&gt;&lt;/p-treeTableToggler&gt;\\n                &123;&123;rowData[col.field]&125;&125;\\n            &lt;/td&gt;\\n        &lt;/tr&gt;            \\n    &lt;/ng-template&gt;\\n    &lt;ng-template pTemplate=\\\"footer\\\" let-columns&gt;\\n        &lt;tr&gt;\\n            &lt;td *ngFor=\\\"let col of columns\\\"&gt;\\n                &123;&123;col.header&125;&125;\\n            &lt;/td&gt;\\n        &lt;/tr&gt;\\n    &lt;/ng-template&gt;\\n    &lt;ng-template pTemplate=\\\"summary\\\"&gt;\\n        There are &123;&123;files?.length&125;&125; Root Folders\\n    &lt;/ng-template&gt;\\n&lt;/p-treeTable&gt;\\n</code>\\n</pre>\\n        </p-tabPanel>\\n        <p-tabPanel header=\\\"StackBlitz\\\">\\n            <ng-template pTemplate=\\\"content\\\">\\n                <iframe src=\\\"https://stackblitz.com/edit/primeng-treetablesections-demo?embed=1\\\" style=\\\"width: 100%; height: 768px; border: none;\\\"></iframe>\\n            </ng-template>\\n        </p-tabPanel>\\n    </p-tabView>\\n</div>\";","export default \"<div class=\\\"content-section introduction\\\">\\n    <div>\\n        <span class=\\\"feature-title\\\">TreeTable <span class=\\\"subitem\\\">Selection</span></span>\\n        <span>TreeTable supports single, multiple and checkbox based selection modes.</span>\\n    </div>\\n</div>\\n\\n<div class=\\\"content-section implementation\\\">\\n    <p-toast></p-toast>\\n\\n    <h3 class=\\\"first\\\">Single</h3>\\n    <p-treeTable [value]=\\\"files1\\\" [columns]=\\\"cols\\\" selectionMode=\\\"single\\\" [(selection)]=\\\"selectedNode1\\\" dataKey=\\\"name\\\">\\n        <ng-template pTemplate=\\\"header\\\" let-columns>\\n            <tr>\\n                <th *ngFor=\\\"let col of columns\\\">\\n                    {{col.header}}\\n                </th>\\n            </tr>\\n        </ng-template>\\n        <ng-template pTemplate=\\\"body\\\" let-rowNode let-rowData=\\\"rowData\\\" let-columns=\\\"columns\\\">\\n            <tr [ttRow]=\\\"rowNode\\\" [ttRow]=\\\"rowNode\\\" [ttSelectableRow]=\\\"rowNode\\\">\\n                <td *ngFor=\\\"let col of columns; let i = index\\\">\\n                    <p-treeTableToggler [rowNode]=\\\"rowNode\\\" *ngIf=\\\"i == 0\\\"></p-treeTableToggler>\\n                    {{rowData[col.field]}}\\n                </td>\\n            </tr>\\n        </ng-template>\\n        <ng-template pTemplate=\\\"summary\\\">\\n            <div style=\\\"text-align: left\\\">\\n                Selected Node: <span style=\\\"font-weight: normal\\\">{{selectedNode1 ? selectedNode1.data.name + ' - ' + selectedNode1.data.size + ' - ' + selectedNode1.data.type : 'none'}}</span>\\n            </div>\\n        </ng-template>\\n    </p-treeTable>\\n\\n    <h3>Multiple</h3>\\n    <p-treeTable [value]=\\\"files2\\\" [columns]=\\\"cols\\\" selectionMode=\\\"multiple\\\" [(selection)]=\\\"selectedNodes1\\\" dataKey=\\\"name\\\">\\n        <ng-template pTemplate=\\\"header\\\" let-columns>\\n            <tr>\\n                <th *ngFor=\\\"let col of columns\\\">\\n                    {{col.header}}\\n                </th>\\n            </tr>\\n        </ng-template>\\n        <ng-template pTemplate=\\\"body\\\" let-rowNode let-rowData=\\\"rowData\\\" let-columns=\\\"columns\\\">\\n            <tr [ttRow]=\\\"rowNode\\\" [ttRow]=\\\"rowNode\\\" [ttSelectableRow]=\\\"rowNode\\\">\\n                <td *ngFor=\\\"let col of columns; let i = index\\\">\\n                    <p-treeTableToggler [rowNode]=\\\"rowNode\\\" *ngIf=\\\"i == 0\\\"></p-treeTableToggler>\\n                    {{rowData[col.field]}}\\n                </td>\\n            </tr>\\n        </ng-template>\\n        <ng-template pTemplate=\\\"summary\\\">\\n            <div style=\\\"text-align: left\\\">\\n                Selected Nodes: <span *ngIf=\\\"!selectedNodes1 || selectedNodes1.length === 0\\\" style=\\\"font-weight: normal\\\">none</span>\\n                <ul *ngIf=\\\"selectedNodes1 && selectedNodes1.length\\\">\\n                    <li *ngFor=\\\"let node of selectedNodes1\\\">\\n                        <span style=\\\"font-weight: normal\\\">{{node.data.name + ' - ' + node.data.size + ' - ' + node.data.type}}</span>\\n                    </li>\\n                </ul>\\n            </div>\\n        </ng-template>\\n    </p-treeTable>\\n\\n    <h3>Multiple with MetaKey</h3>\\n    <p-treeTable [value]=\\\"files3\\\" [columns]=\\\"cols\\\" selectionMode=\\\"multiple\\\" [(selection)]=\\\"selectedNodes2\\\" dataKey=\\\"name\\\" [metaKeySelection]=\\\"true\\\">\\n        <ng-template pTemplate=\\\"header\\\" let-columns>\\n            <tr>\\n                <th *ngFor=\\\"let col of columns\\\">\\n                    {{col.header}}\\n                </th>\\n            </tr>\\n        </ng-template>\\n        <ng-template pTemplate=\\\"body\\\" let-rowNode let-rowData=\\\"rowData\\\" let-columns=\\\"columns\\\">\\n            <tr [ttRow]=\\\"rowNode\\\" [ttRow]=\\\"rowNode\\\" [ttSelectableRow]=\\\"rowNode\\\">\\n                <td *ngFor=\\\"let col of columns; let i = index\\\">\\n                    <p-treeTableToggler [rowNode]=\\\"rowNode\\\" *ngIf=\\\"i == 0\\\"></p-treeTableToggler>\\n                    {{rowData[col.field]}}\\n                </td>\\n            </tr>\\n        </ng-template>\\n        <ng-template pTemplate=\\\"summary\\\">\\n            <div style=\\\"text-align: left\\\">\\n                Selected Nodes: <span *ngIf=\\\"!selectedNodes2 || selectedNodes2.length === 0\\\" style=\\\"font-weight: normal\\\">none</span>\\n                <ul *ngIf=\\\"selectedNodes2 && selectedNodes2.length\\\">\\n                    <li *ngFor=\\\"let node of selectedNodes2\\\">\\n                        <span style=\\\"font-weight: normal\\\">{{node.data.name + ' - ' + node.data.size + ' - ' + node.data.type}}</span>\\n                    </li>\\n                </ul>\\n            </div>\\n        </ng-template>\\n    </p-treeTable>\\n\\n    <h3>Events</h3>\\n    <p-treeTable [value]=\\\"files4\\\" [columns]=\\\"cols\\\" selectionMode=\\\"single\\\" [(selection)]=\\\"selectedNode2\\\" dataKey=\\\"name\\\"\\n        (onNodeSelect)=\\\"nodeSelect($event)\\\" (onNodeUnselect)=\\\"nodeUnselect($event)\\\">\\n        <ng-template pTemplate=\\\"header\\\" let-columns>\\n            <tr>\\n                <th *ngFor=\\\"let col of columns\\\">\\n                    {{col.header}}\\n                </th>\\n            </tr>\\n        </ng-template>\\n        <ng-template pTemplate=\\\"body\\\" let-rowNode let-rowData=\\\"rowData\\\" let-columns=\\\"columns\\\">\\n            <tr [ttRow]=\\\"rowNode\\\" [ttRow]=\\\"rowNode\\\" [ttSelectableRow]=\\\"rowNode\\\">\\n                <td *ngFor=\\\"let col of columns; let i = index\\\">\\n                    <p-treeTableToggler [rowNode]=\\\"rowNode\\\" *ngIf=\\\"i == 0\\\"></p-treeTableToggler>\\n                    {{rowData[col.field]}}\\n                </td>\\n            </tr>\\n        </ng-template>\\n    </p-treeTable>\\n\\n    <h3>Checkbox</h3>\\n    <p-treeTable [value]=\\\"files5\\\" [columns]=\\\"cols\\\" selectionMode=\\\"checkbox\\\" [(selection)]=\\\"selectedNodes3\\\">\\n        <ng-template pTemplate=\\\"caption\\\">\\n            <div style=\\\"text-align:left\\\">\\n                <p-treeTableHeaderCheckbox></p-treeTableHeaderCheckbox>\\n                <span style=\\\"margin-left: .25em; vertical-align: middle\\\">Toggle All</span>\\n            </div>\\n        </ng-template>\\n        <ng-template pTemplate=\\\"header\\\" let-columns>\\n            <tr>\\n                <th *ngFor=\\\"let col of columns\\\">\\n                    {{col.header}}\\n                </th>\\n            </tr>\\n        </ng-template>\\n        <ng-template pTemplate=\\\"body\\\" let-rowNode let-rowData=\\\"rowData\\\" let-columns=\\\"columns\\\">\\n            <tr>\\n                <td *ngFor=\\\"let col of columns; let i = index\\\">\\n                    <p-treeTableToggler [rowNode]=\\\"rowNode\\\" *ngIf=\\\"i == 0\\\"></p-treeTableToggler>\\n                    <p-treeTableCheckbox [value]=\\\"rowNode\\\" *ngIf=\\\"i == 0\\\"></p-treeTableCheckbox>\\n                    {{rowData[col.field]}}\\n                </td>\\n            </tr>\\n        </ng-template>\\n        <ng-template pTemplate=\\\"summary\\\">\\n            <div style=\\\"text-align: left\\\">\\n                Selected Nodes: <span *ngIf=\\\"!selectedNodes3 || selectedNodes3.length === 0\\\" style=\\\"font-weight: normal\\\">none</span>\\n                <ul *ngIf=\\\"selectedNodes3 && selectedNodes3.length\\\">\\n                    <li *ngFor=\\\"let node of selectedNodes3\\\">\\n                        <span style=\\\"font-weight: normal\\\">{{node.data.name + ' - ' + node.data.size + ' - ' + node.data.type}}</span>\\n                    </li>\\n                </ul>\\n            </div>\\n        </ng-template>\\n    </p-treeTable>\\n</div>\\n\\n<div class=\\\"content-section documentation\\\">\\n    <p-tabView>\\n        <p-tabPanel header=\\\"treetableselectiondemo.ts\\\">\\n            <a href=\\\"https://github.com/primefaces/primeng/tree/master/src/app/showcase/components/treetable/treetableselectiondemo.ts\\\" class=\\\"btn-viewsource\\\" target=\\\"_blank\\\">\\n                <span>View on GitHub</span>\\n            </a>\\n            <a href=\\\"https://stackblitz.com/edit/primeng-treetableselection-demo\\\" class=\\\"btn-viewsource\\\" style=\\\"margin-left: .5em;\\\" target=\\\"_blank\\\">\\n                <span>Edit in StackBlitz</span>\\n            </a>\\n<pre>\\n<code class=\\\"language-typescript\\\" pCode ngNonBindable>\\nexport class TreeTableSelectionDemo &#123;\\n\\n    files1: TreeNode[];\\n\\n    files2: TreeNode[];\\n\\n    files3: TreeNode[];\\n\\n    files4: TreeNode[];\\n\\n    files5: TreeNode[];\\n\\n    selectedNode1: TreeNode;\\n\\n    selectedNode2: TreeNode;\\n\\n    selectedNodes1: TreeNode[];\\n\\n    selectedNodes2: TreeNode[];\\n\\n    selectedNodes3: TreeNode[];\\n\\n    cols: any[];\\n\\n    constructor(private nodeService: NodeService, private messageService: MessageService) &#123; &#125;\\n\\n    ngOnInit() &#123;\\n        this.nodeService.getFilesystem().then(files => this.files1 = files);\\n        this.nodeService.getFilesystem().then(files => this.files2 = files);\\n        this.nodeService.getFilesystem().then(files => this.files3 = files);\\n        this.nodeService.getFilesystem().then(files => this.files4 = files);\\n        this.nodeService.getFilesystem().then(files => this.files5 = files);\\n\\n        this.cols = [\\n            &#123; field: 'name', header: 'Name' &#125;,\\n            &#123; field: 'size', header: 'Size' &#125;,\\n            &#123; field: 'type', header: 'Type' &#125;\\n        ];\\n    &#125;\\n\\n    nodeSelect(event) &#123;\\n        this.messageService.add(&#123;severity: 'info', summary: 'Node Selected', detail: event.node.data.name&#125;);\\n    &#125;\\n\\n    nodeUnselect(event) &#123;\\n        this.messageService.add(&#123;severity: 'info', summary: 'Node Unselected', detail: event.node.data.name&#125;);\\n    &#125;\\n&#125;\\n</code>\\n</pre>\\n        </p-tabPanel>\\n\\n        <p-tabPanel header=\\\"treetableselectiondemo.html\\\">\\n            <a href=\\\"https://github.com/primefaces/primeng/tree/master/src/app/showcase/components/table/tableselectiondemo.html\\\" class=\\\"btn-viewsource\\\" target=\\\"_blank\\\">\\n                <span>View on GitHub</span>\\n            </a>\\n            <a href=\\\"https://stackblitz.com/edit/primeng-treetableselection-demo\\\" class=\\\"btn-viewsource\\\" style=\\\"margin-left: .5em;\\\" target=\\\"_blank\\\">\\n                <span>Edit in StackBlitz</span>\\n            </a>\\n<pre>\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\n&lt;p-toast [style]=\\\"&#123;marginTop: '80px'&#125;\\\"&gt;&lt;/p-toast&gt;\\n\\n&lt;h3 class=\\\"first\\\"&gt;Single&lt;/h3&gt;\\n&lt;p-treeTable [value]=\\\"files1\\\" [columns]=\\\"cols\\\" selectionMode=\\\"single\\\" [(selection)]=\\\"selectedNode1\\\" dataKey=\\\"name\\\"&gt;\\n    &lt;ng-template pTemplate=\\\"header\\\" let-columns&gt;\\n        &lt;tr&gt;\\n            &lt;th *ngFor=\\\"let col of columns\\\"&gt;\\n                &#123;&#123;col.header&#125;&#125;\\n            &lt;/th&gt;\\n        &lt;/tr&gt;\\n    &lt;/ng-template&gt;\\n    &lt;ng-template pTemplate=\\\"body\\\" let-rowNode let-rowData=\\\"rowData\\\" let-columns=\\\"columns\\\"&gt;\\n        &lt;tr [ttRow]=\\\"rowNode\\\" [ttSelectableRow]=\\\"rowNode\\\"&gt;\\n            &lt;td *ngFor=\\\"let col of columns; let i = index\\\"&gt;\\n                &lt;p-treeTableToggler [rowNode]=\\\"rowNode\\\" *ngIf=\\\"i == 0\\\"&gt;&lt;/p-treeTableToggler&gt;\\n                &#123;&#123;rowData[col.field]&#125;&#125;\\n            &lt;/td&gt;\\n        &lt;/tr&gt;\\n    &lt;/ng-template&gt;\\n    &lt;ng-template pTemplate=\\\"summary\\\"&gt;\\n        &lt;div style=\\\"text-align: left\\\"&gt;\\n            Selected Node: &lt;span style=\\\"font-weight: normal\\\"&gt;&#123;&#123;selectedNode1 ? selectedNode1.data.name + ' - ' + selectedNode1.data.size + ' - ' + selectedNode1.data.type : 'none'&#125;&#125;&lt;/span&gt;\\n        &lt;/div&gt;\\n    &lt;/ng-template&gt;\\n&lt;/p-treeTable&gt;\\n\\n&lt;h3&gt;Multiple&lt;/h3&gt;\\n&lt;p-treeTable [value]=\\\"files2\\\" [columns]=\\\"cols\\\" selectionMode=\\\"multiple\\\" [(selection)]=\\\"selectedNodes1\\\" dataKey=\\\"name\\\"&gt;\\n    &lt;ng-template pTemplate=\\\"header\\\" let-columns&gt;\\n        &lt;tr&gt;\\n            &lt;th *ngFor=\\\"let col of columns\\\"&gt;\\n                &#123;&#123;col.header&#125;&#125;\\n            &lt;/th&gt;\\n        &lt;/tr&gt;\\n    &lt;/ng-template&gt;\\n    &lt;ng-template pTemplate=\\\"body\\\" let-rowNode let-rowData=\\\"rowData\\\" let-columns=\\\"columns\\\"&gt;\\n        &lt;tr [ttRow]=\\\"rowNode\\\" [ttSelectableRow]=\\\"rowNode\\\"&gt;\\n            &lt;td *ngFor=\\\"let col of columns; let i = index\\\"&gt;\\n                &lt;p-treeTableToggler [rowNode]=\\\"rowNode\\\" *ngIf=\\\"i == 0\\\"&gt;&lt;/p-treeTableToggler&gt;\\n                &#123;&#123;rowData[col.field]&#125;&#125;\\n            &lt;/td&gt;\\n        &lt;/tr&gt;\\n    &lt;/ng-template&gt;\\n    &lt;ng-template pTemplate=\\\"summary\\\"&gt;\\n        &lt;div style=\\\"text-align: left\\\"&gt;\\n            Selected Nodes: &lt;span *ngIf=\\\"!selectedNodes1 || selectedNodes1.length === 0\\\" style=\\\"font-weight: normal\\\"&gt;none&lt;/span&gt;\\n            &lt;ul *ngIf=\\\"selectedNodes1 && selectedNodes1.length\\\"&gt;\\n                &lt;li *ngFor=\\\"let node of selectedNodes1\\\"&gt;\\n                    &lt;span style=\\\"font-weight: normal\\\"&gt;&#123;&#123;node.data.name + ' - ' + node.data.size + ' - ' + node.data.type&#125;&#125;&lt;/span&gt;\\n                &lt;/li&gt;\\n            &lt;/ul&gt;\\n        &lt;/div&gt;\\n    &lt;/ng-template&gt;\\n&lt;/p-treeTable&gt;\\n\\n&lt;h3&gt;Multiple with MetaKey&lt;/h3&gt;\\n&lt;p-treeTable [value]=\\\"files3\\\" [columns]=\\\"cols\\\" selectionMode=\\\"multiple\\\" [(selection)]=\\\"selectedNodes2\\\" dataKey=\\\"name\\\" [metaKeySelection]=\\\"true\\\"&gt;\\n    &lt;ng-template pTemplate=\\\"header\\\" let-columns&gt;\\n        &lt;tr&gt;\\n            &lt;th *ngFor=\\\"let col of columns\\\"&gt;\\n                &#123;&#123;col.header&#125;&#125;\\n            &lt;/th&gt;\\n        &lt;/tr&gt;\\n    &lt;/ng-template&gt;\\n    &lt;ng-template pTemplate=\\\"body\\\" let-rowNode let-rowData=\\\"rowData\\\" let-columns=\\\"columns\\\"&gt;\\n        &lt;tr [ttRow]=\\\"rowNode\\\" [ttSelectableRow]=\\\"rowNode\\\"&gt;\\n            &lt;td *ngFor=\\\"let col of columns; let i = index\\\"&gt;\\n                &lt;p-treeTableToggler [rowNode]=\\\"rowNode\\\" *ngIf=\\\"i == 0\\\"&gt;&lt;/p-treeTableToggler&gt;\\n                &#123;&#123;rowData[col.field]&#125;&#125;\\n            &lt;/td&gt;\\n        &lt;/tr&gt;\\n    &lt;/ng-template&gt;\\n    &lt;ng-template pTemplate=\\\"summary\\\"&gt;\\n        &lt;div style=\\\"text-align: left\\\"&gt;\\n            Selected Nodes: &lt;span *ngIf=\\\"!selectedNodes2 || selectedNodes2.length === 0\\\" style=\\\"font-weight: normal\\\"&gt;none&lt;/span&gt;\\n            &lt;ul *ngIf=\\\"selectedNodes2 && selectedNodes2.length\\\"&gt;\\n                &lt;li *ngFor=\\\"let node of selectedNodes2\\\"&gt;\\n                    &lt;span style=\\\"font-weight: normal\\\"&gt;&#123;&#123;node.data.name + ' - ' + node.data.size + ' - ' + node.data.type&#125;&#125;&lt;/span&gt;\\n                &lt;/li&gt;\\n            &lt;/ul&gt;\\n        &lt;/div&gt;\\n    &lt;/ng-template&gt;\\n&lt;/p-treeTable&gt;\\n\\n&lt;h3&gt;Events&lt;/h3&gt;\\n&lt;p-treeTable [value]=\\\"files4\\\" [columns]=\\\"cols\\\" selectionMode=\\\"single\\\" [(selection)]=\\\"selectedNode2\\\" dataKey=\\\"name\\\"\\n    (onNodeSelect)=\\\"nodeSelect($event)\\\" (onNodeUnselect)=\\\"nodeUnselect($event)\\\"&gt;\\n    &lt;ng-template pTemplate=\\\"header\\\" let-columns&gt;\\n        &lt;tr&gt;\\n            &lt;th *ngFor=\\\"let col of columns\\\"&gt;\\n                &#123;&#123;col.header&#125;&#125;\\n            &lt;/th&gt;\\n        &lt;/tr&gt;\\n    &lt;/ng-template&gt;\\n    &lt;ng-template pTemplate=\\\"body\\\" let-rowNode let-rowData=\\\"rowData\\\" let-columns=\\\"columns\\\"&gt;\\n        &lt;tr [ttRow]=\\\"rowNode\\\" [ttSelectableRow]=\\\"rowNode\\\"&gt;\\n            &lt;td *ngFor=\\\"let col of columns; let i = index\\\"&gt;\\n                &lt;p-treeTableToggler [rowNode]=\\\"rowNode\\\" *ngIf=\\\"i == 0\\\"&gt;&lt;/p-treeTableToggler&gt;\\n                &#123;&#123;rowData[col.field]&#125;&#125;\\n            &lt;/td&gt;\\n        &lt;/tr&gt;\\n    &lt;/ng-template&gt;\\n&lt;/p-treeTable&gt;\\n\\n&lt;h3&gt;Checkbox&lt;/h3&gt;\\n&lt;p-treeTable [value]=\\\"files5\\\" [columns]=\\\"cols\\\" selectionMode=\\\"checkbox\\\" [(selection)]=\\\"selectedNodes3\\\"&gt;\\n    &lt;ng-template pTemplate=\\\"caption\\\"&gt;\\n        &lt;div style=\\\"text-align:left\\\"&gt;\\n            &lt;p-treeTableHeaderCheckbox&gt;&lt;/p-treeTableHeaderCheckbox&gt;\\n            &lt;span style=\\\"margin-left: .25em; vertical-align: middle\\\"&gt;Toggle All&lt;/span&gt;\\n        &lt;/div&gt;\\n    &lt;/ng-template&gt;\\n    &lt;ng-template pTemplate=\\\"header\\\" let-columns&gt;\\n        &lt;tr&gt;\\n            &lt;th *ngFor=\\\"let col of columns\\\"&gt;\\n                &#123;&#123;col.header&#125;&#125;\\n            &lt;/th&gt;\\n        &lt;/tr&gt;\\n    &lt;/ng-template&gt;\\n    &lt;ng-template pTemplate=\\\"body\\\" let-rowNode let-rowData=\\\"rowData\\\" let-columns=\\\"columns\\\"&gt;\\n        &lt;tr&gt;\\n            &lt;td *ngFor=\\\"let col of columns; let i = index\\\"&gt;\\n                &lt;p-treeTableToggler [rowNode]=\\\"rowNode\\\" *ngIf=\\\"i == 0\\\"&gt;&lt;/p-treeTableToggler&gt;\\n                &lt;p-treeTableCheckbox [value]=\\\"rowNode\\\" *ngIf=\\\"i == 0\\\"&gt;&lt;/p-treeTableCheckbox&gt;\\n                &#123;&#123;rowData[col.field]&#125;&#125;\\n            &lt;/td&gt;\\n        &lt;/tr&gt;\\n    &lt;/ng-template&gt;\\n    &lt;ng-template pTemplate=\\\"summary\\\"&gt;\\n        &lt;div style=\\\"text-align: left\\\"&gt;\\n            Selected Nodes: &lt;span *ngIf=\\\"!selectedNodes3 || selectedNodes3.length === 0\\\" style=\\\"font-weight: normal\\\"&gt;none&lt;/span&gt;\\n            &lt;ul *ngIf=\\\"selectedNodes3 && selectedNodes3.length\\\"&gt;\\n                &lt;li *ngFor=\\\"let node of selectedNodes3\\\"&gt;\\n                    &lt;span style=\\\"font-weight: normal\\\"&gt;&#123;&#123;node.data.name + ' - ' + node.data.size + ' - ' + node.data.type&#125;&#125;&lt;/span&gt;\\n                &lt;/li&gt;\\n            &lt;/ul&gt;\\n        &lt;/div&gt;\\n    &lt;/ng-template&gt;\\n&lt;/p-treeTable&gt;\\n</code>\\n</pre>\\n        </p-tabPanel>\\n        <p-tabPanel header=\\\"StackBlitz\\\">\\n            <ng-template pTemplate=\\\"content\\\">\\n                <iframe src=\\\"https://stackblitz.com/edit/primeng-treetableselection-demo?embed=1\\\" style=\\\"width: 100%; height: 768px; border: none;\\\"></iframe>\\n            </ng-template>\\n        </p-tabPanel>\\n    </p-tabView>\\n</div>\\n\";","export default \"<div class=\\\"content-section introduction\\\">\\n    <div>\\n        <span class=\\\"feature-title\\\">TreeTable <span class=\\\"subitem\\\">Sort</span></span>\\n        <span>TreeTable supports both single column and multiple column sorting.</span>\\n    </div>\\n</div>\\n\\n<div class=\\\"content-section implementation\\\">\\n    <h3 class=\\\"first\\\">Single Sort</h3>\\n    <p-treeTable [value]=\\\"files1\\\" [columns]=\\\"cols\\\">\\n        <ng-template pTemplate=\\\"header\\\" let-columns>\\n            <tr>\\n                <th *ngFor=\\\"let col of columns\\\" [ttSortableColumn]=\\\"col.field\\\">\\n                    {{col.header}}\\n                    <p-treeTableSortIcon [field]=\\\"col.field\\\"></p-treeTableSortIcon>\\n                </th>\\n            </tr>\\n        </ng-template>\\n        <ng-template pTemplate=\\\"body\\\" let-rowNode let-rowData=\\\"rowData\\\" let-columns=\\\"columns\\\">\\n            <tr>\\n                <td *ngFor=\\\"let col of columns; let i = index\\\">\\n                    <p-treeTableToggler [rowNode]=\\\"rowNode\\\" *ngIf=\\\"i == 0\\\"></p-treeTableToggler>\\n                    {{rowData[col.field]}}\\n                </td>\\n            </tr>\\n        </ng-template>\\n    </p-treeTable>\\n\\n    <h3>Multiple Sort</h3>\\n    <p-treeTable [value]=\\\"files2\\\" [columns]=\\\"cols\\\" sortMode=\\\"multiple\\\">\\n        <ng-template pTemplate=\\\"header\\\" let-columns>\\n            <tr>\\n                <th *ngFor=\\\"let col of columns\\\" [ttSortableColumn]=\\\"col.field\\\">\\n                    {{col.header}}\\n                    <p-treeTableSortIcon [field]=\\\"col.field\\\"></p-treeTableSortIcon>\\n                </th>\\n            </tr>\\n        </ng-template>\\n        <ng-template pTemplate=\\\"body\\\" let-rowNode let-rowData=\\\"rowData\\\" let-columns=\\\"columns\\\">\\n            <tr>\\n                <td *ngFor=\\\"let col of columns; let i = index\\\">\\n                    <p-treeTableToggler [rowNode]=\\\"rowNode\\\" *ngIf=\\\"i == 0\\\"></p-treeTableToggler>\\n                    {{rowData[col.field]}}\\n                </td>\\n            </tr>            \\n        </ng-template>\\n    </p-treeTable>\\n</div>\\n\\n<div class=\\\"content-section documentation\\\">\\n    <p-tabView>\\n        <p-tabPanel header=\\\"treetablesortdemo.ts\\\">\\n            <a href=\\\"https://github.com/primefaces/primeng/tree/master/src/app/showcase/components/treetable/treetablesortdemo.ts\\\" class=\\\"btn-viewsource\\\" target=\\\"_blank\\\">\\n                <span>View on GitHub</span>\\n            </a>\\n            <a href=\\\"https://stackblitz.com/edit/primeng-treetablesort-demo\\\" class=\\\"btn-viewsource\\\" style=\\\"margin-left: .5em;\\\" target=\\\"_blank\\\">\\n                <span>Edit in StackBlitz</span>\\n            </a>\\n<pre>\\n<code class=\\\"language-typescript\\\" pCode ngNonBindable>\\nexport class TreeTableSortDemo implements OnInit &#123;\\n\\n    files1: TreeNode[];\\n\\n    files2: TreeNode[];\\n\\n    cols: any[];\\n\\n    constructor(private nodeService: NodeService) &#123; &#125;\\n\\n    ngOnInit() &#123;\\n        this.nodeService.getFilesystem().then(files => this.files1 = files);\\n        this.nodeService.getFilesystem().then(files => &#123;\\n            this.files2 = files;\\n            this.files2.push(&#123;\\n                data: &#123;\\n                    name: 'Documents',\\n                    size: '100kb',\\n                    type: 'Link'\\n                &#125;\\n            &#125;);\\n        &#125;);\\n\\n        this.cols = [\\n            &#123; field: 'name', header: 'Name' &#125;,\\n            &#123; field: 'size', header: 'Size' &#125;,\\n            &#123; field: 'type', header: 'Type' &#125;\\n        ];\\n    &#125;\\n&#125;\\n</code>\\n</pre>   \\n        </p-tabPanel>\\n        <p-tabPanel header=\\\"treetablesortdemo.html\\\">\\n            <a href=\\\"https://github.com/primefaces/primeng/tree/master/src/app/showcase/components/treetable/treetablesortdemo.html\\\" class=\\\"btn-viewsource\\\" target=\\\"_blank\\\">\\n                <span>View on GitHub</span>\\n            </a>\\n            <a href=\\\"https://stackblitz.com/edit/primeng-treetablesort-demo\\\" class=\\\"btn-viewsource\\\" style=\\\"margin-left: .5em;\\\" target=\\\"_blank\\\">\\n                <span>Edit in StackBlitz</span>\\n            </a>\\n<pre>\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\n&lt;h3 class=\\\"first\\\"&gt;Single Sort&lt;/h3&gt;\\n&lt;p-treeTable [value]=\\\"files1\\\" [columns]=\\\"cols\\\"&gt;\\n    &lt;ng-template pTemplate=\\\"header\\\" let-columns&gt;\\n        &lt;tr&gt;\\n            &lt;th *ngFor=\\\"let col of columns\\\" [ttSortableColumn]=\\\"col.field\\\"&gt;\\n                &#123;&#123;col.header&#125;&#125;\\n                &lt;p-treeTableSortIcon [field]=\\\"col.field\\\"&gt;&lt;/p-treeTableSortIcon&gt;\\n            &lt;/th&gt;\\n        &lt;/tr&gt;\\n    &lt;/ng-template&gt;\\n    &lt;ng-template pTemplate=\\\"body\\\" let-rowNode let-rowData=\\\"rowData\\\" let-columns=\\\"columns\\\"&gt;\\n        &lt;tr&gt;\\n            &lt;td *ngFor=\\\"let col of columns; let i = index\\\"&gt;\\n                &lt;p-treeTableToggler [rowNode]=\\\"rowNode\\\" *ngIf=\\\"i == 0\\\"&gt;&lt;/p-treeTableToggler&gt;\\n                &#123;&#123;rowData[col.field]&#125;&#125;\\n            &lt;/td&gt;\\n        &lt;/tr&gt;\\n    &lt;/ng-template&gt;\\n&lt;/p-treeTable&gt;\\n\\n&lt;h3&gt;Multiple Sort&lt;/h3&gt;\\n&lt;p-treeTable [value]=\\\"files2\\\" [columns]=\\\"cols\\\" sortMode=\\\"multiple\\\"&gt;\\n    &lt;ng-template pTemplate=\\\"header\\\" let-columns&gt;\\n        &lt;tr&gt;\\n            &lt;th *ngFor=\\\"let col of columns\\\" [ttSortableColumn]=\\\"col.field\\\"&gt;\\n                &#123;&#123;col.header&#125;&#125;\\n                &lt;p-treeTableSortIcon [field]=\\\"col.field\\\"&gt;&lt;/p-treeTableSortIcon&gt;\\n            &lt;/th&gt;\\n        &lt;/tr&gt;\\n    &lt;/ng-template&gt;\\n    &lt;ng-template pTemplate=\\\"body\\\" let-rowNode let-rowData=\\\"rowData\\\" let-columns=\\\"columns\\\"&gt;\\n        &lt;tr&gt;\\n            &lt;td *ngFor=\\\"let col of columns; let i = index\\\"&gt;\\n                &lt;p-treeTableToggler [rowNode]=\\\"rowNode\\\" *ngIf=\\\"i == 0\\\"&gt;&lt;/p-treeTableToggler&gt;\\n                &#123;&#123;rowData[col.field]&#125;&#125;\\n            &lt;/td&gt;\\n        &lt;/tr&gt;            \\n    &lt;/ng-template&gt;\\n&lt;/p-treeTable&gt;\\n</code>\\n</pre>\\n        </p-tabPanel>\\n        <p-tabPanel header=\\\"StackBlitz\\\">\\n            <ng-template pTemplate=\\\"content\\\">\\n                <iframe src=\\\"https://stackblitz.com/edit/primeng-treetablesort-demo?embed=1\\\" style=\\\"width: 100%; height: 768px; border: none;\\\"></iframe>\\n            </ng-template>\\n        </p-tabPanel>\\n    </p-tabView>\\n</div>\";","export default \"<div class=\\\"content-section introduction\\\">\\n    <div>\\n        <span class=\\\"feature-title\\\">TreeTable <span class=\\\"subitem\\\">Style</span></span>\\n        <span>Certain rows or cell can easily be styled based on conditions. In this example, nodes\\n            whose size is in kilobytes are highlighted at row and cell level.\\n        </span>\\n    </div>\\n</div>\\n\\n<div class=\\\"content-section implementation\\\">\\n    <p-treeTable [value]=\\\"files\\\" [columns]=\\\"cols\\\">\\n        <ng-template pTemplate=\\\"header\\\" let-columns>\\n            <tr>\\n                <th *ngFor=\\\"let col of columns\\\">\\n                    {{col.header}}\\n                </th>\\n            </tr>\\n        </ng-template>\\n        <ng-template pTemplate=\\\"body\\\" let-rowNode let-rowData=\\\"rowData\\\" let-columns=\\\"columns\\\">\\n            <tr [ngClass]=\\\"{'kb-row': rowData.size.endsWith('kb')}\\\">\\n                <td *ngFor=\\\"let col of columns; let i = index\\\" [ngClass]=\\\"{'kb-cell': col.field === 'size' && rowData.size.endsWith('kb')}\\\">\\n                    <p-treeTableToggler [rowNode]=\\\"rowNode\\\" *ngIf=\\\"i == 0\\\"></p-treeTableToggler>\\n                    {{rowData[col.field]}}\\n                </td>\\n            </tr>            \\n        </ng-template>\\n    </p-treeTable>\\n</div>\\n\\n<div class=\\\"content-section documentation\\\">\\n    <p-tabView>\\n        <p-tabPanel header=\\\"treetablestyledemo.ts\\\">\\n            <a href=\\\"https://github.com/primefaces/primeng/tree/master/src/app/showcase/components/treetable/treetablestyledemo.ts\\\" class=\\\"btn-viewsource\\\" target=\\\"_blank\\\">\\n                <span>View on GitHub</span>\\n            </a>\\n            <a href=\\\"https://stackblitz.com/edit/primeng-treetablestyle-demo\\\" class=\\\"btn-viewsource\\\" style=\\\"margin-left: .5em;\\\" target=\\\"_blank\\\">\\n                <span>Edit in StackBlitz</span>\\n            </a>\\n<pre>\\n<code class=\\\"language-typescript\\\" pCode ngNonBindable>\\n@Component(&#123;\\n    templateUrl: './treetablestyledemo.html',\\n    styles: [`\\n        .kb-row &#123;\\n            background-color: #1CA979 !important;\\n            color: #ffffff !important;\\n        &#125;\\n\\n        :host ::ng-deep .kb-row .ui-treetable-toggler &#123;\\n            color: #ffffff !important;\\n        &#125;\\n\\n        .kb-cell &#123;\\n            background-color: #2CA8B1 !important;\\n            color: #ffffff !important;\\n        &#125;\\n    `]\\n&#125;)\\nexport class TreeTableStyleDemo &#123;\\n\\n    files: TreeNode[];\\n\\n    cols: any[];\\n\\n    constructor(private nodeService: NodeService) &#123; &#125;\\n\\n    ngOnInit() &#123;\\n        this.nodeService.getFilesystem().then(files => this.files = files);\\n\\n        this.cols = [\\n            &#123; field: 'name', header: 'Name' &#125;,\\n            &#123; field: 'size', header: 'Size' &#125;,\\n            &#123; field: 'type', header: 'Type' &#125;\\n        ];\\n    &#125;\\n&#125;\\n</code>\\n</pre>   \\n        </p-tabPanel>\\n\\n        <p-tabPanel header=\\\"treetablestyledemo.html\\\">\\n            <a href=\\\"https://github.com/primefaces/primeng/tree/master/src/app/showcase/components/treetable/treetablestyledemo.html\\\" class=\\\"btn-viewsource\\\" target=\\\"_blank\\\">\\n                <span>View on GitHub</span>\\n            </a>\\n            <a href=\\\"https://stackblitz.com/edit/primeng-treetablestyle-demo\\\" class=\\\"btn-viewsource\\\" style=\\\"margin-left: .5em;\\\" target=\\\"_blank\\\">\\n                <span>Edit in StackBlitz</span>\\n            </a>\\n<pre>\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\n&lt;p-treeTable [value]=\\\"files\\\" [columns]=\\\"cols\\\"&gt;\\n    &lt;ng-template pTemplate=\\\"header\\\" let-columns&gt;\\n        &lt;tr&gt;\\n            &lt;th *ngFor=\\\"let col of columns\\\"&gt;\\n                &#123;&#123;col.header&#125;&#125;\\n            &lt;/th&gt;\\n        &lt;/tr&gt;\\n    &lt;/ng-template&gt;\\n    &lt;ng-template pTemplate=\\\"body\\\" let-rowNode let-rowData=\\\"rowData\\\" let-columns=\\\"columns\\\"&gt;\\n        &lt;tr [ngClass]=\\\"&#123;'kb-row': rowData.size.endsWith('kb')&#125;\\\"&gt;\\n            &lt;td *ngFor=\\\"let col of columns; let i = index\\\" [ngClass]=\\\"&#123;'kb-cell': col.field === 'size' && rowData.size.endsWith('kb')&#125;\\\"&gt;\\n                &lt;p-treeTableToggler [rowNode]=\\\"rowNode\\\" *ngIf=\\\"i == 0\\\"&gt;&lt;/p-treeTableToggler&gt;\\n                &#123;&#123;rowData[col.field]&#125;&#125;\\n            &lt;/td&gt;\\n        &lt;/tr&gt;            \\n    &lt;/ng-template&gt;\\n&lt;/p-treeTable&gt;\\n</code>\\n</pre>\\n        </p-tabPanel>\\n        <p-tabPanel header=\\\"StackBlitz\\\">\\n            <ng-template pTemplate=\\\"content\\\">\\n                <iframe src=\\\"https://stackblitz.com/edit/primeng-treetablestyle-demo?embed=1\\\" style=\\\"width: 100%; height: 768px; border: none;\\\"></iframe>\\n            </ng-template>\\n        </p-tabPanel>\\n    </p-tabView>\\n</div>\";","import { Component, OnInit } from '@angular/core';\nimport { TreeNode } from 'primeng/api';\n\n@Component({\n    templateUrl: './treetablecolgroupdemo.html'\n})\nexport class TreeTableColGroupDemo implements OnInit {\n\n    sales: TreeNode[];\n\n    cols: any[];\n\n    ngOnInit() {\n        this.sales = [\n            {\n                data: { brand: 'Bliss', lastYearSale: '51%', thisYearSale: '40%', lastYearProfit: '$54,406.00', thisYearProfit: '$43,342'},\n                expanded: true,\n                children: [\n                    {\n                        data: { brand: 'Product A', lastYearSale: '25%', thisYearSale: '20%', lastYearProfit: '$34,406.00', thisYearProfit: '$23,342' },\n                        expanded: true,\n                        children: [\n                            {\n                                data: { brand: 'Product A-1', lastYearSale: '20%', thisYearSale: '10%', lastYearProfit: '$24,406.00', thisYearProfit: '$13,342' }, \n                            },\n                            {\n                                data: { brand: 'Product A-2', lastYearSale: '5%', thisYearSale: '10%', lastYearProfit: '$10,000.00', thisYearProfit: '$10,000' }, \n                            }\n                        ]\n                    },\n                    {\n                        data: { brand: 'Product B', lastYearSale: '26%', thisYearSale: '20%', lastYearProfit: '$24,000.00', thisYearProfit: '$23,000' }, \n                    }\n                ]\n            },\n            {\n                data: { brand: 'Fate', lastYearSale: '83%', thisYearSale: '96%', lastYearProfit: '$423,132', thisYearProfit: '$312,122' },\n                children: [\n                    {\n                        data: { brand: 'Product X', lastYearSale: '50%', thisYearSale: '40%', lastYearProfit: '$223,132', thisYearProfit: '$156,061' }, \n                    },\n                    {\n                        data: { brand: 'Product Y', lastYearSale: '33%', thisYearSale: '56%', lastYearProfit: '$200,000', thisYearProfit: '$156,061' }, \n                    }\n                ]\n            },\n            {\n                data: { brand: 'Ruby', lastYearSale: '38%', thisYearSale: '5%', lastYearProfit: '$12,321', thisYearProfit: '$8,500' },\n                children: [\n                    {\n                        data: { brand: 'Product M', lastYearSale: '18%', thisYearSale: '2%', lastYearProfit: '$10,300', thisYearProfit: '$5,500' }, \n                    },\n                    {\n                        data: { brand: 'Product N', lastYearSale: '20%', thisYearSale: '3%', lastYearProfit: '$2,021', thisYearProfit: '$3,000' }, \n                    }\n                ]\n            },\n            {\n                data: { brand: 'Sky', lastYearSale: '49%', thisYearSale: '22%', lastYearProfit: '$745,232', thisYearProfit: '$650,323' },\n                children: [\n                    {\n                        data: { brand: 'Product P', lastYearSale: '20%', thisYearSale: '16%', lastYearProfit: '$345,232', thisYearProfit: '$350,000' }, \n                    },\n                    {\n                        data: { brand: 'Product R', lastYearSale: '29%', thisYearSale: '6%', lastYearProfit: '$400,009', thisYearProfit: '$300,323' }, \n                    }\n                ]\n            },\n            {\n                data: { brand: 'Comfort', lastYearSale: '17%', thisYearSale: '79%', lastYearProfit: '$643,242', thisYearProfit: '500,332' },\n                children: [\n                    {\n                        data: { brand: 'Product S', lastYearSale: '10%', thisYearSale: '40%', lastYearProfit: '$243,242', thisYearProfit: '$100,000' }, \n                    },\n                    {\n                        data: { brand: 'Product T', lastYearSale: '7%', thisYearSale: '39%', lastYearProfit: '$400,00', thisYearProfit: '$400,332' }, \n                    }\n                ]\n            },\n            {\n                data: { brand: 'Merit', lastYearSale: '52%', thisYearSale: ' 65%', lastYearProfit: '$421,132', thisYearProfit: '$150,005' },\n                children: [\n                    {\n                        data: { brand: 'Product L', lastYearSale: '20%', thisYearSale: '40%', lastYearProfit: '$121,132', thisYearProfit: '$100,000' }, \n                    },\n                    {\n                        data: { brand: 'Product G', lastYearSale: '32%', thisYearSale: '25%', lastYearProfit: '$300,000', thisYearProfit: '$50,005' }, \n                    }\n                ]\n            },\n            {\n                data: { brand: 'Violet', lastYearSale: '82%', thisYearSale: '12%', lastYearProfit: '$131,211', thisYearProfit: '$100,214' },\n                children: [\n                    {\n                        data: { brand: 'Product SH1', lastYearSale: '30%', thisYearSale: '6%', lastYearProfit: '$101,211', thisYearProfit: '$30,214' }, \n                    },\n                    {\n                        data: { brand: 'Product SH2', lastYearSale: '52%', thisYearSale: '6%', lastYearProfit: '$30,000', thisYearProfit: '$70,000' }, \n                    }\n                ]\n            },\n            {\n                data: { brand: 'Dulce', lastYearSale: '44%', thisYearSale: '45%', lastYearProfit: '$66,442', thisYearProfit: '$53,322' },\n                children: [\n                    {\n                        data: { brand: 'Product PN1', lastYearSale: '22%', thisYearSale: '25%', lastYearProfit: '$33,221', thisYearProfit: '$20,000' }, \n                    },\n                    {\n                        data: { brand: 'Product PN2', lastYearSale: '22%', thisYearSale: '25%', lastYearProfit: '$33,221', thisYearProfit: '$33,322' }, \n                    }\n                ]\n            },\n            {\n                data: { brand: 'Solace', lastYearSale: '90%', thisYearSale: '56%', lastYearProfit: '$765,442', thisYearProfit: '$296,232' },\n                children: [\n                    {\n                        data: { brand: 'Product HT1', lastYearSale: '60%', thisYearSale: '36%', lastYearProfit: '$465,000', thisYearProfit: '$150,653' }, \n                    },\n                    {\n                        data: { brand: 'Product HT2', lastYearSale: '30%', thisYearSale: '20%', lastYearProfit: '$300,442', thisYearProfit: '$145,579' }, \n                    }\n                ]\n            },\n            {\n                data:  { brand: 'Essence', lastYearSale: '75%', thisYearSale: '54%', lastYearProfit: '$21,212', thisYearProfit: '$12,533' },\n                children: [\n                    {\n                        data: { brand: 'Product TS1', lastYearSale: '50%', thisYearSale: '34%', lastYearProfit: '$11,000', thisYearProfit: '$8,562' }, \n                    },\n                    {\n                        data: { brand: 'Product TS2', lastYearSale: '25%', thisYearSale: '20%', lastYearProfit: '$11,212', thisYearProfit: '$3,971' }, \n                    }\n                ]\n            }\n        ];\n    };\n}","import { Component } from '@angular/core';\nimport { TreeNode } from 'primeng/api';\nimport { NodeService } from '../../service/nodeservice';\n\n@Component({\n    templateUrl: './treetablecolresizedemo.html'\n})\nexport class TreeTableColResizeDemo {\n\n    files1: TreeNode[];\n\n    files2: TreeNode[];\n\n    files3: TreeNode[];\n\n    files4: TreeNode[];\n\n    cols: any[];\n\n    constructor(private nodeService: NodeService) { }\n\n    ngOnInit() {\n        this.nodeService.getFilesystem().then(files => this.files1 = files);\n        this.nodeService.getFilesystem().then(files => this.files2 = files);\n        this.nodeService.getFilesystem().then(files => this.files3 = files);\n        this.nodeService.getFilesystem().then(files => this.files4 = files);\n\n        this.cols = [\n            { field: 'name', header: 'Name', width: '50%' },\n            { field: 'size', header: 'Size', width: '30%' },\n            { field: 'type', header: 'Type', width: '20%' }\n        ];\n    }\n}","import { Component } from '@angular/core';\nimport { TreeNode } from 'primeng/api';\nimport { NodeService } from '../../service/nodeservice';\n\n@Component({\n    templateUrl: './treetablecoltoggledemo.html'\n})\nexport class TreeTableColToggleDemo {\n    \n    files: TreeNode[];\n\n    cols: any[];\n\n    selectedColumns: any[];\n\n    constructor(private nodeService: NodeService) { }\n\n    ngOnInit() {\n        this.nodeService.getFilesystem().then(files => this.files = files);\n\n        this.cols = [\n            { field: 'name', header: 'Name' },\n            { field: 'size', header: 'Size' },\n            { field: 'type', header: 'Type' }\n        ];\n\n        this.selectedColumns = this.cols;\n    }\n}","import { Component } from '@angular/core';\nimport { TreeNode, MenuItem } from 'primeng/api';\nimport { NodeService } from '../../service/nodeservice';\nimport { MessageService } from 'primeng/api';\n\n@Component({\n    templateUrl: './treetablecontextmenudemo.html',\n    providers: [MessageService]\n})\nexport class TreeTableContextMenuDemo {\n\n    files: TreeNode[];\n\n    selectedNode: TreeNode;\n\n    cols: any[];\n\n    items: MenuItem[];\n\n    constructor(private nodeService: NodeService, private messageService: MessageService) { }\n\n    ngOnInit() {\n        this.nodeService.getFilesystem().then(files => this.files = files);\n\n        this.cols = [\n            { field: 'name', header: 'Name' },\n            { field: 'size', header: 'Size' },\n            { field: 'type', header: 'Type' }\n        ];\n\n        this.items = [\n            { label: 'View', icon: 'pi pi-search', command: (event) => this.viewFile(this.selectedNode) },\n            { label: 'Toggle', icon: 'pi pi-sort', command: (event) => this.toggleFile(this.selectedNode) }\n        ];\n    }\n\n    viewFile(node) {\n        this.messageService.add({ severity: 'info', summary: 'File Selected', detail: node.data.name + ' - ' + node.data.size });\n    }\n\n    toggleFile(node) {\n        node.expanded = !node.expanded;\n        this.files = [...this.files];\n    }\n\n}\n","import { NgModule}     from '@angular/core';\nimport { RouterModule } from '@angular/router'\nimport { TreeTableDemo } from './treetabledemo';\nimport { TreeTablePageDemo } from './treetablepagedemo';\nimport { TreeTableSortDemo } from './treetablesortdemo';\nimport { TreeTableSelectionDemo } from './treetableselectiondemo';\nimport { TreeTableSectionsDemo } from './treetablesectionsdemo';\nimport { TreeTableStyleDemo } from './treetablestyledemo';\nimport { TreeTableLazyDemo } from './treetablelazydemo';\nimport { TreeTableColGroupDemo } from './treetablecolgroupdemo';\nimport { TreeTableScrollDemo } from './treetablescrolldemo';\nimport { TreeTableFlexScrollDemo } from './treetableflexscrolldemo';\nimport { TreeTableColToggleDemo } from './treetablecoltoggledemo';\nimport { TreeTableResponsiveDemo } from './treetableresponsivedemo';\nimport { TreeTableContextMenuDemo } from './treetablecontextmenudemo';\nimport { TreeTableColResizeDemo } from './treetablecolresizedemo';\nimport { TreeTableReorderDemo } from './treetablereorderdemo';\nimport { TreeTableEditDemo } from './treetableeditdemo';\nimport { TreeTableFilterDemo } from './treetablefilterdemo';\n\n@NgModule({\n\timports: [\n\t\tRouterModule.forChild([\n            {path:'',component: TreeTableDemo},\n            { path: 'page', component: TreeTablePageDemo },\n\t\t\t{ path: 'sort', component: TreeTableSortDemo },\n\t\t\t{ path: 'selection', component: TreeTableSelectionDemo },\n\t\t\t{ path: 'sections', component: TreeTableSectionsDemo },\n\t\t\t{ path: 'style', component: TreeTableStyleDemo },\n\t\t\t{ path: 'lazy', component: TreeTableLazyDemo },\n\t\t\t{ path: 'colgroup', component: TreeTableColGroupDemo },\n            { path: 'scroll', component: TreeTableScrollDemo },\n            { path: 'flexscroll', component: TreeTableFlexScrollDemo },\n\t\t\t{ path: 'coltoggle', component: TreeTableColToggleDemo },\n\t\t\t{ path: 'responsive', component: TreeTableResponsiveDemo },\n\t\t\t{ path: 'contextmenu', component: TreeTableContextMenuDemo },\n\t\t\t{ path: 'colresize', component: TreeTableColResizeDemo },\n\t\t\t{ path: 'reorder', component: TreeTableReorderDemo },\n\t\t\t{ path: 'edit', component: TreeTableEditDemo },\n\t\t\t{ path: 'filter', component: TreeTableFilterDemo }\n\t\t])\n\t],\n\texports: [\n\t\tRouterModule\n\t]\n})\nexport class TreeTableDemoRoutingModule {}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { TreeTableDemo } from './treetabledemo';\nimport { TreeTableDemoRoutingModule } from './treetabledemo-routing.module';\nimport { TreeTableModule } from 'primeng/treetable';\nimport { TreeTablePageDemo } from './treetablepagedemo';\nimport { TreeTableSortDemo } from './treetablesortdemo';\nimport { TreeTableSelectionDemo } from './treetableselectiondemo';\nimport { TreeTableSectionsDemo } from './treetablesectionsdemo';\nimport { TreeTableStyleDemo } from './treetablestyledemo';\nimport { TreeTableLazyDemo } from './treetablelazydemo';\nimport { TreeTableColGroupDemo } from './treetablecolgroupdemo';\nimport { TreeTableScrollDemo } from './treetablescrolldemo';\nimport { TreeTableFlexScrollDemo } from './treetableflexscrolldemo';\nimport { TreeTableColToggleDemo } from './treetablecoltoggledemo';\nimport { TreeTableResponsiveDemo } from './treetableresponsivedemo';\nimport { TreeTableContextMenuDemo } from './treetablecontextmenudemo';\nimport { TreeTableColResizeDemo } from './treetablecolresizedemo';\nimport { TreeTableReorderDemo } from './treetablereorderdemo';\nimport { TreeTableEditDemo } from './treetableeditdemo';\nimport { TreeTableFilterDemo } from './treetablefilterdemo';\nimport { ToastModule } from 'primeng/toast';\nimport { DialogModule } from 'primeng/dialog';\nimport { ButtonModule } from 'primeng/button';\nimport { TabViewModule } from 'primeng/tabview';\nimport { MultiSelectModule } from 'primeng/multiselect';\nimport { InputTextModule } from 'primeng/inputtext';\nimport { ContextMenuModule } from 'primeng/contextmenu';\nimport { CodeHighlighterModule } from 'primeng/codehighlighter';\n\n@NgModule({\n\timports: [\n\t\tCommonModule,\n        FormsModule,\n\t\tTreeTableDemoRoutingModule,\n        TreeTableModule,\n        ToastModule,\n        DialogModule,\n        ButtonModule,\n        TabViewModule,\n        MultiSelectModule,\n        InputTextModule,\n        ContextMenuModule,\n        CodeHighlighterModule\n\t],\n\tdeclarations: [\n        TreeTableDemo,\n        TreeTablePageDemo,\n        TreeTableSortDemo,\n        TreeTableSelectionDemo,\n        TreeTableSectionsDemo,\n        TreeTableStyleDemo,\n        TreeTableLazyDemo,\n        TreeTableColGroupDemo,\n        TreeTableScrollDemo,\n        TreeTableFlexScrollDemo,\n        TreeTableColToggleDemo,\n        TreeTableResponsiveDemo,\n        TreeTableContextMenuDemo,\n        TreeTableColResizeDemo,\n        TreeTableReorderDemo,\n        TreeTableEditDemo,\n        TreeTableFilterDemo\n\t]\n})\nexport class TreeTableDemoModule {}\n","import {Component,OnInit} from '@angular/core';\nimport {NodeService} from '../../service/nodeservice';\nimport {TreeNode} from 'primeng/api';\n\n@Component({\n    templateUrl: './treetabledemo.html'\n})\nexport class TreeTableDemo implements OnInit {\n\n    files1: TreeNode[];\n\n    files2: TreeNode[];\n\n    cols: any[];\n\n    constructor(private nodeService: NodeService) { }\n\n    ngOnInit() {\n        this.nodeService.getFilesystem().then(files => this.files1 = files);\n        this.nodeService.getFilesystem().then(files => this.files2 = files);\n\n        this.cols = [\n            { field: 'name', header: 'Name' },\n            { field: 'size', header: 'Size' },\n            { field: 'type', header: 'Type' }\n        ];\n    }\n}","import { Component } from '@angular/core';\nimport { TreeNode } from 'primeng/api';\nimport { NodeService } from '../../service/nodeservice';\n\n@Component({\n    templateUrl: './treetableeditdemo.html',\n    styles: [`\n        :host ::ng-deep .ui-editing-cell {\n            padding: 0 !important;\n        }\n\n        :host ::ng-deep .ui-toggler-column.ui-editing-cell {\n            padding-left: 0.857em !important;\n        }\n    `]\n})\nexport class TreeTableEditDemo {\n    \n    files: TreeNode[];\n\n    cols: any[];\n\n    constructor(private nodeService: NodeService) { }\n\n    ngOnInit() {\n        this.nodeService.getFilesystem().then(files => this.files = files);\n\n        this.cols = [\n            { field: 'name', header: 'Name' },\n            { field: 'size', header: 'Size' },\n            { field: 'type', header: 'Type' }\n        ];\n    }\n}","import {Component,OnInit} from '@angular/core';\nimport {NodeService} from '../../service/nodeservice';\nimport {TreeNode} from 'primeng/api';\n\n@Component({\n    templateUrl: './treetablefilterdemo.html'\n})\nexport class TreeTableFilterDemo implements OnInit {\n\n    files: TreeNode[];\n\n    cols: any[];\n\n    constructor(private nodeService: NodeService) { }\n\n    ngOnInit() {\n        this.nodeService.getFilesystem().then(files => this.files = files);\n\n        this.cols = [\n            { field: 'name', header: 'Name' },\n            { field: 'size', header: 'Size' },\n            { field: 'type', header: 'Type' }\n        ];\n    }\n}","import { Component } from '@angular/core';\nimport { TreeNode } from 'primeng/api';\n\n@Component({\n    templateUrl: './treetableflexscrolldemo.html'\n})\nexport class TreeTableFlexScrollDemo {\n    \n    virtualFiles: TreeNode[];\n\n    cols: any[];\n\n    ngOnInit() {\n        this.virtualFiles = Array.from({length: 1000}).map((_,i) => this.createNode(i, 10));\n\n        this.cols = [\n            { field: 'name', header: 'Name' },\n            { field: 'size', header: 'Size' },\n            { field: 'type', header: 'Type' }\n        ];\n    }\n\n    createNode(i: number, children: number): TreeNode {\n        let node: TreeNode = {\n            data: {name: 'Node ' + i, type: 'virtual node', size: Math.ceil(Math.random() * 10000) + 'kb'},\n            children: Array.from({length: children}).map((_,j) => {\n                return { \n                    data: {name: 'Node ' + i + '.' + j, type: 'virtual child node', size: Math.ceil(Math.random() * 10000) + 'kb'}\n                }\n            })\n        };\n\n        return node;\n    }\n}","import { Component } from '@angular/core';\nimport { TreeNode } from 'primeng/api';\nimport { NodeService } from '../../service/nodeservice';\n\n@Component({\n    templateUrl: './treetablelazydemo.html'\n})\nexport class TreeTableLazyDemo {\n    \n    files: TreeNode[];\n\n    cols: any[];\n\n    totalRecords: number;\n\n    loading: boolean;\n\n    constructor(private nodeService: NodeService) { }\n\n    ngOnInit() {\n        this.cols = [\n            { field: 'name', header: 'Name' },\n            { field: 'size', header: 'Size' },\n            { field: 'type', header: 'Type' }\n        ];\n\n        //in a production application, retrieve the logical number of rows from a remote datasource\n        this.totalRecords = 1000;\n\n        this.loading = true;\n    }\n\n    loadNodes(event) {\n        this.loading = true;\n\n        //in a production application, make a remote request to load data using state metadata from event\n        //event.first = First row offset\n        //event.rows = Number of rows per page\n        //event.sortField = Field name to sort with\n        //event.sortOrder = Sort order as number, 1 for asc and -1 for dec\n        //filters: FilterMetadata object having field as key and filter value, filter matchMode as value\n\n        //imitate db connection over a network\n        setTimeout(() => {\n            this.loading = false;\n            this.files = [];\n\n            for(let i = 0; i < event.rows; i++) {\n                let node = {\n                    data: {  \n                        name: 'Item ' + (event.first + i),\n                        size: Math.floor(Math.random() * 1000) + 1 + 'kb',\n                        type: 'Type ' + (event.first + i)\n                    },\n                    leaf: false\n                };\n\n                this.files.push(node);\n            }\n        }, 1000);\n    }\n\n    onNodeExpand(event) {\n        this.loading = true;\n\n        setTimeout(() => {\n            this.loading = false;\n            const node = event.node;\n\n            node.children = [\n                {\n                    data: {  \n                        name: node.data.name + ' - 0',\n                        size: Math.floor(Math.random() * 1000) + 1 + 'kb',\n                        type: 'File'\n                    },\n                },\n                {\n                    data: {  \n                        name: node.data.name + ' - 1',\n                        size: Math.floor(Math.random() * 1000) + 1 + 'kb',\n                        type: 'File'\n                    }\n                }\n            ];\n\n            this.files = [...this.files];\n        }, 250);\n        \n    }\n}","import { Component, OnInit } from '@angular/core';\nimport { NodeService } from '../../service/nodeservice';\nimport { TreeNode } from 'primeng/api';\n\n@Component({\n    templateUrl: './treetablepagedemo.html'\n})\nexport class TreeTablePageDemo implements OnInit {\n\n    files: TreeNode[];\n\n    cols: any[];\n\n    constructor(private nodeService: NodeService) { }\n\n    ngOnInit() {\n        this.files = [];\n        for(let i = 0; i < 50; i++) {\n            let node = {\n                data:{  \n                    name: 'Item ' + i,\n                    size: Math.floor(Math.random() * 1000) + 1 + 'kb',\n                    type: 'Type ' + i\n                },\n                children: [\n                    {\n                        data: {  \n                            name: 'Item ' + i + ' - 0',\n                            size: Math.floor(Math.random() * 1000) + 1 + 'kb',\n                            type: 'Type ' + i\n                        }\n                    }\n                ]\n            };\n\n            this.files.push(node);\n        }\n\n        this.cols = [\n            { field: 'name', header: 'Name' },\n            { field: 'size', header: 'Size' },\n            { field: 'type', header: 'Type' }\n        ];\n    }\n}","import { Component } from '@angular/core';\nimport { TreeNode } from 'primeng/api';\nimport { NodeService } from '../../service/nodeservice';\n\n@Component({\n    templateUrl: './treetablereorderdemo.html'\n})\nexport class TreeTableReorderDemo {\n\n    files: TreeNode[];\n\n    cols: any[];\n\n    constructor(private nodeService: NodeService) { }\n\n    ngOnInit() {\n        this.nodeService.getFilesystem().then(files => this.files = files);\n\n        this.cols = [\n            { field: 'name', header: 'Name' },\n            { field: 'size', header: 'Size' },\n            { field: 'type', header: 'Type' }\n        ];\n    }\n}","import { Component } from '@angular/core';\nimport { TreeNode } from 'primeng/api';\nimport { NodeService } from '../../service/nodeservice';\n\n@Component({\n    templateUrl: './treetableresponsivedemo.html',\n    styles: [`\n        :host ::ng-deep .priority-2, \n        :host ::ng-deep .priority-3,\n        :host ::ng-deep .visibility-sm {\n            display: none;\n        }\n\n        @media screen and (max-width: 39.938em) {\n            :host ::ng-deep .visibility-sm {\n                display: inline;\n            }\n        }\n\n        @media screen and (min-width: 40em) {\n            :host ::ng-deep .priority-2 {\n                display: table-cell;\n            }\n        }\n\n        @media screen and (min-width: 64em) {\n            :host ::ng-deep .priority-3 {\n                display: table-cell;\n            }\n        }\n    `]\n})\nexport class TreeTableResponsiveDemo {\n\n    files: TreeNode[];\n\n    cols: any[];\n\n    constructor(private nodeService: NodeService) { }\n\n    ngOnInit() {\n        this.nodeService.getFilesystem().then(files => this.files = files);\n\n        this.cols = [\n            { field: 'name', header: 'Name' },\n            { field: 'size', header: 'Size' },\n            { field: 'type', header: 'Type' }\n        ];\n    }\n}","import { Component } from '@angular/core';\nimport { TreeNode } from 'primeng/api';\nimport { NodeService } from '../../service/nodeservice';\n\n@Component({\n    templateUrl: './treetablescrolldemo.html'\n})\nexport class TreeTableScrollDemo {\n    \n    files1: TreeNode[];\n\n    files2: TreeNode[];\n\n    files3: TreeNode[];\n\n    files4: TreeNode[];\n\n    files5: TreeNode[];\n\n    virtualFiles: TreeNode[];\n\n    cols: any[];\n\n    frozenCols: any[];\n\n    scrollableCols: any[];\n\n    dialogVisible: boolean;\n\n    constructor(private nodeService: NodeService) { }\n\n    ngOnInit() {\n        this.nodeService.getFilesystem().then(files => this.files1 = files);\n        this.nodeService.getFilesystem().then(files => this.files3 = files);\n        this.nodeService.getFilesystem().then(files => this.files4 = files);\n        this.nodeService.getFilesystem().then(files => this.files5 = files);\n        this.files2 = Array.from({length: 100}).map((_,i) => this.createNode(i, 5));\n        this.virtualFiles = Array.from({length: 1000}).map((_,i) => this.createNode(i, 100));\n\n        this.cols = [\n            { field: 'name', header: 'Name' },\n            { field: 'size', header: 'Size' },\n            { field: 'type', header: 'Type' }\n        ];\n\n        this.scrollableCols = [\n            { field: 'size', header: 'Size' },\n            { field: 'type', header: 'Type' },\n            { field: 'size', header: 'Size' },\n            { field: 'type', header: 'Type' },\n            { field: 'size', header: 'Size' },\n            { field: 'type', header: 'Type' }\n        ];\n\n        this.frozenCols = [\n            { field: 'name', header: 'Name' }\n        ];\n    }\n\n    createNode(i: number, children: number): TreeNode {\n        let node: TreeNode = {\n            data: {name: 'Node ' + i, type: 'virtual node', size: Math.ceil(Math.random() * 10000) + 'kb'},\n            children: Array.from({length: children}).map((_,j) => {\n                return { \n                    data: {name: 'Node ' + i + '.' + j, type: 'virtual child node', size: Math.ceil(Math.random() * 10000) + 'kb'}\n                }\n            })\n        };\n\n        return node;\n    }\n\n    showDialog() {\n        this.dialogVisible = true;\n    }\n}","import {Component,OnInit} from '@angular/core';\nimport {NodeService} from '../../service/nodeservice';\nimport {TreeNode} from 'primeng/api';\n\n@Component({\n    templateUrl: './treetablesectionsdemo.html'\n})\nexport class TreeTableSectionsDemo implements OnInit {\n\n    files: TreeNode[];\n\n    cols: any[];\n\n    constructor(private nodeService: NodeService) { }\n\n    ngOnInit() {\n        this.nodeService.getFilesystem().then(files => this.files = files);\n\n        this.cols = [\n            { field: 'name', header: 'Name' },\n            { field: 'size', header: 'Size' },\n            { field: 'type', header: 'Type' }\n        ];\n    }\n}","import { Component } from '@angular/core';\nimport { TreeNode } from 'primeng/api';\nimport { NodeService } from '../../service/nodeservice';\nimport { MessageService } from 'primeng/api';\n\n@Component({\n    templateUrl: './treetableselectiondemo.html',\n    providers: [MessageService]\n})\nexport class TreeTableSelectionDemo {\n\n    files1: TreeNode[];\n\n    files2: TreeNode[];\n\n    files3: TreeNode[];\n\n    files4: TreeNode[];\n\n    files5: TreeNode[];\n\n    selectedNode1: TreeNode;\n\n    selectedNode2: TreeNode;\n\n    selectedNodes1: TreeNode[];\n\n    selectedNodes2: TreeNode[];\n\n    selectedNodes3: TreeNode[];\n\n    cols: any[];\n\n    constructor(private nodeService: NodeService, private messageService: MessageService) { }\n\n    ngOnInit() {\n        this.nodeService.getFilesystem().then(files => this.files1 = files);\n        this.nodeService.getFilesystem().then(files => this.files2 = files);\n        this.nodeService.getFilesystem().then(files => this.files3 = files);\n        this.nodeService.getFilesystem().then(files => this.files4 = files);\n        this.nodeService.getFilesystem().then(files => this.files5 = files);\n\n        this.cols = [\n            { field: 'name', header: 'Name' },\n            { field: 'size', header: 'Size' },\n            { field: 'type', header: 'Type' }\n        ];\n    }\n\n    nodeSelect(event) {\n        this.messageService.add({severity: 'info', summary: 'Node Selected', detail: event.node.data.name});\n    }\n    \n    nodeUnselect(event) {\n        this.messageService.add({severity: 'info', summary: 'Node Unselected', detail: event.node.data.name});\n    }\n    \n}\n","import {Component,OnInit} from '@angular/core';\nimport {NodeService} from '../../service/nodeservice';\nimport {TreeNode} from 'primeng/api';\n\n@Component({\n    templateUrl: './treetablesortdemo.html'\n})\nexport class TreeTableSortDemo implements OnInit {\n\n    files1: TreeNode[];\n\n    files2: TreeNode[];\n\n    cols: any[];\n\n    constructor(private nodeService: NodeService) { }\n\n    ngOnInit() {\n        this.nodeService.getFilesystem().then(files => this.files1 = files);\n        this.nodeService.getFilesystem().then(files => {\n            this.files2 = files;\n            this.files2.push({\n                data: {\n                    name: 'Documents',\n                    size: '100kb',\n                    type: 'Link'\n                }\n            });\n        });\n\n        this.cols = [\n            { field: 'name', header: 'Name' },\n            { field: 'size', header: 'Size' },\n            { field: 'type', header: 'Type' }\n        ];\n    }\n}","import { Component } from '@angular/core';\nimport {NodeService} from '../../service/nodeservice';\nimport {TreeNode} from 'primeng/api';\n\n@Component({\n    templateUrl: './treetablestyledemo.html',\n    styles: [`\n        .kb-row {\n            background-color: #1CA979 !important;\n            color: #ffffff !important;\n        }\n\n        :host ::ng-deep .kb-row .ui-treetable-toggler {\n            color: #ffffff !important;\n        }\n\n        .kb-cell {\n            background-color: #2CA8B1 !important;\n            color: #ffffff !important;\n        }\n    `]\n})\nexport class TreeTableStyleDemo {\n\n    files: TreeNode[];\n\n    cols: any[];\n\n    constructor(private nodeService: NodeService) { }\n\n    ngOnInit() {\n        this.nodeService.getFilesystem().then(files => this.files = files);\n\n        this.cols = [\n            { field: 'name', header: 'Name' },\n            { field: 'size', header: 'Size' },\n            { field: 'type', header: 'Type' }\n        ];\n    }\n}"]}