{"version":3,"sources":["webpack:///node_modules/@angular/cdk/fesm2015/bidi.js","webpack:///node_modules/@angular/cdk/fesm2015/coercion.js","webpack:///node_modules/@angular/cdk/fesm2015/collections.js","webpack:///node_modules/@angular/cdk/fesm2015/platform.js","webpack:///node_modules/@angular/cdk/fesm2015/scrolling.js"],"names":["DIR_DOCUMENT","providedIn","factory","DIR_DOCUMENT_FACTORY","Directionality","_document","value","change","bodyDir","body","dir","htmlDir","documentElement","ngOnDestroy","complete","decorators","type","args","ctorParameters","undefined","Éµprov","Directionality_Factory","token","Dir","_dir","_isInitialized","old","normalizedValue","toLowerCase","_rawDir","emit","ngAfterContentInit","selector","providers","provide","useExisting","host","exportAs","propDecorators","BidiModule","exports","declarations","coerceBooleanProperty","coerceNumberProperty","fallbackValue","_isNumberValue","Number","isNaN","parseFloat","coerceArray","Array","isArray","coerceCssPixelValue","coerceElement","elementOrRef","nativeElement","DataSource","isDataSource","connect","ArrayDataSource","_data","disconnect","CollectionViewer","SelectionModel","_multiple","initiallySelectedValues","_emitChanges","_selection","Set","_deselectedToEmit","_selectedToEmit","changed","length","forEach","_markSelected","_selected","from","values","select","_verifyValueAssignment","_emitChangeEvent","deselect","_unmarkSelected","toggle","isSelected","clear","_unmarkAll","has","isEmpty","size","hasValue","sort","predicate","selected","isMultipleSelection","next","source","added","removed","add","push","getMultipleValuesInSingleSelectionError","SelectionChange","Error","UniqueSelectionDispatcher","_listeners","notify","id","name","listener","listen","filter","registered","UniqueSelectionDispatcher_Factory","TreeDataNodeFlattener","hasV8BreakIterator","Intl","v8BreakIterator","_a","Platform","_platformId","isBrowser","document","EDGE","test","navigator","userAgent","TRIDENT","BLINK","window","chrome","CSS","WEBKIT","IOS","FIREFOX","ANDROID","SAFARI","Object","Platform_Factory","PlatformModule","supportedInputTypes","candidateInputTypes","getSupportedInputTypes","featureTestInput","createElement","setAttribute","supportsPassiveEvents","supportsPassiveEventListeners","addEventListener","defineProperty","get","normalizePassiveListenerOptions","options","capture","RtlScrollAxisType","NORMAL","NEGATED","INVERTED","rtlScrollAxisType","supportsScrollBehavior","style","getRtlScrollAxisType","scrollContainer","containerStyle","height","width","overflow","visibility","pointerEvents","position","content","contentStyle","appendChild","scrollLeft","parentNode","removeChild","shadowDomIsSupported","_supportsShadowDom","head","createShadowRoot","attachShadow","_getShadowRoot","element","rootNode","getRootNode","ShadowRoot","VIRTUAL_SCROLL_STRATEGY","VirtualScrollStrategy","FixedSizeVirtualScrollStrategy","itemSize","minBufferPx","maxBufferPx","_scrolledIndexChange","scrolledIndexChange","pipe","_viewport","_itemSize","_minBufferPx","_maxBufferPx","attach","viewport","_updateTotalContentSize","_updateRenderedRange","detach","updateItemAndBufferSize","onContentScrolled","onDataLengthChanged","onContentRendered","onRenderedOffsetChanged","scrollToIndex","index","behavior","scrollToOffset","setTotalContentSize","getDataLength","scrollOffset","measureScrollOffset","firstVisibleIndex","renderedRange","getRenderedRange","newRange","start","end","viewportSize","getViewportSize","dataLength","startBuffer","expandStart","Math","ceil","max","min","endBuffer","expandEnd","floor","setRenderedRange","setRenderedContentOffset","_fixedSizeVirtualScrollStrategyFactory","fixedSizeDir","_scrollStrategy","CdkFixedSizeVirtualScroll","ngOnChanges","useFactory","deps","DEFAULT_SCROLL_TIME","ScrollDispatcher","_ngZone","_platform","_scrolled","_globalSubscription","_scrolledCount","scrollContainers","Map","register","scrollable","set","elementScrolled","subscribe","deregister","scrollableReference","unsubscribe","scrolled","auditTimeInMs","observer","_addGlobalListener","subscription","_removeGlobalListener","_","container","ancestorScrolled","elementRef","ancestors","getAncestorScrollContainers","target","indexOf","scrollingContainers","_subscription","_scrollableContainsElement","_getDocument","_getWindow","doc","defaultView","scrollableElement","getElementRef","parentElement","runOutsideAngular","ScrollDispatcher_Factory","CdkScrollable","scrollDispatcher","ngZone","_destroyed","_elementScrolled","ngOnInit","scrollTo","el","isRtl","left","right","bottom","top","scrollHeight","clientHeight","scrollWidth","clientWidth","_applyScrollToOptions","scrollTop","LEFT","RIGHT","DEFAULT_RESIZE_TIME","ViewportScrollPosition","ViewportRuler","_change","_invalidateCache","_updateViewportSize","_viewportSize","output","getViewportRect","scrollPosition","getViewportScrollPosition","documentRect","getBoundingClientRect","scrollY","scrollX","throttleTime","innerWidth","innerHeight","ViewportRuler_Factory","rangesEqual","r1","r2","SCROLL_SCHEDULER","requestAnimationFrame","CdkVirtualScrollViewport","_changeDetectorRef","viewportRuler","_detachedSubject","_renderedRangeSubject","_orientation","Promise","resolve","then","run","renderedRangeStream","asObservable","_totalContentSize","_totalContentWidth","_totalContentHeight","_renderedRange","_dataLength","_renderedContentOffset","_renderedContentOffsetNeedsRewrite","_isChangeDetectionPending","_runAfterChangeDetection","_viewportChanges","EMPTY","checkViewportSize","orientation","_calculateSpacerSize","_measureViewportSize","_markChangeDetectionNeeded","forOf","_forOf","dataStream","data","newLength","_doChangeDetection","range","getOffsetToRenderedContentStart","offset","to","isHorizontal","axis","axisDirection","transform","_renderedContentTransform","measureRenderedContentSize","contentEl","_contentWrapper","offsetWidth","offsetHeight","measureRangeSize","viewportEl","runAfter","markForCheck","runAfterChangeDetection","fn","template","encapsulation","None","changeDetection","OnPush","styles","getSize","node","rect","CdkVirtualForOf","_viewContainerRef","_template","_differs","viewChange","_dataSourceChanges","cdkVirtualForTemplateCacheSize","prev","cur","_changeDataSource","_differ","_templateCache","_needsUpdate","_onRenderedDataChange","_cdkVirtualForOf","prototype","slice","call","_cdkVirtualForTrackBy","item","renderedStartIndex","rangeLen","totalSize","i","view","j","rootNodes","ngDoCheck","changes","diff","_renderedItems","_updateContext","_applyChanges","destroy","find","create","cdkVirtualForTrackBy","oldDs","newDs","count","context","_updateComputedContextProperties","detectChanges","forEachOperation","record","adjustedPreviousIndex","currentIndex","previousIndex","_insertViewForNewItem","$implicit","_cacheView","_detachView","move","forEachIdentityChange","remove","_insertViewFromCache","_createEmbeddedViewAt","first","last","even","odd","createEmbeddedView","cdkVirtualForOf","cachedView","pop","insert","cdkVirtualForTemplate","CdkScrollableModule","ScrollingModule","imports"],"mappings":"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","file":"default~components-dataview-dataviewdemo-module~components-defer-deferdemo-module~components-dragdro~4b684f8f-es5.js","sourcesContent":["import { InjectionToken, inject, EventEmitter, Injectable, Optional, Inject, ÉµÉµdefineInjectable, ÉµÉµinject, Directive, Output, Input, NgModule } from '@angular/core';\nimport { DOCUMENT } from '@angular/common';\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/bidi/dir-document-token.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Injection token used to inject the document into Directionality.\n * This is used so that the value can be faked in tests.\n *\n * We can't use the real document in tests because changing the real `dir` causes geometry-based\n * tests in Safari to fail.\n *\n * We also can't re-provide the DOCUMENT token from platform-brower because the unit tests\n * themselves use things like `querySelector` in test code.\n *\n * This token is defined in a separate file from Directionality as a workaround for\n * https://github.com/angular/angular/issues/22559\n *\n * \\@docs-private\n * @type {?}\n */\nconst DIR_DOCUMENT = new InjectionToken('cdk-dir-doc', {\n    providedIn: 'root',\n    factory: DIR_DOCUMENT_FACTORY,\n});\n/**\n * \\@docs-private\n * @return {?}\n */\nfunction DIR_DOCUMENT_FACTORY() {\n    return inject(DOCUMENT);\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/bidi/directionality.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * The directionality (LTR / RTL) context for the application (or a subtree of it).\n * Exposes the current direction and a stream of direction changes.\n */\nclass Directionality {\n    /**\n     * @param {?=} _document\n     */\n    constructor(_document) {\n        /**\n         * The current 'ltr' or 'rtl' value.\n         */\n        this.value = 'ltr';\n        /**\n         * Stream that emits whenever the 'ltr' / 'rtl' state changes.\n         */\n        this.change = new EventEmitter();\n        if (_document) {\n            // TODO: handle 'auto' value -\n            // We still need to account for dir=\"auto\".\n            // It looks like HTMLElemenet.dir is also \"auto\" when that's set to the attribute,\n            // but getComputedStyle return either \"ltr\" or \"rtl\". avoiding getComputedStyle for now\n            /** @type {?} */\n            const bodyDir = _document.body ? _document.body.dir : null;\n            /** @type {?} */\n            const htmlDir = _document.documentElement ? _document.documentElement.dir : null;\n            /** @type {?} */\n            const value = bodyDir || htmlDir;\n            this.value = (value === 'ltr' || value === 'rtl') ? value : 'ltr';\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this.change.complete();\n    }\n}\nDirectionality.decorators = [\n    { type: Injectable, args: [{ providedIn: 'root' },] }\n];\n/** @nocollapse */\nDirectionality.ctorParameters = () => [\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DIR_DOCUMENT,] }] }\n];\n/** @nocollapse */ Directionality.Éµprov = ÉµÉµdefineInjectable({ factory: function Directionality_Factory() { return new Directionality(ÉµÉµinject(DIR_DOCUMENT, 8)); }, token: Directionality, providedIn: \"root\" });\nif (false) {\n    /**\n     * The current 'ltr' or 'rtl' value.\n     * @type {?}\n     */\n    Directionality.prototype.value;\n    /**\n     * Stream that emits whenever the 'ltr' / 'rtl' state changes.\n     * @type {?}\n     */\n    Directionality.prototype.change;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/bidi/dir.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Directive to listen for changes of direction of part of the DOM.\n *\n * Provides itself as Directionality such that descendant directives only need to ever inject\n * Directionality to get the closest direction.\n */\nclass Dir {\n    constructor() {\n        /**\n         * Normalized direction that accounts for invalid/unsupported values.\n         */\n        this._dir = 'ltr';\n        /**\n         * Whether the `value` has been set to its initial value.\n         */\n        this._isInitialized = false;\n        /**\n         * Event emitted when the direction changes.\n         */\n        this.change = new EventEmitter();\n    }\n    /**\n     * \\@docs-private\n     * @return {?}\n     */\n    get dir() { return this._dir; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set dir(value) {\n        /** @type {?} */\n        const old = this._dir;\n        /** @type {?} */\n        const normalizedValue = value ? value.toLowerCase() : value;\n        this._rawDir = value;\n        this._dir = (normalizedValue === 'ltr' || normalizedValue === 'rtl') ? normalizedValue : 'ltr';\n        if (old !== this._dir && this._isInitialized) {\n            this.change.emit(this._dir);\n        }\n    }\n    /**\n     * Current layout direction of the element.\n     * @return {?}\n     */\n    get value() { return this.dir; }\n    /**\n     * Initialize once default value has been set.\n     * @return {?}\n     */\n    ngAfterContentInit() {\n        this._isInitialized = true;\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this.change.complete();\n    }\n}\nDir.decorators = [\n    { type: Directive, args: [{\n                selector: '[dir]',\n                providers: [{ provide: Directionality, useExisting: Dir }],\n                host: { '[attr.dir]': '_rawDir' },\n                exportAs: 'dir',\n            },] }\n];\nDir.propDecorators = {\n    change: [{ type: Output, args: ['dirChange',] }],\n    dir: [{ type: Input }]\n};\nif (false) {\n    /**\n     * Normalized direction that accounts for invalid/unsupported values.\n     * @type {?}\n     * @private\n     */\n    Dir.prototype._dir;\n    /**\n     * Whether the `value` has been set to its initial value.\n     * @type {?}\n     * @private\n     */\n    Dir.prototype._isInitialized;\n    /**\n     * Direction as passed in by the consumer.\n     * @type {?}\n     */\n    Dir.prototype._rawDir;\n    /**\n     * Event emitted when the direction changes.\n     * @type {?}\n     */\n    Dir.prototype.change;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/bidi/bidi-module.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass BidiModule {\n}\nBidiModule.decorators = [\n    { type: NgModule, args: [{\n                exports: [Dir],\n                declarations: [Dir],\n            },] }\n];\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/bidi/public-api.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { BidiModule, DIR_DOCUMENT, Dir, Directionality, DIR_DOCUMENT_FACTORY as Éµangular_material_src_cdk_bidi_bidi_a };\n//# sourceMappingURL=bidi.js.map\n","import { ElementRef } from '@angular/core';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Coerces a data-bound value (typically a string) to a boolean. */\nfunction coerceBooleanProperty(value) {\n    return value != null && `${value}` !== 'false';\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nfunction coerceNumberProperty(value, fallbackValue = 0) {\n    return _isNumberValue(value) ? Number(value) : fallbackValue;\n}\n/**\n * Whether the provided value is considered a number.\n * @docs-private\n */\nfunction _isNumberValue(value) {\n    // parseFloat(value) handles most of the cases we're interested in (it treats null, empty string,\n    // and other non-number values as NaN, where Number just uses 0) but it considers the string\n    // '123hello' to be a valid number. Therefore we also check if Number(value) is NaN.\n    return !isNaN(parseFloat(value)) && !isNaN(Number(value));\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nfunction coerceArray(value) {\n    return Array.isArray(value) ? value : [value];\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Coerces a value to a CSS pixel value. */\nfunction coerceCssPixelValue(value) {\n    if (value == null) {\n        return '';\n    }\n    return typeof value === 'string' ? value : `${value}px`;\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Coerces an ElementRef or an Element into an element.\n * Useful for APIs that can accept either a ref or the native element itself.\n */\nfunction coerceElement(elementOrRef) {\n    return elementOrRef instanceof ElementRef ? elementOrRef.nativeElement : elementOrRef;\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport { _isNumberValue, coerceArray, coerceBooleanProperty, coerceCssPixelValue, coerceElement, coerceNumberProperty };\n//# sourceMappingURL=coercion.js.map\n","import { isObservable, of, Subject } from 'rxjs';\nimport { Injectable, ÉµÉµdefineInjectable } from '@angular/core';\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/collections/data-source.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @abstract\n * @template T\n */\nclass DataSource {\n}\nif (false) {\n    /**\n     * Connects a collection viewer (such as a data-table) to this data source. Note that\n     * the stream provided will be accessed during change detection and should not directly change\n     * values that are bound in template views.\n     * @abstract\n     * @param {?} collectionViewer The component that exposes a view over the data provided by this\n     *     data source.\n     * @return {?} Observable that emits a new value when the data changes.\n     */\n    DataSource.prototype.connect = function (collectionViewer) { };\n    /**\n     * Disconnects a collection viewer (such as a data-table) from this data source. Can be used\n     * to perform any clean-up or tear-down operations when a view is being destroyed.\n     *\n     * @abstract\n     * @param {?} collectionViewer The component that exposes a view over the data provided by this\n     *     data source.\n     * @return {?}\n     */\n    DataSource.prototype.disconnect = function (collectionViewer) { };\n}\n/**\n * Checks whether an object is a data source.\n * @param {?} value\n * @return {?}\n */\nfunction isDataSource(value) {\n    // Check if the value is a DataSource by observing if it has a connect function. Cannot\n    // be checked as an `instanceof DataSource` since people could create their own sources\n    // that match the interface, but don't extend DataSource.\n    return value && typeof value.connect === 'function';\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/collections/array-data-source.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * DataSource wrapper for a native array.\n * @template T\n */\nclass ArrayDataSource extends DataSource {\n    /**\n     * @param {?} _data\n     */\n    constructor(_data) {\n        super();\n        this._data = _data;\n    }\n    /**\n     * @return {?}\n     */\n    connect() {\n        return isObservable(this._data) ? this._data : of(this._data);\n    }\n    /**\n     * @return {?}\n     */\n    disconnect() { }\n}\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    ArrayDataSource.prototype._data;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/collections/collection-viewer.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Interface for any component that provides a view of some data collection and wants to provide\n * information regarding the view and any changes made.\n * @record\n */\nfunction CollectionViewer() { }\nif (false) {\n    /**\n     * A stream that emits whenever the `CollectionViewer` starts looking at a new portion of the\n     * data. The `start` index is inclusive, while the `end` is exclusive.\n     * @type {?}\n     */\n    CollectionViewer.prototype.viewChange;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/collections/selection-model.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Class to be used to power selecting one or more options from a list.\n * @template T\n */\nclass SelectionModel {\n    /**\n     * @param {?=} _multiple\n     * @param {?=} initiallySelectedValues\n     * @param {?=} _emitChanges\n     */\n    constructor(_multiple = false, initiallySelectedValues, _emitChanges = true) {\n        this._multiple = _multiple;\n        this._emitChanges = _emitChanges;\n        /**\n         * Currently-selected values.\n         */\n        this._selection = new Set();\n        /**\n         * Keeps track of the deselected options that haven't been emitted by the change event.\n         */\n        this._deselectedToEmit = [];\n        /**\n         * Keeps track of the selected options that haven't been emitted by the change event.\n         */\n        this._selectedToEmit = [];\n        /**\n         * Event emitted when the value has changed.\n         */\n        this.changed = new Subject();\n        if (initiallySelectedValues && initiallySelectedValues.length) {\n            if (_multiple) {\n                initiallySelectedValues.forEach((/**\n                 * @param {?} value\n                 * @return {?}\n                 */\n                value => this._markSelected(value)));\n            }\n            else {\n                this._markSelected(initiallySelectedValues[0]);\n            }\n            // Clear the array in order to avoid firing the change event for preselected values.\n            this._selectedToEmit.length = 0;\n        }\n    }\n    /**\n     * Selected values.\n     * @return {?}\n     */\n    get selected() {\n        if (!this._selected) {\n            this._selected = Array.from(this._selection.values());\n        }\n        return this._selected;\n    }\n    /**\n     * Selects a value or an array of values.\n     * @param {...?} values\n     * @return {?}\n     */\n    select(...values) {\n        this._verifyValueAssignment(values);\n        values.forEach((/**\n         * @param {?} value\n         * @return {?}\n         */\n        value => this._markSelected(value)));\n        this._emitChangeEvent();\n    }\n    /**\n     * Deselects a value or an array of values.\n     * @param {...?} values\n     * @return {?}\n     */\n    deselect(...values) {\n        this._verifyValueAssignment(values);\n        values.forEach((/**\n         * @param {?} value\n         * @return {?}\n         */\n        value => this._unmarkSelected(value)));\n        this._emitChangeEvent();\n    }\n    /**\n     * Toggles a value between selected and deselected.\n     * @param {?} value\n     * @return {?}\n     */\n    toggle(value) {\n        this.isSelected(value) ? this.deselect(value) : this.select(value);\n    }\n    /**\n     * Clears all of the selected values.\n     * @return {?}\n     */\n    clear() {\n        this._unmarkAll();\n        this._emitChangeEvent();\n    }\n    /**\n     * Determines whether a value is selected.\n     * @param {?} value\n     * @return {?}\n     */\n    isSelected(value) {\n        return this._selection.has(value);\n    }\n    /**\n     * Determines whether the model does not have a value.\n     * @return {?}\n     */\n    isEmpty() {\n        return this._selection.size === 0;\n    }\n    /**\n     * Determines whether the model has a value.\n     * @return {?}\n     */\n    hasValue() {\n        return !this.isEmpty();\n    }\n    /**\n     * Sorts the selected values based on a predicate function.\n     * @param {?=} predicate\n     * @return {?}\n     */\n    sort(predicate) {\n        if (this._multiple && this.selected) {\n            (/** @type {?} */ (this._selected)).sort(predicate);\n        }\n    }\n    /**\n     * Gets whether multiple values can be selected.\n     * @return {?}\n     */\n    isMultipleSelection() {\n        return this._multiple;\n    }\n    /**\n     * Emits a change event and clears the records of selected and deselected values.\n     * @private\n     * @return {?}\n     */\n    _emitChangeEvent() {\n        // Clear the selected values so they can be re-cached.\n        this._selected = null;\n        if (this._selectedToEmit.length || this._deselectedToEmit.length) {\n            this.changed.next({\n                source: this,\n                added: this._selectedToEmit,\n                removed: this._deselectedToEmit\n            });\n            this._deselectedToEmit = [];\n            this._selectedToEmit = [];\n        }\n    }\n    /**\n     * Selects a value.\n     * @private\n     * @param {?} value\n     * @return {?}\n     */\n    _markSelected(value) {\n        if (!this.isSelected(value)) {\n            if (!this._multiple) {\n                this._unmarkAll();\n            }\n            this._selection.add(value);\n            if (this._emitChanges) {\n                this._selectedToEmit.push(value);\n            }\n        }\n    }\n    /**\n     * Deselects a value.\n     * @private\n     * @param {?} value\n     * @return {?}\n     */\n    _unmarkSelected(value) {\n        if (this.isSelected(value)) {\n            this._selection.delete(value);\n            if (this._emitChanges) {\n                this._deselectedToEmit.push(value);\n            }\n        }\n    }\n    /**\n     * Clears out the selected values.\n     * @private\n     * @return {?}\n     */\n    _unmarkAll() {\n        if (!this.isEmpty()) {\n            this._selection.forEach((/**\n             * @param {?} value\n             * @return {?}\n             */\n            value => this._unmarkSelected(value)));\n        }\n    }\n    /**\n     * Verifies the value assignment and throws an error if the specified value array is\n     * including multiple values while the selection model is not supporting multiple values.\n     * @private\n     * @param {?} values\n     * @return {?}\n     */\n    _verifyValueAssignment(values) {\n        if (values.length > 1 && !this._multiple) {\n            throw getMultipleValuesInSingleSelectionError();\n        }\n    }\n}\nif (false) {\n    /**\n     * Currently-selected values.\n     * @type {?}\n     * @private\n     */\n    SelectionModel.prototype._selection;\n    /**\n     * Keeps track of the deselected options that haven't been emitted by the change event.\n     * @type {?}\n     * @private\n     */\n    SelectionModel.prototype._deselectedToEmit;\n    /**\n     * Keeps track of the selected options that haven't been emitted by the change event.\n     * @type {?}\n     * @private\n     */\n    SelectionModel.prototype._selectedToEmit;\n    /**\n     * Cache for the array value of the selected items.\n     * @type {?}\n     * @private\n     */\n    SelectionModel.prototype._selected;\n    /**\n     * Event emitted when the value has changed.\n     * @type {?}\n     */\n    SelectionModel.prototype.changed;\n    /**\n     * @type {?}\n     * @private\n     */\n    SelectionModel.prototype._multiple;\n    /**\n     * @type {?}\n     * @private\n     */\n    SelectionModel.prototype._emitChanges;\n}\n/**\n * Event emitted when the value of a MatSelectionModel has changed.\n * \\@docs-private\n * @record\n * @template T\n */\nfunction SelectionChange() { }\nif (false) {\n    /**\n     * Model that dispatched the event.\n     * @type {?}\n     */\n    SelectionChange.prototype.source;\n    /**\n     * Options that were added to the model.\n     * @type {?}\n     */\n    SelectionChange.prototype.added;\n    /**\n     * Options that were removed from the model.\n     * @type {?}\n     */\n    SelectionChange.prototype.removed;\n}\n/**\n * Returns an error that reports that multiple values are passed into a selection model\n * with a single value.\n * \\@docs-private\n * @return {?}\n */\nfunction getMultipleValuesInSingleSelectionError() {\n    return Error('Cannot pass multiple values into SelectionModel with single-value mode.');\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/collections/unique-selection-dispatcher.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Class to coordinate unique selection based on name.\n * Intended to be consumed as an Angular service.\n * This service is needed because native radio change events are only fired on the item currently\n * being selected, and we still need to uncheck the previous selection.\n *\n * This service does not *store* any IDs and names because they may change at any time, so it is\n * less error-prone if they are simply passed through when the events occur.\n */\nclass UniqueSelectionDispatcher {\n    constructor() {\n        this._listeners = [];\n    }\n    /**\n     * Notify other items that selection for the given name has been set.\n     * @param {?} id ID of the item.\n     * @param {?} name Name of the item.\n     * @return {?}\n     */\n    notify(id, name) {\n        for (let listener of this._listeners) {\n            listener(id, name);\n        }\n    }\n    /**\n     * Listen for future changes to item selection.\n     * @param {?} listener\n     * @return {?} Function used to deregister listener\n     */\n    listen(listener) {\n        this._listeners.push(listener);\n        return (/**\n         * @return {?}\n         */\n        () => {\n            this._listeners = this._listeners.filter((/**\n             * @param {?} registered\n             * @return {?}\n             */\n            (registered) => {\n                return listener !== registered;\n            }));\n        });\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._listeners = [];\n    }\n}\nUniqueSelectionDispatcher.decorators = [\n    { type: Injectable, args: [{ providedIn: 'root' },] }\n];\n/** @nocollapse */ UniqueSelectionDispatcher.Éµprov = ÉµÉµdefineInjectable({ factory: function UniqueSelectionDispatcher_Factory() { return new UniqueSelectionDispatcher(); }, token: UniqueSelectionDispatcher, providedIn: \"root\" });\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    UniqueSelectionDispatcher.prototype._listeners;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/collections/tree-adapter.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Interface for a class that can flatten hierarchical structured data and re-expand the flattened\n * data back into its original structure. Should be used in conjunction with the cdk-tree.\n * @record\n * @template T\n */\nfunction TreeDataNodeFlattener() { }\nif (false) {\n    /**\n     * Transforms a set of hierarchical structured data into a flattened data array.\n     * @param {?} structuredData\n     * @return {?}\n     */\n    TreeDataNodeFlattener.prototype.flattenNodes = function (structuredData) { };\n    /**\n     * Expands a flattened array of data into its hierarchical form using the provided expansion\n     * model.\n     * @param {?} nodes\n     * @param {?} expansionModel\n     * @return {?}\n     */\n    TreeDataNodeFlattener.prototype.expandFlattenedNodes = function (nodes, expansionModel) { };\n    /**\n     * Put node descendants of node in array.\n     * If `onlyExpandable` is true, then only process expandable descendants.\n     * @param {?} node\n     * @param {?} nodes\n     * @param {?} onlyExpandable\n     * @return {?}\n     */\n    TreeDataNodeFlattener.prototype.nodeDescendents = function (node, nodes, onlyExpandable) { };\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/collections/public-api.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { ArrayDataSource, DataSource, SelectionModel, UniqueSelectionDispatcher, getMultipleValuesInSingleSelectionError, isDataSource };\n//# sourceMappingURL=collections.js.map\n","import { Injectable, Optional, Inject, PLATFORM_ID, ÉµÉµdefineInjectable, ÉµÉµinject, NgModule } from '@angular/core';\nimport { isPlatformBrowser } from '@angular/common';\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/platform/platform.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n// Whether the current platform supports the V8 Break Iterator. The V8 check\n// is necessary to detect all Blink based browsers.\n/** @type {?} */\nlet hasV8BreakIterator;\n// We need a try/catch around the reference to `Intl`, because accessing it in some cases can\n// cause IE to throw. These cases are tied to particular versions of Windows and can happen if\n// the consumer is providing a polyfilled `Map`. See:\n// https://github.com/Microsoft/ChakraCore/issues/3189\n// https://github.com/angular/components/issues/15687\ntry {\n    hasV8BreakIterator = (typeof Intl !== 'undefined' && ((/** @type {?} */ (Intl))).v8BreakIterator);\n}\ncatch (_a) {\n    hasV8BreakIterator = false;\n}\n/**\n * Service to detect the current platform by comparing the userAgent strings and\n * checking browser-specific global properties.\n */\nclass Platform {\n    /**\n     * \\@breaking-change 8.0.0 remove optional decorator\n     * @param {?=} _platformId\n     */\n    constructor(_platformId) {\n        this._platformId = _platformId;\n        // We want to use the Angular platform check because if the Document is shimmed\n        // without the navigator, the following checks will fail. This is preferred because\n        // sometimes the Document may be shimmed without the user's knowledge or intention\n        /**\n         * Whether the Angular application is being rendered in the browser.\n         */\n        this.isBrowser = this._platformId ?\n            isPlatformBrowser(this._platformId) : typeof document === 'object' && !!document;\n        /**\n         * Whether the current browser is Microsoft Edge.\n         */\n        this.EDGE = this.isBrowser && /(edge)/i.test(navigator.userAgent);\n        /**\n         * Whether the current rendering engine is Microsoft Trident.\n         */\n        this.TRIDENT = this.isBrowser && /(msie|trident)/i.test(navigator.userAgent);\n        // EdgeHTML and Trident mock Blink specific things and need to be excluded from this check.\n        /**\n         * Whether the current rendering engine is Blink.\n         */\n        this.BLINK = this.isBrowser && (!!(((/** @type {?} */ (window))).chrome || hasV8BreakIterator) &&\n            typeof CSS !== 'undefined' && !this.EDGE && !this.TRIDENT);\n        // Webkit is part of the userAgent in EdgeHTML, Blink and Trident. Therefore we need to\n        // ensure that Webkit runs standalone and is not used as another engine's base.\n        /**\n         * Whether the current rendering engine is WebKit.\n         */\n        this.WEBKIT = this.isBrowser &&\n            /AppleWebKit/i.test(navigator.userAgent) && !this.BLINK && !this.EDGE && !this.TRIDENT;\n        /**\n         * Whether the current platform is Apple iOS.\n         */\n        this.IOS = this.isBrowser && /iPad|iPhone|iPod/.test(navigator.userAgent) &&\n            !('MSStream' in window);\n        // It's difficult to detect the plain Gecko engine, because most of the browsers identify\n        // them self as Gecko-like browsers and modify the userAgent's according to that.\n        // Since we only cover one explicit Firefox case, we can simply check for Firefox\n        // instead of having an unstable check for Gecko.\n        /**\n         * Whether the current browser is Firefox.\n         */\n        this.FIREFOX = this.isBrowser && /(firefox|minefield)/i.test(navigator.userAgent);\n        /**\n         * Whether the current platform is Android.\n         */\n        // Trident on mobile adds the android platform to the userAgent to trick detections.\n        this.ANDROID = this.isBrowser && /android/i.test(navigator.userAgent) && !this.TRIDENT;\n        // Safari browsers will include the Safari keyword in their userAgent. Some browsers may fake\n        // this and just place the Safari keyword in the userAgent. To be more safe about Safari every\n        // Safari browser should also use Webkit as its layout engine.\n        /**\n         * Whether the current browser is Safari.\n         */\n        this.SAFARI = this.isBrowser && /safari/i.test(navigator.userAgent) && this.WEBKIT;\n    }\n}\nPlatform.decorators = [\n    { type: Injectable, args: [{ providedIn: 'root' },] }\n];\n/** @nocollapse */\nPlatform.ctorParameters = () => [\n    { type: Object, decorators: [{ type: Optional }, { type: Inject, args: [PLATFORM_ID,] }] }\n];\n/** @nocollapse */ Platform.Éµprov = ÉµÉµdefineInjectable({ factory: function Platform_Factory() { return new Platform(ÉµÉµinject(PLATFORM_ID, 8)); }, token: Platform, providedIn: \"root\" });\nif (false) {\n    /**\n     * Whether the Angular application is being rendered in the browser.\n     * @type {?}\n     */\n    Platform.prototype.isBrowser;\n    /**\n     * Whether the current browser is Microsoft Edge.\n     * @type {?}\n     */\n    Platform.prototype.EDGE;\n    /**\n     * Whether the current rendering engine is Microsoft Trident.\n     * @type {?}\n     */\n    Platform.prototype.TRIDENT;\n    /**\n     * Whether the current rendering engine is Blink.\n     * @type {?}\n     */\n    Platform.prototype.BLINK;\n    /**\n     * Whether the current rendering engine is WebKit.\n     * @type {?}\n     */\n    Platform.prototype.WEBKIT;\n    /**\n     * Whether the current platform is Apple iOS.\n     * @type {?}\n     */\n    Platform.prototype.IOS;\n    /**\n     * Whether the current browser is Firefox.\n     * @type {?}\n     */\n    Platform.prototype.FIREFOX;\n    /**\n     * Whether the current platform is Android.\n     * @type {?}\n     */\n    Platform.prototype.ANDROID;\n    /**\n     * Whether the current browser is Safari.\n     * @type {?}\n     */\n    Platform.prototype.SAFARI;\n    /**\n     * @type {?}\n     * @private\n     */\n    Platform.prototype._platformId;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/platform/platform-module.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass PlatformModule {\n}\nPlatformModule.decorators = [\n    { type: NgModule, args: [{},] }\n];\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/platform/features/input-types.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Cached result Set of input types support by the current browser.\n * @type {?}\n */\nlet supportedInputTypes;\n/**\n * Types of `<input>` that *might* be supported.\n * @type {?}\n */\nconst candidateInputTypes = [\n    // `color` must come first. Chrome 56 shows a warning if we change the type to `color` after\n    // first changing it to something else:\n    // The specified value \"\" does not conform to the required format.\n    // The format is \"#rrggbb\" where rr, gg, bb are two-digit hexadecimal numbers.\n    'color',\n    'button',\n    'checkbox',\n    'date',\n    'datetime-local',\n    'email',\n    'file',\n    'hidden',\n    'image',\n    'month',\n    'number',\n    'password',\n    'radio',\n    'range',\n    'reset',\n    'search',\n    'submit',\n    'tel',\n    'text',\n    'time',\n    'url',\n    'week',\n];\n/**\n * @return {?} The input types supported by this browser.\n */\nfunction getSupportedInputTypes() {\n    // Result is cached.\n    if (supportedInputTypes) {\n        return supportedInputTypes;\n    }\n    // We can't check if an input type is not supported until we're on the browser, so say that\n    // everything is supported when not on the browser. We don't use `Platform` here since it's\n    // just a helper function and can't inject it.\n    if (typeof document !== 'object' || !document) {\n        supportedInputTypes = new Set(candidateInputTypes);\n        return supportedInputTypes;\n    }\n    /** @type {?} */\n    let featureTestInput = document.createElement('input');\n    supportedInputTypes = new Set(candidateInputTypes.filter((/**\n     * @param {?} value\n     * @return {?}\n     */\n    value => {\n        featureTestInput.setAttribute('type', value);\n        return featureTestInput.type === value;\n    })));\n    return supportedInputTypes;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/platform/features/passive-listeners.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Cached result of whether the user's browser supports passive event listeners.\n * @type {?}\n */\nlet supportsPassiveEvents;\n/**\n * Checks whether the user's browser supports passive event listeners.\n * See: https://github.com/WICG/EventListenerOptions/blob/gh-pages/explainer.md\n * @return {?}\n */\nfunction supportsPassiveEventListeners() {\n    if (supportsPassiveEvents == null && typeof window !== 'undefined') {\n        try {\n            window.addEventListener('test', (/** @type {?} */ (null)), Object.defineProperty({}, 'passive', {\n                get: (/**\n                 * @return {?}\n                 */\n                () => supportsPassiveEvents = true)\n            }));\n        }\n        finally {\n            supportsPassiveEvents = supportsPassiveEvents || false;\n        }\n    }\n    return supportsPassiveEvents;\n}\n/**\n * Normalizes an `AddEventListener` object to something that can be passed\n * to `addEventListener` on any browser, no matter whether it supports the\n * `options` parameter.\n * @param {?} options Object to be normalized.\n * @return {?}\n */\nfunction normalizePassiveListenerOptions(options) {\n    return supportsPassiveEventListeners() ? options : !!options.capture;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/platform/features/scrolling.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** @enum {number} */\nconst RtlScrollAxisType = {\n    /**\n     * scrollLeft is 0 when scrolled all the way left and (scrollWidth - clientWidth) when scrolled\n     * all the way right.\n     */\n    NORMAL: 0,\n    /**\n     * scrollLeft is -(scrollWidth - clientWidth) when scrolled all the way left and 0 when scrolled\n     * all the way right.\n     */\n    NEGATED: 1,\n    /**\n     * scrollLeft is (scrollWidth - clientWidth) when scrolled all the way left and 0 when scrolled\n     * all the way right.\n     */\n    INVERTED: 2,\n};\n/**\n * Cached result of the way the browser handles the horizontal scroll axis in RTL mode.\n * @type {?}\n */\nlet rtlScrollAxisType;\n/**\n * Check whether the browser supports scroll behaviors.\n * @return {?}\n */\nfunction supportsScrollBehavior() {\n    return !!(typeof document == 'object' && 'scrollBehavior' in (/** @type {?} */ (document.documentElement)).style);\n}\n/**\n * Checks the type of RTL scroll axis used by this browser. As of time of writing, Chrome is NORMAL,\n * Firefox & Safari are NEGATED, and IE & Edge are INVERTED.\n * @return {?}\n */\nfunction getRtlScrollAxisType() {\n    // We can't check unless we're on the browser. Just assume 'normal' if we're not.\n    if (typeof document !== 'object' || !document) {\n        return 0 /* NORMAL */;\n    }\n    if (rtlScrollAxisType == null) {\n        // Create a 1px wide scrolling container and a 2px wide content element.\n        /** @type {?} */\n        const scrollContainer = document.createElement('div');\n        /** @type {?} */\n        const containerStyle = scrollContainer.style;\n        scrollContainer.dir = 'rtl';\n        containerStyle.height = '1px';\n        containerStyle.width = '1px';\n        containerStyle.overflow = 'auto';\n        containerStyle.visibility = 'hidden';\n        containerStyle.pointerEvents = 'none';\n        containerStyle.position = 'absolute';\n        /** @type {?} */\n        const content = document.createElement('div');\n        /** @type {?} */\n        const contentStyle = content.style;\n        contentStyle.width = '2px';\n        contentStyle.height = '1px';\n        scrollContainer.appendChild(content);\n        document.body.appendChild(scrollContainer);\n        rtlScrollAxisType = 0 /* NORMAL */;\n        // The viewport starts scrolled all the way to the right in RTL mode. If we are in a NORMAL\n        // browser this would mean that the scrollLeft should be 1. If it's zero instead we know we're\n        // dealing with one of the other two types of browsers.\n        if (scrollContainer.scrollLeft === 0) {\n            // In a NEGATED browser the scrollLeft is always somewhere in [-maxScrollAmount, 0]. For an\n            // INVERTED browser it is always somewhere in [0, maxScrollAmount]. We can determine which by\n            // setting to the scrollLeft to 1. This is past the max for a NEGATED browser, so it will\n            // return 0 when we read it again.\n            scrollContainer.scrollLeft = 1;\n            rtlScrollAxisType =\n                scrollContainer.scrollLeft === 0 ? 1 /* NEGATED */ : 2 /* INVERTED */;\n        }\n        (/** @type {?} */ (scrollContainer.parentNode)).removeChild(scrollContainer);\n    }\n    return rtlScrollAxisType;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/platform/features/shadow-dom.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** @type {?} */\nlet shadowDomIsSupported;\n/**\n * Checks whether the user's browser support Shadow DOM.\n * @return {?}\n */\nfunction _supportsShadowDom() {\n    if (shadowDomIsSupported == null) {\n        /** @type {?} */\n        const head = typeof document !== 'undefined' ? document.head : null;\n        shadowDomIsSupported = !!(head && (((/** @type {?} */ (head))).createShadowRoot || head.attachShadow));\n    }\n    return shadowDomIsSupported;\n}\n/**\n * Gets the shadow root of an element, if supported and the element is inside the Shadow DOM.\n * @param {?} element\n * @return {?}\n */\nfunction _getShadowRoot(element) {\n    if (_supportsShadowDom()) {\n        /** @type {?} */\n        const rootNode = element.getRootNode ? element.getRootNode() : null;\n        // Note that this should be caught by `_supportsShadowDom`, but some\n        // teams have been able to hit this code path on unsupported browsers.\n        if (typeof ShadowRoot !== 'undefined' && ShadowRoot && rootNode instanceof ShadowRoot) {\n            return rootNode;\n        }\n    }\n    return null;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/platform/public-api.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { Platform, PlatformModule, _getShadowRoot, _supportsShadowDom, getRtlScrollAxisType, getSupportedInputTypes, normalizePassiveListenerOptions, supportsPassiveEventListeners, supportsScrollBehavior };\n//# sourceMappingURL=platform.js.map\n","import { coerceNumberProperty } from '@angular/cdk/coercion';\nimport { InjectionToken, Directive, forwardRef, Input, Injectable, NgZone, Optional, Inject, ÉµÉµdefineInjectable, ÉµÉµinject, ElementRef, Component, ViewEncapsulation, ChangeDetectionStrategy, ChangeDetectorRef, Output, ViewChild, ViewContainerRef, TemplateRef, IterableDiffers, SkipSelf, NgModule } from '@angular/core';\nimport { Subject, of, Observable, fromEvent, merge, animationFrameScheduler, asapScheduler, Subscription, isObservable } from 'rxjs';\nimport { distinctUntilChanged, auditTime, filter, takeUntil, startWith, pairwise, switchMap, shareReplay } from 'rxjs/operators';\nimport { Platform, getRtlScrollAxisType, supportsScrollBehavior, PlatformModule } from '@angular/cdk/platform';\nimport { DOCUMENT } from '@angular/common';\nimport { Directionality, BidiModule } from '@angular/cdk/bidi';\nimport { isDataSource, ArrayDataSource } from '@angular/cdk/collections';\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/scrolling/virtual-scroll-strategy.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * The injection token used to specify the virtual scrolling strategy.\n * @type {?}\n */\nconst VIRTUAL_SCROLL_STRATEGY = new InjectionToken('VIRTUAL_SCROLL_STRATEGY');\n/**\n * A strategy that dictates which items should be rendered in the viewport.\n * @record\n */\nfunction VirtualScrollStrategy() { }\nif (false) {\n    /**\n     * Emits when the index of the first element visible in the viewport changes.\n     * @type {?}\n     */\n    VirtualScrollStrategy.prototype.scrolledIndexChange;\n    /**\n     * Attaches this scroll strategy to a viewport.\n     * @param {?} viewport The viewport to attach this strategy to.\n     * @return {?}\n     */\n    VirtualScrollStrategy.prototype.attach = function (viewport) { };\n    /**\n     * Detaches this scroll strategy from the currently attached viewport.\n     * @return {?}\n     */\n    VirtualScrollStrategy.prototype.detach = function () { };\n    /**\n     * Called when the viewport is scrolled (debounced using requestAnimationFrame).\n     * @return {?}\n     */\n    VirtualScrollStrategy.prototype.onContentScrolled = function () { };\n    /**\n     * Called when the length of the data changes.\n     * @return {?}\n     */\n    VirtualScrollStrategy.prototype.onDataLengthChanged = function () { };\n    /**\n     * Called when the range of items rendered in the DOM has changed.\n     * @return {?}\n     */\n    VirtualScrollStrategy.prototype.onContentRendered = function () { };\n    /**\n     * Called when the offset of the rendered items changed.\n     * @return {?}\n     */\n    VirtualScrollStrategy.prototype.onRenderedOffsetChanged = function () { };\n    /**\n     * Scroll to the offset for the given index.\n     * @param {?} index The index of the element to scroll to.\n     * @param {?} behavior The ScrollBehavior to use when scrolling.\n     * @return {?}\n     */\n    VirtualScrollStrategy.prototype.scrollToIndex = function (index, behavior) { };\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/scrolling/fixed-size-virtual-scroll.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Virtual scrolling strategy for lists with items of known fixed size.\n */\nclass FixedSizeVirtualScrollStrategy {\n    /**\n     * @param {?} itemSize The size of the items in the virtually scrolling list.\n     * @param {?} minBufferPx The minimum amount of buffer (in pixels) before needing to render more\n     * @param {?} maxBufferPx The amount of buffer (in pixels) to render when rendering more.\n     */\n    constructor(itemSize, minBufferPx, maxBufferPx) {\n        this._scrolledIndexChange = new Subject();\n        /**\n         * \\@docs-private Implemented as part of VirtualScrollStrategy.\n         */\n        this.scrolledIndexChange = this._scrolledIndexChange.pipe(distinctUntilChanged());\n        /**\n         * The attached viewport.\n         */\n        this._viewport = null;\n        this._itemSize = itemSize;\n        this._minBufferPx = minBufferPx;\n        this._maxBufferPx = maxBufferPx;\n    }\n    /**\n     * Attaches this scroll strategy to a viewport.\n     * @param {?} viewport The viewport to attach this strategy to.\n     * @return {?}\n     */\n    attach(viewport) {\n        this._viewport = viewport;\n        this._updateTotalContentSize();\n        this._updateRenderedRange();\n    }\n    /**\n     * Detaches this scroll strategy from the currently attached viewport.\n     * @return {?}\n     */\n    detach() {\n        this._scrolledIndexChange.complete();\n        this._viewport = null;\n    }\n    /**\n     * Update the item size and buffer size.\n     * @param {?} itemSize The size of the items in the virtually scrolling list.\n     * @param {?} minBufferPx The minimum amount of buffer (in pixels) before needing to render more\n     * @param {?} maxBufferPx The amount of buffer (in pixels) to render when rendering more.\n     * @return {?}\n     */\n    updateItemAndBufferSize(itemSize, minBufferPx, maxBufferPx) {\n        if (maxBufferPx < minBufferPx) {\n            throw Error('CDK virtual scroll: maxBufferPx must be greater than or equal to minBufferPx');\n        }\n        this._itemSize = itemSize;\n        this._minBufferPx = minBufferPx;\n        this._maxBufferPx = maxBufferPx;\n        this._updateTotalContentSize();\n        this._updateRenderedRange();\n    }\n    /**\n     * \\@docs-private Implemented as part of VirtualScrollStrategy.\n     * @return {?}\n     */\n    onContentScrolled() {\n        this._updateRenderedRange();\n    }\n    /**\n     * \\@docs-private Implemented as part of VirtualScrollStrategy.\n     * @return {?}\n     */\n    onDataLengthChanged() {\n        this._updateTotalContentSize();\n        this._updateRenderedRange();\n    }\n    /**\n     * \\@docs-private Implemented as part of VirtualScrollStrategy.\n     * @return {?}\n     */\n    onContentRendered() { }\n    /**\n     * \\@docs-private Implemented as part of VirtualScrollStrategy.\n     * @return {?}\n     */\n    onRenderedOffsetChanged() { }\n    /**\n     * Scroll to the offset for the given index.\n     * @param {?} index The index of the element to scroll to.\n     * @param {?} behavior The ScrollBehavior to use when scrolling.\n     * @return {?}\n     */\n    scrollToIndex(index, behavior) {\n        if (this._viewport) {\n            this._viewport.scrollToOffset(index * this._itemSize, behavior);\n        }\n    }\n    /**\n     * Update the viewport's total content size.\n     * @private\n     * @return {?}\n     */\n    _updateTotalContentSize() {\n        if (!this._viewport) {\n            return;\n        }\n        this._viewport.setTotalContentSize(this._viewport.getDataLength() * this._itemSize);\n    }\n    /**\n     * Update the viewport's rendered range.\n     * @private\n     * @return {?}\n     */\n    _updateRenderedRange() {\n        if (!this._viewport) {\n            return;\n        }\n        /** @type {?} */\n        const scrollOffset = this._viewport.measureScrollOffset();\n        /** @type {?} */\n        const firstVisibleIndex = scrollOffset / this._itemSize;\n        /** @type {?} */\n        const renderedRange = this._viewport.getRenderedRange();\n        /** @type {?} */\n        const newRange = { start: renderedRange.start, end: renderedRange.end };\n        /** @type {?} */\n        const viewportSize = this._viewport.getViewportSize();\n        /** @type {?} */\n        const dataLength = this._viewport.getDataLength();\n        /** @type {?} */\n        const startBuffer = scrollOffset - newRange.start * this._itemSize;\n        if (startBuffer < this._minBufferPx && newRange.start != 0) {\n            /** @type {?} */\n            const expandStart = Math.ceil((this._maxBufferPx - startBuffer) / this._itemSize);\n            newRange.start = Math.max(0, newRange.start - expandStart);\n            newRange.end = Math.min(dataLength, Math.ceil(firstVisibleIndex + (viewportSize + this._minBufferPx) / this._itemSize));\n        }\n        else {\n            /** @type {?} */\n            const endBuffer = newRange.end * this._itemSize - (scrollOffset + viewportSize);\n            if (endBuffer < this._minBufferPx && newRange.end != dataLength) {\n                /** @type {?} */\n                const expandEnd = Math.ceil((this._maxBufferPx - endBuffer) / this._itemSize);\n                if (expandEnd > 0) {\n                    newRange.end = Math.min(dataLength, newRange.end + expandEnd);\n                    newRange.start = Math.max(0, Math.floor(firstVisibleIndex - this._minBufferPx / this._itemSize));\n                }\n            }\n        }\n        this._viewport.setRenderedRange(newRange);\n        this._viewport.setRenderedContentOffset(this._itemSize * newRange.start);\n        this._scrolledIndexChange.next(Math.floor(firstVisibleIndex));\n    }\n}\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    FixedSizeVirtualScrollStrategy.prototype._scrolledIndexChange;\n    /**\n     * \\@docs-private Implemented as part of VirtualScrollStrategy.\n     * @type {?}\n     */\n    FixedSizeVirtualScrollStrategy.prototype.scrolledIndexChange;\n    /**\n     * The attached viewport.\n     * @type {?}\n     * @private\n     */\n    FixedSizeVirtualScrollStrategy.prototype._viewport;\n    /**\n     * The size of the items in the virtually scrolling list.\n     * @type {?}\n     * @private\n     */\n    FixedSizeVirtualScrollStrategy.prototype._itemSize;\n    /**\n     * The minimum amount of buffer rendered beyond the viewport (in pixels).\n     * @type {?}\n     * @private\n     */\n    FixedSizeVirtualScrollStrategy.prototype._minBufferPx;\n    /**\n     * The number of buffer items to render beyond the edge of the viewport (in pixels).\n     * @type {?}\n     * @private\n     */\n    FixedSizeVirtualScrollStrategy.prototype._maxBufferPx;\n}\n/**\n * Provider factory for `FixedSizeVirtualScrollStrategy` that simply extracts the already created\n * `FixedSizeVirtualScrollStrategy` from the given directive.\n * @param {?} fixedSizeDir The instance of `CdkFixedSizeVirtualScroll` to extract the\n *     `FixedSizeVirtualScrollStrategy` from.\n * @return {?}\n */\nfunction _fixedSizeVirtualScrollStrategyFactory(fixedSizeDir) {\n    return fixedSizeDir._scrollStrategy;\n}\n/**\n * A virtual scroll strategy that supports fixed-size items.\n */\nclass CdkFixedSizeVirtualScroll {\n    constructor() {\n        this._itemSize = 20;\n        this._minBufferPx = 100;\n        this._maxBufferPx = 200;\n        /**\n         * The scroll strategy used by this directive.\n         */\n        this._scrollStrategy = new FixedSizeVirtualScrollStrategy(this.itemSize, this.minBufferPx, this.maxBufferPx);\n    }\n    /**\n     * The size of the items in the list (in pixels).\n     * @return {?}\n     */\n    get itemSize() { return this._itemSize; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set itemSize(value) { this._itemSize = coerceNumberProperty(value); }\n    /**\n     * The minimum amount of buffer rendered beyond the viewport (in pixels).\n     * If the amount of buffer dips below this number, more items will be rendered. Defaults to 100px.\n     * @return {?}\n     */\n    get minBufferPx() { return this._minBufferPx; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set minBufferPx(value) { this._minBufferPx = coerceNumberProperty(value); }\n    /**\n     * The number of pixels worth of buffer to render for when rendering new items. Defaults to 200px.\n     * @return {?}\n     */\n    get maxBufferPx() { return this._maxBufferPx; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set maxBufferPx(value) { this._maxBufferPx = coerceNumberProperty(value); }\n    /**\n     * @return {?}\n     */\n    ngOnChanges() {\n        this._scrollStrategy.updateItemAndBufferSize(this.itemSize, this.minBufferPx, this.maxBufferPx);\n    }\n}\nCdkFixedSizeVirtualScroll.decorators = [\n    { type: Directive, args: [{\n                selector: 'cdk-virtual-scroll-viewport[itemSize]',\n                providers: [{\n                        provide: VIRTUAL_SCROLL_STRATEGY,\n                        useFactory: _fixedSizeVirtualScrollStrategyFactory,\n                        deps: [forwardRef((/**\n                             * @return {?}\n                             */\n                            () => CdkFixedSizeVirtualScroll))],\n                    }],\n            },] }\n];\nCdkFixedSizeVirtualScroll.propDecorators = {\n    itemSize: [{ type: Input }],\n    minBufferPx: [{ type: Input }],\n    maxBufferPx: [{ type: Input }]\n};\nif (false) {\n    /** @type {?} */\n    CdkFixedSizeVirtualScroll.ngAcceptInputType_itemSize;\n    /** @type {?} */\n    CdkFixedSizeVirtualScroll.ngAcceptInputType_minBufferPx;\n    /** @type {?} */\n    CdkFixedSizeVirtualScroll.ngAcceptInputType_maxBufferPx;\n    /** @type {?} */\n    CdkFixedSizeVirtualScroll.prototype._itemSize;\n    /** @type {?} */\n    CdkFixedSizeVirtualScroll.prototype._minBufferPx;\n    /** @type {?} */\n    CdkFixedSizeVirtualScroll.prototype._maxBufferPx;\n    /**\n     * The scroll strategy used by this directive.\n     * @type {?}\n     */\n    CdkFixedSizeVirtualScroll.prototype._scrollStrategy;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/scrolling/scroll-dispatcher.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Time in ms to throttle the scrolling events by default.\n * @type {?}\n */\nconst DEFAULT_SCROLL_TIME = 20;\n/**\n * Service contained all registered Scrollable references and emits an event when any one of the\n * Scrollable references emit a scrolled event.\n */\nclass ScrollDispatcher {\n    /**\n     * @param {?} _ngZone\n     * @param {?} _platform\n     * @param {?=} document\n     */\n    constructor(_ngZone, _platform, \n    /** @breaking-change 11.0.0 make document required */\n    document) {\n        this._ngZone = _ngZone;\n        this._platform = _platform;\n        /**\n         * Subject for notifying that a registered scrollable reference element has been scrolled.\n         */\n        this._scrolled = new Subject();\n        /**\n         * Keeps track of the global `scroll` and `resize` subscriptions.\n         */\n        this._globalSubscription = null;\n        /**\n         * Keeps track of the amount of subscriptions to `scrolled`. Used for cleaning up afterwards.\n         */\n        this._scrolledCount = 0;\n        /**\n         * Map of all the scrollable references that are registered with the service and their\n         * scroll event subscriptions.\n         */\n        this.scrollContainers = new Map();\n        this._document = document;\n    }\n    /**\n     * Registers a scrollable instance with the service and listens for its scrolled events. When the\n     * scrollable is scrolled, the service emits the event to its scrolled observable.\n     * @param {?} scrollable Scrollable instance to be registered.\n     * @return {?}\n     */\n    register(scrollable) {\n        if (!this.scrollContainers.has(scrollable)) {\n            this.scrollContainers.set(scrollable, scrollable.elementScrolled()\n                .subscribe((/**\n             * @return {?}\n             */\n            () => this._scrolled.next(scrollable))));\n        }\n    }\n    /**\n     * Deregisters a Scrollable reference and unsubscribes from its scroll event observable.\n     * @param {?} scrollable Scrollable instance to be deregistered.\n     * @return {?}\n     */\n    deregister(scrollable) {\n        /** @type {?} */\n        const scrollableReference = this.scrollContainers.get(scrollable);\n        if (scrollableReference) {\n            scrollableReference.unsubscribe();\n            this.scrollContainers.delete(scrollable);\n        }\n    }\n    /**\n     * Returns an observable that emits an event whenever any of the registered Scrollable\n     * references (or window, document, or body) fire a scrolled event. Can provide a time in ms\n     * to override the default \"throttle\" time.\n     *\n     * **Note:** in order to avoid hitting change detection for every scroll event,\n     * all of the events emitted from this stream will be run outside the Angular zone.\n     * If you need to update any data bindings as a result of a scroll event, you have\n     * to run the callback using `NgZone.run`.\n     * @param {?=} auditTimeInMs\n     * @return {?}\n     */\n    scrolled(auditTimeInMs = DEFAULT_SCROLL_TIME) {\n        if (!this._platform.isBrowser) {\n            return of();\n        }\n        return new Observable((/**\n         * @param {?} observer\n         * @return {?}\n         */\n        (observer) => {\n            if (!this._globalSubscription) {\n                this._addGlobalListener();\n            }\n            // In the case of a 0ms delay, use an observable without auditTime\n            // since it does add a perceptible delay in processing overhead.\n            /** @type {?} */\n            const subscription = auditTimeInMs > 0 ?\n                this._scrolled.pipe(auditTime(auditTimeInMs)).subscribe(observer) :\n                this._scrolled.subscribe(observer);\n            this._scrolledCount++;\n            return (/**\n             * @return {?}\n             */\n            () => {\n                subscription.unsubscribe();\n                this._scrolledCount--;\n                if (!this._scrolledCount) {\n                    this._removeGlobalListener();\n                }\n            });\n        }));\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._removeGlobalListener();\n        this.scrollContainers.forEach((/**\n         * @param {?} _\n         * @param {?} container\n         * @return {?}\n         */\n        (_, container) => this.deregister(container)));\n        this._scrolled.complete();\n    }\n    /**\n     * Returns an observable that emits whenever any of the\n     * scrollable ancestors of an element are scrolled.\n     * @param {?} elementRef Element whose ancestors to listen for.\n     * @param {?=} auditTimeInMs Time to throttle the scroll events.\n     * @return {?}\n     */\n    ancestorScrolled(elementRef, auditTimeInMs) {\n        /** @type {?} */\n        const ancestors = this.getAncestorScrollContainers(elementRef);\n        return this.scrolled(auditTimeInMs).pipe(filter((/**\n         * @param {?} target\n         * @return {?}\n         */\n        target => {\n            return !target || ancestors.indexOf(target) > -1;\n        })));\n    }\n    /**\n     * Returns all registered Scrollables that contain the provided element.\n     * @param {?} elementRef\n     * @return {?}\n     */\n    getAncestorScrollContainers(elementRef) {\n        /** @type {?} */\n        const scrollingContainers = [];\n        this.scrollContainers.forEach((/**\n         * @param {?} _subscription\n         * @param {?} scrollable\n         * @return {?}\n         */\n        (_subscription, scrollable) => {\n            if (this._scrollableContainsElement(scrollable, elementRef)) {\n                scrollingContainers.push(scrollable);\n            }\n        }));\n        return scrollingContainers;\n    }\n    /**\n     * Access injected document if available or fallback to global document reference\n     * @private\n     * @return {?}\n     */\n    _getDocument() {\n        return this._document || document;\n    }\n    /**\n     * Use defaultView of injected document if available or fallback to global window reference\n     * @private\n     * @return {?}\n     */\n    _getWindow() {\n        /** @type {?} */\n        const doc = this._getDocument();\n        return doc.defaultView || window;\n    }\n    /**\n     * Returns true if the element is contained within the provided Scrollable.\n     * @private\n     * @param {?} scrollable\n     * @param {?} elementRef\n     * @return {?}\n     */\n    _scrollableContainsElement(scrollable, elementRef) {\n        /** @type {?} */\n        let element = elementRef.nativeElement;\n        /** @type {?} */\n        let scrollableElement = scrollable.getElementRef().nativeElement;\n        // Traverse through the element parents until we reach null, checking if any of the elements\n        // are the scrollable's element.\n        do {\n            if (element == scrollableElement) {\n                return true;\n            }\n        } while (element = (/** @type {?} */ (element)).parentElement);\n        return false;\n    }\n    /**\n     * Sets up the global scroll listeners.\n     * @private\n     * @return {?}\n     */\n    _addGlobalListener() {\n        this._globalSubscription = this._ngZone.runOutsideAngular((/**\n         * @return {?}\n         */\n        () => {\n            /** @type {?} */\n            const window = this._getWindow();\n            return fromEvent(window.document, 'scroll').subscribe((/**\n             * @return {?}\n             */\n            () => this._scrolled.next()));\n        }));\n    }\n    /**\n     * Cleans up the global scroll listener.\n     * @private\n     * @return {?}\n     */\n    _removeGlobalListener() {\n        if (this._globalSubscription) {\n            this._globalSubscription.unsubscribe();\n            this._globalSubscription = null;\n        }\n    }\n}\nScrollDispatcher.decorators = [\n    { type: Injectable, args: [{ providedIn: 'root' },] }\n];\n/** @nocollapse */\nScrollDispatcher.ctorParameters = () => [\n    { type: NgZone },\n    { type: Platform },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT,] }] }\n];\n/** @nocollapse */ ScrollDispatcher.Éµprov = ÉµÉµdefineInjectable({ factory: function ScrollDispatcher_Factory() { return new ScrollDispatcher(ÉµÉµinject(NgZone), ÉµÉµinject(Platform), ÉµÉµinject(DOCUMENT, 8)); }, token: ScrollDispatcher, providedIn: \"root\" });\nif (false) {\n    /**\n     * Used to reference correct document/window\n     * @type {?}\n     * @protected\n     */\n    ScrollDispatcher.prototype._document;\n    /**\n     * Subject for notifying that a registered scrollable reference element has been scrolled.\n     * @type {?}\n     * @private\n     */\n    ScrollDispatcher.prototype._scrolled;\n    /**\n     * Keeps track of the global `scroll` and `resize` subscriptions.\n     * @type {?}\n     */\n    ScrollDispatcher.prototype._globalSubscription;\n    /**\n     * Keeps track of the amount of subscriptions to `scrolled`. Used for cleaning up afterwards.\n     * @type {?}\n     * @private\n     */\n    ScrollDispatcher.prototype._scrolledCount;\n    /**\n     * Map of all the scrollable references that are registered with the service and their\n     * scroll event subscriptions.\n     * @type {?}\n     */\n    ScrollDispatcher.prototype.scrollContainers;\n    /**\n     * @type {?}\n     * @private\n     */\n    ScrollDispatcher.prototype._ngZone;\n    /**\n     * @type {?}\n     * @private\n     */\n    ScrollDispatcher.prototype._platform;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/scrolling/scrollable.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Sends an event when the directive's element is scrolled. Registers itself with the\n * ScrollDispatcher service to include itself as part of its collection of scrolling events that it\n * can be listened to through the service.\n */\nclass CdkScrollable {\n    /**\n     * @param {?} elementRef\n     * @param {?} scrollDispatcher\n     * @param {?} ngZone\n     * @param {?=} dir\n     */\n    constructor(elementRef, scrollDispatcher, ngZone, dir) {\n        this.elementRef = elementRef;\n        this.scrollDispatcher = scrollDispatcher;\n        this.ngZone = ngZone;\n        this.dir = dir;\n        this._destroyed = new Subject();\n        this._elementScrolled = new Observable((/**\n         * @param {?} observer\n         * @return {?}\n         */\n        (observer) => this.ngZone.runOutsideAngular((/**\n         * @return {?}\n         */\n        () => fromEvent(this.elementRef.nativeElement, 'scroll').pipe(takeUntil(this._destroyed))\n            .subscribe(observer)))));\n    }\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n        this.scrollDispatcher.register(this);\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this.scrollDispatcher.deregister(this);\n        this._destroyed.next();\n        this._destroyed.complete();\n    }\n    /**\n     * Returns observable that emits when a scroll event is fired on the host element.\n     * @return {?}\n     */\n    elementScrolled() {\n        return this._elementScrolled;\n    }\n    /**\n     * Gets the ElementRef for the viewport.\n     * @return {?}\n     */\n    getElementRef() {\n        return this.elementRef;\n    }\n    /**\n     * Scrolls to the specified offsets. This is a normalized version of the browser's native scrollTo\n     * method, since browsers are not consistent about what scrollLeft means in RTL. For this method\n     * left and right always refer to the left and right side of the scrolling container irrespective\n     * of the layout direction. start and end refer to left and right in an LTR context and vice-versa\n     * in an RTL context.\n     * @param {?} options specified the offsets to scroll to.\n     * @return {?}\n     */\n    scrollTo(options) {\n        /** @type {?} */\n        const el = this.elementRef.nativeElement;\n        /** @type {?} */\n        const isRtl = this.dir && this.dir.value == 'rtl';\n        // Rewrite start & end offsets as right or left offsets.\n        if (options.left == null) {\n            options.left = isRtl ? options.end : options.start;\n        }\n        if (options.right == null) {\n            options.right = isRtl ? options.start : options.end;\n        }\n        // Rewrite the bottom offset as a top offset.\n        if (options.bottom != null) {\n            ((/** @type {?} */ (options))).top =\n                el.scrollHeight - el.clientHeight - options.bottom;\n        }\n        // Rewrite the right offset as a left offset.\n        if (isRtl && getRtlScrollAxisType() != 0 /* NORMAL */) {\n            if (options.left != null) {\n                ((/** @type {?} */ (options))).right =\n                    el.scrollWidth - el.clientWidth - options.left;\n            }\n            if (getRtlScrollAxisType() == 2 /* INVERTED */) {\n                options.left = options.right;\n            }\n            else if (getRtlScrollAxisType() == 1 /* NEGATED */) {\n                options.left = options.right ? -options.right : options.right;\n            }\n        }\n        else {\n            if (options.right != null) {\n                ((/** @type {?} */ (options))).left =\n                    el.scrollWidth - el.clientWidth - options.right;\n            }\n        }\n        this._applyScrollToOptions(options);\n    }\n    /**\n     * @private\n     * @param {?} options\n     * @return {?}\n     */\n    _applyScrollToOptions(options) {\n        /** @type {?} */\n        const el = this.elementRef.nativeElement;\n        if (supportsScrollBehavior()) {\n            el.scrollTo(options);\n        }\n        else {\n            if (options.top != null) {\n                el.scrollTop = options.top;\n            }\n            if (options.left != null) {\n                el.scrollLeft = options.left;\n            }\n        }\n    }\n    /**\n     * Measures the scroll offset relative to the specified edge of the viewport. This method can be\n     * used instead of directly checking scrollLeft or scrollTop, since browsers are not consistent\n     * about what scrollLeft means in RTL. The values returned by this method are normalized such that\n     * left and right always refer to the left and right side of the scrolling container irrespective\n     * of the layout direction. start and end refer to left and right in an LTR context and vice-versa\n     * in an RTL context.\n     * @param {?} from The edge to measure from.\n     * @return {?}\n     */\n    measureScrollOffset(from) {\n        /** @type {?} */\n        const LEFT = 'left';\n        /** @type {?} */\n        const RIGHT = 'right';\n        /** @type {?} */\n        const el = this.elementRef.nativeElement;\n        if (from == 'top') {\n            return el.scrollTop;\n        }\n        if (from == 'bottom') {\n            return el.scrollHeight - el.clientHeight - el.scrollTop;\n        }\n        // Rewrite start & end as left or right offsets.\n        /** @type {?} */\n        const isRtl = this.dir && this.dir.value == 'rtl';\n        if (from == 'start') {\n            from = isRtl ? RIGHT : LEFT;\n        }\n        else if (from == 'end') {\n            from = isRtl ? LEFT : RIGHT;\n        }\n        if (isRtl && getRtlScrollAxisType() == 2 /* INVERTED */) {\n            // For INVERTED, scrollLeft is (scrollWidth - clientWidth) when scrolled all the way left and\n            // 0 when scrolled all the way right.\n            if (from == LEFT) {\n                return el.scrollWidth - el.clientWidth - el.scrollLeft;\n            }\n            else {\n                return el.scrollLeft;\n            }\n        }\n        else if (isRtl && getRtlScrollAxisType() == 1 /* NEGATED */) {\n            // For NEGATED, scrollLeft is -(scrollWidth - clientWidth) when scrolled all the way left and\n            // 0 when scrolled all the way right.\n            if (from == LEFT) {\n                return el.scrollLeft + el.scrollWidth - el.clientWidth;\n            }\n            else {\n                return -el.scrollLeft;\n            }\n        }\n        else {\n            // For NORMAL, as well as non-RTL contexts, scrollLeft is 0 when scrolled all the way left and\n            // (scrollWidth - clientWidth) when scrolled all the way right.\n            if (from == LEFT) {\n                return el.scrollLeft;\n            }\n            else {\n                return el.scrollWidth - el.clientWidth - el.scrollLeft;\n            }\n        }\n    }\n}\nCdkScrollable.decorators = [\n    { type: Directive, args: [{\n                selector: '[cdk-scrollable], [cdkScrollable]'\n            },] }\n];\n/** @nocollapse */\nCdkScrollable.ctorParameters = () => [\n    { type: ElementRef },\n    { type: ScrollDispatcher },\n    { type: NgZone },\n    { type: Directionality, decorators: [{ type: Optional }] }\n];\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkScrollable.prototype._destroyed;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkScrollable.prototype._elementScrolled;\n    /**\n     * @type {?}\n     * @protected\n     */\n    CdkScrollable.prototype.elementRef;\n    /**\n     * @type {?}\n     * @protected\n     */\n    CdkScrollable.prototype.scrollDispatcher;\n    /**\n     * @type {?}\n     * @protected\n     */\n    CdkScrollable.prototype.ngZone;\n    /**\n     * @type {?}\n     * @protected\n     */\n    CdkScrollable.prototype.dir;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/scrolling/viewport-ruler.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Time in ms to throttle the resize events by default.\n * @type {?}\n */\nconst DEFAULT_RESIZE_TIME = 20;\n/**\n * Object that holds the scroll position of the viewport in each direction.\n * @record\n */\nfunction ViewportScrollPosition() { }\nif (false) {\n    /** @type {?} */\n    ViewportScrollPosition.prototype.top;\n    /** @type {?} */\n    ViewportScrollPosition.prototype.left;\n}\n/**\n * Simple utility for getting the bounds of the browser viewport.\n * \\@docs-private\n */\nclass ViewportRuler {\n    /**\n     * @param {?} _platform\n     * @param {?} ngZone\n     * @param {?=} document\n     */\n    constructor(_platform, ngZone, \n    /** @breaking-change 11.0.0 make document required */\n    document) {\n        this._platform = _platform;\n        this._document = document;\n        ngZone.runOutsideAngular((/**\n         * @return {?}\n         */\n        () => {\n            /** @type {?} */\n            const window = this._getWindow();\n            this._change = _platform.isBrowser ?\n                merge(fromEvent(window, 'resize'), fromEvent(window, 'orientationchange')) :\n                of();\n            // Note that we need to do the subscription inside `runOutsideAngular`\n            // since subscribing is what causes the event listener to be added.\n            this._invalidateCache = this.change().subscribe((/**\n             * @return {?}\n             */\n            () => this._updateViewportSize()));\n        }));\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._invalidateCache.unsubscribe();\n    }\n    /**\n     * Returns the viewport's width and height.\n     * @return {?}\n     */\n    getViewportSize() {\n        if (!this._viewportSize) {\n            this._updateViewportSize();\n        }\n        /** @type {?} */\n        const output = { width: this._viewportSize.width, height: this._viewportSize.height };\n        // If we're not on a browser, don't cache the size since it'll be mocked out anyway.\n        if (!this._platform.isBrowser) {\n            this._viewportSize = (/** @type {?} */ (null));\n        }\n        return output;\n    }\n    /**\n     * Gets a ClientRect for the viewport's bounds.\n     * @return {?}\n     */\n    getViewportRect() {\n        // Use the document element's bounding rect rather than the window scroll properties\n        // (e.g. pageYOffset, scrollY) due to in issue in Chrome and IE where window scroll\n        // properties and client coordinates (boundingClientRect, clientX/Y, etc.) are in different\n        // conceptual viewports. Under most circumstances these viewports are equivalent, but they\n        // can disagree when the page is pinch-zoomed (on devices that support touch).\n        // See https://bugs.chromium.org/p/chromium/issues/detail?id=489206#c4\n        // We use the documentElement instead of the body because, by default (without a css reset)\n        // browsers typically give the document body an 8px margin, which is not included in\n        // getBoundingClientRect().\n        /** @type {?} */\n        const scrollPosition = this.getViewportScrollPosition();\n        const { width, height } = this.getViewportSize();\n        return {\n            top: scrollPosition.top,\n            left: scrollPosition.left,\n            bottom: scrollPosition.top + height,\n            right: scrollPosition.left + width,\n            height,\n            width,\n        };\n    }\n    /**\n     * Gets the (top, left) scroll position of the viewport.\n     * @return {?}\n     */\n    getViewportScrollPosition() {\n        // While we can get a reference to the fake document\n        // during SSR, it doesn't have getBoundingClientRect.\n        if (!this._platform.isBrowser) {\n            return { top: 0, left: 0 };\n        }\n        // The top-left-corner of the viewport is determined by the scroll position of the document\n        // body, normally just (scrollLeft, scrollTop). However, Chrome and Firefox disagree about\n        // whether `document.body` or `document.documentElement` is the scrolled element, so reading\n        // `scrollTop` and `scrollLeft` is inconsistent. However, using the bounding rect of\n        // `document.documentElement` works consistently, where the `top` and `left` values will\n        // equal negative the scroll position.\n        /** @type {?} */\n        const document = this._getDocument();\n        /** @type {?} */\n        const window = this._getWindow();\n        /** @type {?} */\n        const documentElement = (/** @type {?} */ (document.documentElement));\n        /** @type {?} */\n        const documentRect = documentElement.getBoundingClientRect();\n        /** @type {?} */\n        const top = -documentRect.top || document.body.scrollTop || window.scrollY ||\n            documentElement.scrollTop || 0;\n        /** @type {?} */\n        const left = -documentRect.left || document.body.scrollLeft || window.scrollX ||\n            documentElement.scrollLeft || 0;\n        return { top, left };\n    }\n    /**\n     * Returns a stream that emits whenever the size of the viewport changes.\n     * @param {?=} throttleTime Time in milliseconds to throttle the stream.\n     * @return {?}\n     */\n    change(throttleTime = DEFAULT_RESIZE_TIME) {\n        return throttleTime > 0 ? this._change.pipe(auditTime(throttleTime)) : this._change;\n    }\n    /**\n     * Access injected document if available or fallback to global document reference\n     * @private\n     * @return {?}\n     */\n    _getDocument() {\n        return this._document || document;\n    }\n    /**\n     * Use defaultView of injected document if available or fallback to global window reference\n     * @private\n     * @return {?}\n     */\n    _getWindow() {\n        /** @type {?} */\n        const doc = this._getDocument();\n        return doc.defaultView || window;\n    }\n    /**\n     * Updates the cached viewport size.\n     * @private\n     * @return {?}\n     */\n    _updateViewportSize() {\n        /** @type {?} */\n        const window = this._getWindow();\n        this._viewportSize = this._platform.isBrowser ?\n            { width: window.innerWidth, height: window.innerHeight } :\n            { width: 0, height: 0 };\n    }\n}\nViewportRuler.decorators = [\n    { type: Injectable, args: [{ providedIn: 'root' },] }\n];\n/** @nocollapse */\nViewportRuler.ctorParameters = () => [\n    { type: Platform },\n    { type: NgZone },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT,] }] }\n];\n/** @nocollapse */ ViewportRuler.Éµprov = ÉµÉµdefineInjectable({ factory: function ViewportRuler_Factory() { return new ViewportRuler(ÉµÉµinject(Platform), ÉµÉµinject(NgZone), ÉµÉµinject(DOCUMENT, 8)); }, token: ViewportRuler, providedIn: \"root\" });\nif (false) {\n    /**\n     * Cached viewport dimensions.\n     * @type {?}\n     * @private\n     */\n    ViewportRuler.prototype._viewportSize;\n    /**\n     * Stream of viewport change events.\n     * @type {?}\n     * @private\n     */\n    ViewportRuler.prototype._change;\n    /**\n     * Subscription to streams that invalidate the cached viewport dimensions.\n     * @type {?}\n     * @private\n     */\n    ViewportRuler.prototype._invalidateCache;\n    /**\n     * Used to reference correct document/window\n     * @type {?}\n     * @protected\n     */\n    ViewportRuler.prototype._document;\n    /**\n     * @type {?}\n     * @private\n     */\n    ViewportRuler.prototype._platform;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/scrolling/virtual-scroll-viewport.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Checks if the given ranges are equal.\n * @param {?} r1\n * @param {?} r2\n * @return {?}\n */\nfunction rangesEqual(r1, r2) {\n    return r1.start == r2.start && r1.end == r2.end;\n}\n/**\n * Scheduler to be used for scroll events. Needs to fall back to\n * something that doesn't rely on requestAnimationFrame on environments\n * that don't support it (e.g. server-side rendering).\n * @type {?}\n */\nconst SCROLL_SCHEDULER = typeof requestAnimationFrame !== 'undefined' ? animationFrameScheduler : asapScheduler;\n/**\n * A viewport that virtualizes its scrolling with the help of `CdkVirtualForOf`.\n */\nclass CdkVirtualScrollViewport extends CdkScrollable {\n    /**\n     * @param {?} elementRef\n     * @param {?} _changeDetectorRef\n     * @param {?} ngZone\n     * @param {?} _scrollStrategy\n     * @param {?} dir\n     * @param {?} scrollDispatcher\n     * @param {?=} viewportRuler\n     */\n    constructor(elementRef, _changeDetectorRef, ngZone, _scrollStrategy, dir, scrollDispatcher, \n    /**\n     * @deprecated `viewportRuler` parameter to become required.\n     * @breaking-change 11.0.0\n     */\n    viewportRuler) {\n        super(elementRef, scrollDispatcher, ngZone, dir);\n        this.elementRef = elementRef;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._scrollStrategy = _scrollStrategy;\n        /**\n         * Emits when the viewport is detached from a CdkVirtualForOf.\n         */\n        this._detachedSubject = new Subject();\n        /**\n         * Emits when the rendered range changes.\n         */\n        this._renderedRangeSubject = new Subject();\n        this._orientation = 'vertical';\n        // Note: we don't use the typical EventEmitter here because we need to subscribe to the scroll\n        // strategy lazily (i.e. only if the user is actually listening to the events). We do this because\n        // depending on how the strategy calculates the scrolled index, it may come at a cost to\n        // performance.\n        /**\n         * Emits when the index of the first element visible in the viewport changes.\n         */\n        this.scrolledIndexChange = new Observable((/**\n         * @param {?} observer\n         * @return {?}\n         */\n        (observer) => this._scrollStrategy.scrolledIndexChange.subscribe((/**\n         * @param {?} index\n         * @return {?}\n         */\n        index => Promise.resolve().then((/**\n         * @return {?}\n         */\n        () => this.ngZone.run((/**\n         * @return {?}\n         */\n        () => observer.next(index)))))))));\n        /**\n         * A stream that emits whenever the rendered range changes.\n         */\n        this.renderedRangeStream = this._renderedRangeSubject.asObservable();\n        /**\n         * The total size of all content (in pixels), including content that is not currently rendered.\n         */\n        this._totalContentSize = 0;\n        /**\n         * A string representing the `style.width` property value to be used for the spacer element.\n         */\n        this._totalContentWidth = '';\n        /**\n         * A string representing the `style.height` property value to be used for the spacer element.\n         */\n        this._totalContentHeight = '';\n        /**\n         * The currently rendered range of indices.\n         */\n        this._renderedRange = { start: 0, end: 0 };\n        /**\n         * The length of the data bound to this viewport (in number of items).\n         */\n        this._dataLength = 0;\n        /**\n         * The size of the viewport (in pixels).\n         */\n        this._viewportSize = 0;\n        /**\n         * The last rendered content offset that was set.\n         */\n        this._renderedContentOffset = 0;\n        /**\n         * Whether the last rendered content offset was to the end of the content (and therefore needs to\n         * be rewritten as an offset to the start of the content).\n         */\n        this._renderedContentOffsetNeedsRewrite = false;\n        /**\n         * Whether there is a pending change detection cycle.\n         */\n        this._isChangeDetectionPending = false;\n        /**\n         * A list of functions to run after the next change detection cycle.\n         */\n        this._runAfterChangeDetection = [];\n        /**\n         * Subscription to changes in the viewport size.\n         */\n        this._viewportChanges = Subscription.EMPTY;\n        if (!_scrollStrategy) {\n            throw Error('Error: cdk-virtual-scroll-viewport requires the \"itemSize\" property to be set.');\n        }\n        // @breaking-change 11.0.0 Remove null check for `viewportRuler`.\n        if (viewportRuler) {\n            this._viewportChanges = viewportRuler.change().subscribe((/**\n             * @return {?}\n             */\n            () => {\n                this.checkViewportSize();\n            }));\n        }\n    }\n    /**\n     * The direction the viewport scrolls.\n     * @return {?}\n     */\n    get orientation() {\n        return this._orientation;\n    }\n    /**\n     * @param {?} orientation\n     * @return {?}\n     */\n    set orientation(orientation) {\n        if (this._orientation !== orientation) {\n            this._orientation = orientation;\n            this._calculateSpacerSize();\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n        super.ngOnInit();\n        // It's still too early to measure the viewport at this point. Deferring with a promise allows\n        // the Viewport to be rendered with the correct size before we measure. We run this outside the\n        // zone to avoid causing more change detection cycles. We handle the change detection loop\n        // ourselves instead.\n        this.ngZone.runOutsideAngular((/**\n         * @return {?}\n         */\n        () => Promise.resolve().then((/**\n         * @return {?}\n         */\n        () => {\n            this._measureViewportSize();\n            this._scrollStrategy.attach(this);\n            this.elementScrolled()\n                .pipe(\n            // Start off with a fake scroll event so we properly detect our initial position.\n            startWith((/** @type {?} */ (null))), \n            // Collect multiple events into one until the next animation frame. This way if\n            // there are multiple scroll events in the same frame we only need to recheck\n            // our layout once.\n            auditTime(0, SCROLL_SCHEDULER))\n                .subscribe((/**\n             * @return {?}\n             */\n            () => this._scrollStrategy.onContentScrolled()));\n            this._markChangeDetectionNeeded();\n        }))));\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this.detach();\n        this._scrollStrategy.detach();\n        // Complete all subjects\n        this._renderedRangeSubject.complete();\n        this._detachedSubject.complete();\n        this._viewportChanges.unsubscribe();\n        super.ngOnDestroy();\n    }\n    /**\n     * Attaches a `CdkVirtualForOf` to this viewport.\n     * @param {?} forOf\n     * @return {?}\n     */\n    attach(forOf) {\n        if (this._forOf) {\n            throw Error('CdkVirtualScrollViewport is already attached.');\n        }\n        // Subscribe to the data stream of the CdkVirtualForOf to keep track of when the data length\n        // changes. Run outside the zone to avoid triggering change detection, since we're managing the\n        // change detection loop ourselves.\n        this.ngZone.runOutsideAngular((/**\n         * @return {?}\n         */\n        () => {\n            this._forOf = forOf;\n            this._forOf.dataStream.pipe(takeUntil(this._detachedSubject)).subscribe((/**\n             * @param {?} data\n             * @return {?}\n             */\n            data => {\n                /** @type {?} */\n                const newLength = data.length;\n                if (newLength !== this._dataLength) {\n                    this._dataLength = newLength;\n                    this._scrollStrategy.onDataLengthChanged();\n                }\n                this._doChangeDetection();\n            }));\n        }));\n    }\n    /**\n     * Detaches the current `CdkVirtualForOf`.\n     * @return {?}\n     */\n    detach() {\n        this._forOf = null;\n        this._detachedSubject.next();\n    }\n    /**\n     * Gets the length of the data bound to this viewport (in number of items).\n     * @return {?}\n     */\n    getDataLength() {\n        return this._dataLength;\n    }\n    /**\n     * Gets the size of the viewport (in pixels).\n     * @return {?}\n     */\n    getViewportSize() {\n        return this._viewportSize;\n    }\n    // TODO(mmalerba): This is technically out of sync with what's really rendered until a render\n    // cycle happens. I'm being careful to only call it after the render cycle is complete and before\n    // setting it to something else, but its error prone and should probably be split into\n    // `pendingRange` and `renderedRange`, the latter reflecting whats actually in the DOM.\n    /**\n     * Get the current rendered range of items.\n     * @return {?}\n     */\n    getRenderedRange() {\n        return this._renderedRange;\n    }\n    /**\n     * Sets the total size of all content (in pixels), including content that is not currently\n     * rendered.\n     * @param {?} size\n     * @return {?}\n     */\n    setTotalContentSize(size) {\n        if (this._totalContentSize !== size) {\n            this._totalContentSize = size;\n            this._calculateSpacerSize();\n            this._markChangeDetectionNeeded();\n        }\n    }\n    /**\n     * Sets the currently rendered range of indices.\n     * @param {?} range\n     * @return {?}\n     */\n    setRenderedRange(range) {\n        if (!rangesEqual(this._renderedRange, range)) {\n            this._renderedRangeSubject.next(this._renderedRange = range);\n            this._markChangeDetectionNeeded((/**\n             * @return {?}\n             */\n            () => this._scrollStrategy.onContentRendered()));\n        }\n    }\n    /**\n     * Gets the offset from the start of the viewport to the start of the rendered data (in pixels).\n     * @return {?}\n     */\n    getOffsetToRenderedContentStart() {\n        return this._renderedContentOffsetNeedsRewrite ? null : this._renderedContentOffset;\n    }\n    /**\n     * Sets the offset from the start of the viewport to either the start or end of the rendered data\n     * (in pixels).\n     * @param {?} offset\n     * @param {?=} to\n     * @return {?}\n     */\n    setRenderedContentOffset(offset, to = 'to-start') {\n        // For a horizontal viewport in a right-to-left language we need to translate along the x-axis\n        // in the negative direction.\n        /** @type {?} */\n        const isRtl = this.dir && this.dir.value == 'rtl';\n        /** @type {?} */\n        const isHorizontal = this.orientation == 'horizontal';\n        /** @type {?} */\n        const axis = isHorizontal ? 'X' : 'Y';\n        /** @type {?} */\n        const axisDirection = isHorizontal && isRtl ? -1 : 1;\n        /** @type {?} */\n        let transform = `translate${axis}(${Number(axisDirection * offset)}px)`;\n        this._renderedContentOffset = offset;\n        if (to === 'to-end') {\n            transform += ` translate${axis}(-100%)`;\n            // The viewport should rewrite this as a `to-start` offset on the next render cycle. Otherwise\n            // elements will appear to expand in the wrong direction (e.g. `mat-expansion-panel` would\n            // expand upward).\n            this._renderedContentOffsetNeedsRewrite = true;\n        }\n        if (this._renderedContentTransform != transform) {\n            // We know this value is safe because we parse `offset` with `Number()` before passing it\n            // into the string.\n            this._renderedContentTransform = transform;\n            this._markChangeDetectionNeeded((/**\n             * @return {?}\n             */\n            () => {\n                if (this._renderedContentOffsetNeedsRewrite) {\n                    this._renderedContentOffset -= this.measureRenderedContentSize();\n                    this._renderedContentOffsetNeedsRewrite = false;\n                    this.setRenderedContentOffset(this._renderedContentOffset);\n                }\n                else {\n                    this._scrollStrategy.onRenderedOffsetChanged();\n                }\n            }));\n        }\n    }\n    /**\n     * Scrolls to the given offset from the start of the viewport. Please note that this is not always\n     * the same as setting `scrollTop` or `scrollLeft`. In a horizontal viewport with right-to-left\n     * direction, this would be the equivalent of setting a fictional `scrollRight` property.\n     * @param {?} offset The offset to scroll to.\n     * @param {?=} behavior The ScrollBehavior to use when scrolling. Default is behavior is `auto`.\n     * @return {?}\n     */\n    scrollToOffset(offset, behavior = 'auto') {\n        /** @type {?} */\n        const options = { behavior };\n        if (this.orientation === 'horizontal') {\n            options.start = offset;\n        }\n        else {\n            options.top = offset;\n        }\n        this.scrollTo(options);\n    }\n    /**\n     * Scrolls to the offset for the given index.\n     * @param {?} index The index of the element to scroll to.\n     * @param {?=} behavior The ScrollBehavior to use when scrolling. Default is behavior is `auto`.\n     * @return {?}\n     */\n    scrollToIndex(index, behavior = 'auto') {\n        this._scrollStrategy.scrollToIndex(index, behavior);\n    }\n    /**\n     * Gets the current scroll offset from the start of the viewport (in pixels).\n     * @param {?=} from The edge to measure the offset from. Defaults to 'top' in vertical mode and 'start'\n     *     in horizontal mode.\n     * @return {?}\n     */\n    measureScrollOffset(from) {\n        return from ?\n            super.measureScrollOffset(from) :\n            super.measureScrollOffset(this.orientation === 'horizontal' ? 'start' : 'top');\n    }\n    /**\n     * Measure the combined size of all of the rendered items.\n     * @return {?}\n     */\n    measureRenderedContentSize() {\n        /** @type {?} */\n        const contentEl = this._contentWrapper.nativeElement;\n        return this.orientation === 'horizontal' ? contentEl.offsetWidth : contentEl.offsetHeight;\n    }\n    /**\n     * Measure the total combined size of the given range. Throws if the range includes items that are\n     * not rendered.\n     * @param {?} range\n     * @return {?}\n     */\n    measureRangeSize(range) {\n        if (!this._forOf) {\n            return 0;\n        }\n        return this._forOf.measureRangeSize(range, this.orientation);\n    }\n    /**\n     * Update the viewport dimensions and re-render.\n     * @return {?}\n     */\n    checkViewportSize() {\n        // TODO: Cleanup later when add logic for handling content resize\n        this._measureViewportSize();\n        this._scrollStrategy.onDataLengthChanged();\n    }\n    /**\n     * Measure the viewport size.\n     * @private\n     * @return {?}\n     */\n    _measureViewportSize() {\n        /** @type {?} */\n        const viewportEl = this.elementRef.nativeElement;\n        this._viewportSize = this.orientation === 'horizontal' ?\n            viewportEl.clientWidth : viewportEl.clientHeight;\n    }\n    /**\n     * Queue up change detection to run.\n     * @private\n     * @param {?=} runAfter\n     * @return {?}\n     */\n    _markChangeDetectionNeeded(runAfter) {\n        if (runAfter) {\n            this._runAfterChangeDetection.push(runAfter);\n        }\n        // Use a Promise to batch together calls to `_doChangeDetection`. This way if we set a bunch of\n        // properties sequentially we only have to run `_doChangeDetection` once at the end.\n        if (!this._isChangeDetectionPending) {\n            this._isChangeDetectionPending = true;\n            this.ngZone.runOutsideAngular((/**\n             * @return {?}\n             */\n            () => Promise.resolve().then((/**\n             * @return {?}\n             */\n            () => {\n                this._doChangeDetection();\n            }))));\n        }\n    }\n    /**\n     * Run change detection.\n     * @private\n     * @return {?}\n     */\n    _doChangeDetection() {\n        this._isChangeDetectionPending = false;\n        // Apply the content transform. The transform can't be set via an Angular binding because\n        // bypassSecurityTrustStyle is banned in Google. However the value is safe, it's composed of\n        // string literals, a variable that can only be 'X' or 'Y', and user input that is run through\n        // the `Number` function first to coerce it to a numeric value.\n        this._contentWrapper.nativeElement.style.transform = this._renderedContentTransform;\n        // Apply changes to Angular bindings. Note: We must call `markForCheck` to run change detection\n        // from the root, since the repeated items are content projected in. Calling `detectChanges`\n        // instead does not properly check the projected content.\n        this.ngZone.run((/**\n         * @return {?}\n         */\n        () => this._changeDetectorRef.markForCheck()));\n        /** @type {?} */\n        const runAfterChangeDetection = this._runAfterChangeDetection;\n        this._runAfterChangeDetection = [];\n        for (const fn of runAfterChangeDetection) {\n            fn();\n        }\n    }\n    /**\n     * Calculates the `style.width` and `style.height` for the spacer element.\n     * @private\n     * @return {?}\n     */\n    _calculateSpacerSize() {\n        this._totalContentHeight =\n            this.orientation === 'horizontal' ? '' : `${this._totalContentSize}px`;\n        this._totalContentWidth =\n            this.orientation === 'horizontal' ? `${this._totalContentSize}px` : '';\n    }\n}\nCdkVirtualScrollViewport.decorators = [\n    { type: Component, args: [{\n                selector: 'cdk-virtual-scroll-viewport',\n                template: \"<!--\\n  Wrap the rendered content in an element that will be used to offset it based on the scroll\\n  position.\\n-->\\n<div #contentWrapper class=\\\"cdk-virtual-scroll-content-wrapper\\\">\\n  <ng-content></ng-content>\\n</div>\\n<!--\\n  Spacer used to force the scrolling container to the correct size for the *total* number of items\\n  so that the scrollbar captures the size of the entire data set.\\n-->\\n<div class=\\\"cdk-virtual-scroll-spacer\\\"\\n     [style.width]=\\\"_totalContentWidth\\\" [style.height]=\\\"_totalContentHeight\\\"></div>\\n\",\n                host: {\n                    'class': 'cdk-virtual-scroll-viewport',\n                    '[class.cdk-virtual-scroll-orientation-horizontal]': 'orientation === \"horizontal\"',\n                    '[class.cdk-virtual-scroll-orientation-vertical]': 'orientation !== \"horizontal\"',\n                },\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                providers: [{\n                        provide: CdkScrollable,\n                        useExisting: CdkVirtualScrollViewport,\n                    }],\n                styles: [\"cdk-virtual-scroll-viewport{display:block;position:relative;overflow:auto;contain:strict;transform:translateZ(0);will-change:scroll-position;-webkit-overflow-scrolling:touch}.cdk-virtual-scroll-content-wrapper{position:absolute;top:0;left:0;contain:content}[dir=rtl] .cdk-virtual-scroll-content-wrapper{right:0;left:auto}.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper{min-height:100%}.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>dl:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>ol:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>table:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>ul:not([cdkVirtualFor]){padding-left:0;padding-right:0;margin-left:0;margin-right:0;border-left-width:0;border-right-width:0;outline:none}.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper{min-width:100%}.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>dl:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>ol:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>table:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>ul:not([cdkVirtualFor]){padding-top:0;padding-bottom:0;margin-top:0;margin-bottom:0;border-top-width:0;border-bottom-width:0;outline:none}.cdk-virtual-scroll-spacer{position:absolute;top:0;left:0;height:1px;width:1px;transform-origin:0 0}[dir=rtl] .cdk-virtual-scroll-spacer{right:0;left:auto;transform-origin:100% 0}\\n\"]\n            }] }\n];\n/** @nocollapse */\nCdkVirtualScrollViewport.ctorParameters = () => [\n    { type: ElementRef },\n    { type: ChangeDetectorRef },\n    { type: NgZone },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [VIRTUAL_SCROLL_STRATEGY,] }] },\n    { type: Directionality, decorators: [{ type: Optional }] },\n    { type: ScrollDispatcher },\n    { type: ViewportRuler, decorators: [{ type: Optional }] }\n];\nCdkVirtualScrollViewport.propDecorators = {\n    orientation: [{ type: Input }],\n    scrolledIndexChange: [{ type: Output }],\n    _contentWrapper: [{ type: ViewChild, args: ['contentWrapper', { static: true },] }]\n};\nif (false) {\n    /**\n     * Emits when the viewport is detached from a CdkVirtualForOf.\n     * @type {?}\n     * @private\n     */\n    CdkVirtualScrollViewport.prototype._detachedSubject;\n    /**\n     * Emits when the rendered range changes.\n     * @type {?}\n     * @private\n     */\n    CdkVirtualScrollViewport.prototype._renderedRangeSubject;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkVirtualScrollViewport.prototype._orientation;\n    /**\n     * Emits when the index of the first element visible in the viewport changes.\n     * @type {?}\n     */\n    CdkVirtualScrollViewport.prototype.scrolledIndexChange;\n    /**\n     * The element that wraps the rendered content.\n     * @type {?}\n     */\n    CdkVirtualScrollViewport.prototype._contentWrapper;\n    /**\n     * A stream that emits whenever the rendered range changes.\n     * @type {?}\n     */\n    CdkVirtualScrollViewport.prototype.renderedRangeStream;\n    /**\n     * The total size of all content (in pixels), including content that is not currently rendered.\n     * @type {?}\n     * @private\n     */\n    CdkVirtualScrollViewport.prototype._totalContentSize;\n    /**\n     * A string representing the `style.width` property value to be used for the spacer element.\n     * @type {?}\n     */\n    CdkVirtualScrollViewport.prototype._totalContentWidth;\n    /**\n     * A string representing the `style.height` property value to be used for the spacer element.\n     * @type {?}\n     */\n    CdkVirtualScrollViewport.prototype._totalContentHeight;\n    /**\n     * The CSS transform applied to the rendered subset of items so that they appear within the bounds\n     * of the visible viewport.\n     * @type {?}\n     * @private\n     */\n    CdkVirtualScrollViewport.prototype._renderedContentTransform;\n    /**\n     * The currently rendered range of indices.\n     * @type {?}\n     * @private\n     */\n    CdkVirtualScrollViewport.prototype._renderedRange;\n    /**\n     * The length of the data bound to this viewport (in number of items).\n     * @type {?}\n     * @private\n     */\n    CdkVirtualScrollViewport.prototype._dataLength;\n    /**\n     * The size of the viewport (in pixels).\n     * @type {?}\n     * @private\n     */\n    CdkVirtualScrollViewport.prototype._viewportSize;\n    /**\n     * the currently attached CdkVirtualForOf.\n     * @type {?}\n     * @private\n     */\n    CdkVirtualScrollViewport.prototype._forOf;\n    /**\n     * The last rendered content offset that was set.\n     * @type {?}\n     * @private\n     */\n    CdkVirtualScrollViewport.prototype._renderedContentOffset;\n    /**\n     * Whether the last rendered content offset was to the end of the content (and therefore needs to\n     * be rewritten as an offset to the start of the content).\n     * @type {?}\n     * @private\n     */\n    CdkVirtualScrollViewport.prototype._renderedContentOffsetNeedsRewrite;\n    /**\n     * Whether there is a pending change detection cycle.\n     * @type {?}\n     * @private\n     */\n    CdkVirtualScrollViewport.prototype._isChangeDetectionPending;\n    /**\n     * A list of functions to run after the next change detection cycle.\n     * @type {?}\n     * @private\n     */\n    CdkVirtualScrollViewport.prototype._runAfterChangeDetection;\n    /**\n     * Subscription to changes in the viewport size.\n     * @type {?}\n     * @private\n     */\n    CdkVirtualScrollViewport.prototype._viewportChanges;\n    /** @type {?} */\n    CdkVirtualScrollViewport.prototype.elementRef;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkVirtualScrollViewport.prototype._changeDetectorRef;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkVirtualScrollViewport.prototype._scrollStrategy;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/scrolling/virtual-for-of.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Helper to extract size from a DOM Node.\n * @param {?} orientation\n * @param {?} node\n * @return {?}\n */\nfunction getSize(orientation, node) {\n    /** @type {?} */\n    const el = (/** @type {?} */ (node));\n    if (!el.getBoundingClientRect) {\n        return 0;\n    }\n    /** @type {?} */\n    const rect = el.getBoundingClientRect();\n    return orientation == 'horizontal' ? rect.width : rect.height;\n}\n/**\n * A directive similar to `ngForOf` to be used for rendering data inside a virtual scrolling\n * container.\n * @template T\n */\nclass CdkVirtualForOf {\n    /**\n     * @param {?} _viewContainerRef\n     * @param {?} _template\n     * @param {?} _differs\n     * @param {?} _viewport\n     * @param {?} ngZone\n     */\n    constructor(_viewContainerRef, _template, _differs, _viewport, ngZone) {\n        this._viewContainerRef = _viewContainerRef;\n        this._template = _template;\n        this._differs = _differs;\n        this._viewport = _viewport;\n        /**\n         * Emits when the rendered view of the data changes.\n         */\n        this.viewChange = new Subject();\n        /**\n         * Subject that emits when a new DataSource instance is given.\n         */\n        this._dataSourceChanges = new Subject();\n        /**\n         * The size of the cache used to store templates that are not being used for re-use later.\n         * Setting the cache size to `0` will disable caching. Defaults to 20 templates.\n         */\n        this.cdkVirtualForTemplateCacheSize = 20;\n        /**\n         * Emits whenever the data in the current DataSource changes.\n         */\n        this.dataStream = this._dataSourceChanges\n            .pipe(\n        // Start off with null `DataSource`.\n        startWith((/** @type {?} */ (null))), \n        // Bundle up the previous and current data sources so we can work with both.\n        pairwise(), \n        // Use `_changeDataSource` to disconnect from the previous data source and connect to the\n        // new one, passing back a stream of data changes which we run through `switchMap` to give\n        // us a data stream that emits the latest data from whatever the current `DataSource` is.\n        switchMap((/**\n         * @param {?} __0\n         * @return {?}\n         */\n        ([prev, cur]) => this._changeDataSource(prev, cur))), \n        // Replay the last emitted data when someone subscribes.\n        shareReplay(1));\n        /**\n         * The differ used to calculate changes to the data.\n         */\n        this._differ = null;\n        /**\n         * The template cache used to hold on ot template instancess that have been stamped out, but don't\n         * currently need to be rendered. These instances will be reused in the future rather than\n         * stamping out brand new ones.\n         */\n        this._templateCache = [];\n        /**\n         * Whether the rendered data should be updated during the next ngDoCheck cycle.\n         */\n        this._needsUpdate = false;\n        this._destroyed = new Subject();\n        this.dataStream.subscribe((/**\n         * @param {?} data\n         * @return {?}\n         */\n        data => {\n            this._data = data;\n            this._onRenderedDataChange();\n        }));\n        this._viewport.renderedRangeStream.pipe(takeUntil(this._destroyed)).subscribe((/**\n         * @param {?} range\n         * @return {?}\n         */\n        range => {\n            this._renderedRange = range;\n            ngZone.run((/**\n             * @return {?}\n             */\n            () => this.viewChange.next(this._renderedRange)));\n            this._onRenderedDataChange();\n        }));\n        this._viewport.attach(this);\n    }\n    /**\n     * The DataSource to display.\n     * @return {?}\n     */\n    get cdkVirtualForOf() {\n        return this._cdkVirtualForOf;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set cdkVirtualForOf(value) {\n        this._cdkVirtualForOf = value;\n        if (isDataSource(value)) {\n            this._dataSourceChanges.next(value);\n        }\n        else {\n            // Slice the value if its an NgIterable to ensure we're working with an array.\n            this._dataSourceChanges.next(new ArrayDataSource(isObservable(value) ? value : Array.prototype.slice.call(value || [])));\n        }\n    }\n    /**\n     * The `TrackByFunction` to use for tracking changes. The `TrackByFunction` takes the index and\n     * the item and produces a value to be used as the item's identity when tracking changes.\n     * @return {?}\n     */\n    get cdkVirtualForTrackBy() {\n        return this._cdkVirtualForTrackBy;\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    set cdkVirtualForTrackBy(fn) {\n        this._needsUpdate = true;\n        this._cdkVirtualForTrackBy = fn ?\n            (/**\n             * @param {?} index\n             * @param {?} item\n             * @return {?}\n             */\n            (index, item) => fn(index + (this._renderedRange ? this._renderedRange.start : 0), item)) :\n            undefined;\n    }\n    /**\n     * The template used to stamp out new elements.\n     * @param {?} value\n     * @return {?}\n     */\n    set cdkVirtualForTemplate(value) {\n        if (value) {\n            this._needsUpdate = true;\n            this._template = value;\n        }\n    }\n    /**\n     * Measures the combined size (width for horizontal orientation, height for vertical) of all items\n     * in the specified range. Throws an error if the range includes items that are not currently\n     * rendered.\n     * @param {?} range\n     * @param {?} orientation\n     * @return {?}\n     */\n    measureRangeSize(range, orientation) {\n        if (range.start >= range.end) {\n            return 0;\n        }\n        if (range.start < this._renderedRange.start || range.end > this._renderedRange.end) {\n            throw Error(`Error: attempted to measure an item that isn't rendered.`);\n        }\n        // The index into the list of rendered views for the first item in the range.\n        /** @type {?} */\n        const renderedStartIndex = range.start - this._renderedRange.start;\n        // The length of the range we're measuring.\n        /** @type {?} */\n        const rangeLen = range.end - range.start;\n        // Loop over all root nodes for all items in the range and sum up their size.\n        /** @type {?} */\n        let totalSize = 0;\n        /** @type {?} */\n        let i = rangeLen;\n        while (i--) {\n            /** @type {?} */\n            const view = (/** @type {?} */ (this._viewContainerRef.get(i + renderedStartIndex)));\n            /** @type {?} */\n            let j = view ? view.rootNodes.length : 0;\n            while (j--) {\n                totalSize += getSize(orientation, (/** @type {?} */ (view)).rootNodes[j]);\n            }\n        }\n        return totalSize;\n    }\n    /**\n     * @return {?}\n     */\n    ngDoCheck() {\n        if (this._differ && this._needsUpdate) {\n            // TODO(mmalerba): We should differentiate needs update due to scrolling and a new portion of\n            // this list being rendered (can use simpler algorithm) vs needs update due to data actually\n            // changing (need to do this diff).\n            /** @type {?} */\n            const changes = this._differ.diff(this._renderedItems);\n            if (!changes) {\n                this._updateContext();\n            }\n            else {\n                this._applyChanges(changes);\n            }\n            this._needsUpdate = false;\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._viewport.detach();\n        this._dataSourceChanges.next();\n        this._dataSourceChanges.complete();\n        this.viewChange.complete();\n        this._destroyed.next();\n        this._destroyed.complete();\n        for (let view of this._templateCache) {\n            view.destroy();\n        }\n    }\n    /**\n     * React to scroll state changes in the viewport.\n     * @private\n     * @return {?}\n     */\n    _onRenderedDataChange() {\n        if (!this._renderedRange) {\n            return;\n        }\n        this._renderedItems = this._data.slice(this._renderedRange.start, this._renderedRange.end);\n        if (!this._differ) {\n            this._differ = this._differs.find(this._renderedItems).create(this.cdkVirtualForTrackBy);\n        }\n        this._needsUpdate = true;\n    }\n    /**\n     * Swap out one `DataSource` for another.\n     * @private\n     * @param {?} oldDs\n     * @param {?} newDs\n     * @return {?}\n     */\n    _changeDataSource(oldDs, newDs) {\n        if (oldDs) {\n            oldDs.disconnect(this);\n        }\n        this._needsUpdate = true;\n        return newDs ? newDs.connect(this) : of();\n    }\n    /**\n     * Update the `CdkVirtualForOfContext` for all views.\n     * @private\n     * @return {?}\n     */\n    _updateContext() {\n        /** @type {?} */\n        const count = this._data.length;\n        /** @type {?} */\n        let i = this._viewContainerRef.length;\n        while (i--) {\n            /** @type {?} */\n            let view = (/** @type {?} */ (this._viewContainerRef.get(i)));\n            view.context.index = this._renderedRange.start + i;\n            view.context.count = count;\n            this._updateComputedContextProperties(view.context);\n            view.detectChanges();\n        }\n    }\n    /**\n     * Apply changes to the DOM.\n     * @private\n     * @param {?} changes\n     * @return {?}\n     */\n    _applyChanges(changes) {\n        // Rearrange the views to put them in the right location.\n        changes.forEachOperation((/**\n         * @param {?} record\n         * @param {?} adjustedPreviousIndex\n         * @param {?} currentIndex\n         * @return {?}\n         */\n        (record, adjustedPreviousIndex, currentIndex) => {\n            if (record.previousIndex == null) { // Item added.\n                // Item added.\n                /** @type {?} */\n                const view = this._insertViewForNewItem((/** @type {?} */ (currentIndex)));\n                view.context.$implicit = record.item;\n            }\n            else if (currentIndex == null) { // Item removed.\n                this._cacheView(this._detachView((/** @type {?} */ (adjustedPreviousIndex))));\n            }\n            else { // Item moved.\n                // Item moved.\n                /** @type {?} */\n                const view = (/** @type {?} */ (this._viewContainerRef.get((/** @type {?} */ (adjustedPreviousIndex)))));\n                this._viewContainerRef.move(view, currentIndex);\n                view.context.$implicit = record.item;\n            }\n        }));\n        // Update $implicit for any items that had an identity change.\n        changes.forEachIdentityChange((/**\n         * @param {?} record\n         * @return {?}\n         */\n        (record) => {\n            /** @type {?} */\n            const view = (/** @type {?} */ (this._viewContainerRef.get((/** @type {?} */ (record.currentIndex)))));\n            view.context.$implicit = record.item;\n        }));\n        // Update the context variables on all items.\n        /** @type {?} */\n        const count = this._data.length;\n        /** @type {?} */\n        let i = this._viewContainerRef.length;\n        while (i--) {\n            /** @type {?} */\n            const view = (/** @type {?} */ (this._viewContainerRef.get(i)));\n            view.context.index = this._renderedRange.start + i;\n            view.context.count = count;\n            this._updateComputedContextProperties(view.context);\n        }\n    }\n    /**\n     * Cache the given detached view.\n     * @private\n     * @param {?} view\n     * @return {?}\n     */\n    _cacheView(view) {\n        if (this._templateCache.length < this.cdkVirtualForTemplateCacheSize) {\n            this._templateCache.push(view);\n        }\n        else {\n            /** @type {?} */\n            const index = this._viewContainerRef.indexOf(view);\n            // It's very unlikely that the index will ever be -1, but just in case,\n            // destroy the view on its own, otherwise destroy it through the\n            // container to ensure that all the references are removed.\n            if (index === -1) {\n                view.destroy();\n            }\n            else {\n                this._viewContainerRef.remove(index);\n            }\n        }\n    }\n    /**\n     * Inserts a view for a new item, either from the cache or by creating a new one.\n     * @private\n     * @param {?} index\n     * @return {?}\n     */\n    _insertViewForNewItem(index) {\n        return this._insertViewFromCache(index) || this._createEmbeddedViewAt(index);\n    }\n    /**\n     * Update the computed properties on the `CdkVirtualForOfContext`.\n     * @private\n     * @param {?} context\n     * @return {?}\n     */\n    _updateComputedContextProperties(context) {\n        context.first = context.index === 0;\n        context.last = context.index === context.count - 1;\n        context.even = context.index % 2 === 0;\n        context.odd = !context.even;\n    }\n    /**\n     * Creates a new embedded view and moves it to the given index\n     * @private\n     * @param {?} index\n     * @return {?}\n     */\n    _createEmbeddedViewAt(index) {\n        // Note that it's important that we insert the item directly at the proper index,\n        // rather than inserting it and the moving it in place, because if there's a directive\n        // on the same node that injects the `ViewContainerRef`, Angular will insert another\n        // comment node which can throw off the move when it's being repeated for all items.\n        return this._viewContainerRef.createEmbeddedView(this._template, {\n            $implicit: (/** @type {?} */ (null)),\n            // It's guaranteed that the iterable is not \"undefined\" or \"null\" because we only\n            // generate views for elements if the \"cdkVirtualForOf\" iterable has elements.\n            cdkVirtualForOf: (/** @type {?} */ (this._cdkVirtualForOf)),\n            index: -1,\n            count: -1,\n            first: false,\n            last: false,\n            odd: false,\n            even: false\n        }, index);\n    }\n    /**\n     * Inserts a recycled view from the cache at the given index.\n     * @private\n     * @param {?} index\n     * @return {?}\n     */\n    _insertViewFromCache(index) {\n        /** @type {?} */\n        const cachedView = this._templateCache.pop();\n        if (cachedView) {\n            this._viewContainerRef.insert(cachedView, index);\n        }\n        return cachedView || null;\n    }\n    /**\n     * Detaches the embedded view at the given index.\n     * @private\n     * @param {?} index\n     * @return {?}\n     */\n    _detachView(index) {\n        return (/** @type {?} */ (this._viewContainerRef.detach(index)));\n    }\n}\nCdkVirtualForOf.decorators = [\n    { type: Directive, args: [{\n                selector: '[cdkVirtualFor][cdkVirtualForOf]',\n            },] }\n];\n/** @nocollapse */\nCdkVirtualForOf.ctorParameters = () => [\n    { type: ViewContainerRef },\n    { type: TemplateRef },\n    { type: IterableDiffers },\n    { type: CdkVirtualScrollViewport, decorators: [{ type: SkipSelf }] },\n    { type: NgZone }\n];\nCdkVirtualForOf.propDecorators = {\n    cdkVirtualForOf: [{ type: Input }],\n    cdkVirtualForTrackBy: [{ type: Input }],\n    cdkVirtualForTemplate: [{ type: Input }],\n    cdkVirtualForTemplateCacheSize: [{ type: Input }]\n};\nif (false) {\n    /**\n     * Emits when the rendered view of the data changes.\n     * @type {?}\n     */\n    CdkVirtualForOf.prototype.viewChange;\n    /**\n     * Subject that emits when a new DataSource instance is given.\n     * @type {?}\n     * @private\n     */\n    CdkVirtualForOf.prototype._dataSourceChanges;\n    /** @type {?} */\n    CdkVirtualForOf.prototype._cdkVirtualForOf;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkVirtualForOf.prototype._cdkVirtualForTrackBy;\n    /**\n     * The size of the cache used to store templates that are not being used for re-use later.\n     * Setting the cache size to `0` will disable caching. Defaults to 20 templates.\n     * @type {?}\n     */\n    CdkVirtualForOf.prototype.cdkVirtualForTemplateCacheSize;\n    /**\n     * Emits whenever the data in the current DataSource changes.\n     * @type {?}\n     */\n    CdkVirtualForOf.prototype.dataStream;\n    /**\n     * The differ used to calculate changes to the data.\n     * @type {?}\n     * @private\n     */\n    CdkVirtualForOf.prototype._differ;\n    /**\n     * The most recent data emitted from the DataSource.\n     * @type {?}\n     * @private\n     */\n    CdkVirtualForOf.prototype._data;\n    /**\n     * The currently rendered items.\n     * @type {?}\n     * @private\n     */\n    CdkVirtualForOf.prototype._renderedItems;\n    /**\n     * The currently rendered range of indices.\n     * @type {?}\n     * @private\n     */\n    CdkVirtualForOf.prototype._renderedRange;\n    /**\n     * The template cache used to hold on ot template instancess that have been stamped out, but don't\n     * currently need to be rendered. These instances will be reused in the future rather than\n     * stamping out brand new ones.\n     * @type {?}\n     * @private\n     */\n    CdkVirtualForOf.prototype._templateCache;\n    /**\n     * Whether the rendered data should be updated during the next ngDoCheck cycle.\n     * @type {?}\n     * @private\n     */\n    CdkVirtualForOf.prototype._needsUpdate;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkVirtualForOf.prototype._destroyed;\n    /**\n     * The view container to add items to.\n     * @type {?}\n     * @private\n     */\n    CdkVirtualForOf.prototype._viewContainerRef;\n    /**\n     * The template to use when stamping out new items.\n     * @type {?}\n     * @private\n     */\n    CdkVirtualForOf.prototype._template;\n    /**\n     * The set of available differs.\n     * @type {?}\n     * @private\n     */\n    CdkVirtualForOf.prototype._differs;\n    /**\n     * The virtual scrolling viewport that these items are being rendered in.\n     * @type {?}\n     * @private\n     */\n    CdkVirtualForOf.prototype._viewport;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/scrolling/scrolling-module.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass CdkScrollableModule {\n}\nCdkScrollableModule.decorators = [\n    { type: NgModule, args: [{\n                exports: [CdkScrollable],\n                declarations: [CdkScrollable]\n            },] }\n];\nclass ScrollingModule {\n}\nScrollingModule.decorators = [\n    { type: NgModule, args: [{\n                imports: [\n                    BidiModule,\n                    PlatformModule,\n                    CdkScrollableModule\n                ],\n                exports: [\n                    BidiModule,\n                    CdkScrollableModule,\n                    CdkFixedSizeVirtualScroll,\n                    CdkVirtualForOf,\n                    CdkVirtualScrollViewport,\n                ],\n                declarations: [\n                    CdkFixedSizeVirtualScroll,\n                    CdkVirtualForOf,\n                    CdkVirtualScrollViewport,\n                ],\n            },] }\n];\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/scrolling/public-api.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { CdkFixedSizeVirtualScroll, CdkScrollable, CdkScrollableModule, CdkVirtualForOf, CdkVirtualScrollViewport, DEFAULT_RESIZE_TIME, DEFAULT_SCROLL_TIME, FixedSizeVirtualScrollStrategy, ScrollDispatcher, ScrollingModule, VIRTUAL_SCROLL_STRATEGY, ViewportRuler, _fixedSizeVirtualScrollStrategyFactory };\n//# sourceMappingURL=scrolling.js.map\n"]}