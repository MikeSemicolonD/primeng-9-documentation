{"version":3,"sources":["webpack:///src/app/components/paginator/paginator.ts","webpack:///src/app/components/paginator/public_api.ts"],"names":["Paginator","cd","pageLinkSize","onPageChange","alwaysShow","dropdownScrollHeight","currentPageReportTemplate","totalRecords","rows","_first","ngOnInit","updatePaginatorState","ngOnChanges","simpleChange","updatePageLinks","updateFirst","updateRowsPerPageOptions","first","currentValue","rowsPerPageOptions","val","rowsPerPageItems","opt","unshift","label","value","push","String","isFirstPage","getPage","isLastPage","getPageCount","Math","ceil","calculatePageLinkBoundaries","numberOfPages","visiblePages","min","start","max","end","delta","pageLinks","boundaries","i","changePage","p","pc","state","page","pageCount","emit","Promise","resolve","then","floor","changePageToFirst","event","preventDefault","changePageToPrev","changePageToNext","changePageToLast","onPageLinkClick","onRppChange","paginatorState","replace","selector","template","changeDetection","Default","PaginatorModule","imports","exports","declarations"],"mappings":"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","file":"default~components-dataview-dataviewdemo-module~components-defer-deferdemo-module~components-dragdro~86ab25be-es5.js","sourcesContent":["import {NgModule,Component,OnInit,Input,Output,ChangeDetectorRef,EventEmitter,TemplateRef,OnChanges,SimpleChanges,ChangeDetectionStrategy} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {FormsModule} from '@angular/forms';\nimport {DropdownModule} from 'primeng/dropdown';\nimport {SelectItem} from 'primeng/api';\nimport {SharedModule} from 'primeng/api';\n\n@Component({\n    selector: 'p-paginator',\n    template: `\n        <div [class]=\"styleClass\" [ngStyle]=\"style\" [ngClass]=\"'ui-paginator ui-widget ui-widget-header ui-unselectable-text ui-helper-clearfix'\"\n            *ngIf=\"alwaysShow ? true : (pageLinks && pageLinks.length > 1)\">\n            <div class=\"ui-paginator-left-content\" *ngIf=\"templateLeft\">\n                <ng-container *ngTemplateOutlet=\"templateLeft; context: {$implicit: paginatorState}\"></ng-container>\n            </div>\n            <span class=\"ui-paginator-current\" *ngIf=\"showCurrentPageReport\">{{currentPageReport}}</span>\n            <a [attr.tabindex]=\"isFirstPage() ? null : '0'\" class=\"ui-paginator-first ui-paginator-element ui-state-default ui-corner-all\"\n                    (click)=\"changePageToFirst($event)\" (keydown.enter)=\"changePageToFirst($event)\" [ngClass]=\"{'ui-state-disabled':isFirstPage()}\" [tabindex]=\"isFirstPage() ? -1 : null\">\n                <span class=\"ui-paginator-icon pi pi-step-backward\"></span>\n            </a>\n            <a tabindex=\"0\" [attr.tabindex]=\"isFirstPage() ? null : '0'\" class=\"ui-paginator-prev ui-paginator-element ui-state-default ui-corner-all\"\n                    (click)=\"changePageToPrev($event)\" (keydown.enter)=\"changePageToPrev($event)\" [ngClass]=\"{'ui-state-disabled':isFirstPage()}\" [tabindex]=\"isFirstPage() ? -1 : null\">\n                <span class=\"ui-paginator-icon pi pi-caret-left\"></span>\n            </a>\n            <span class=\"ui-paginator-pages\">\n                <a tabindex=\"0\" *ngFor=\"let pageLink of pageLinks\" class=\"ui-paginator-page ui-paginator-element ui-state-default ui-corner-all\"\n                    (click)=\"onPageLinkClick($event, pageLink - 1)\" (keydown.enter)=\"onPageLinkClick($event, pageLink - 1)\" [ngClass]=\"{'ui-state-active': (pageLink-1 == getPage())}\">{{pageLink}}</a>\n            </span>\n            <a [attr.tabindex]=\"isLastPage() ? null : '0'\" class=\"ui-paginator-next ui-paginator-element ui-state-default ui-corner-all\"\n                    (click)=\"changePageToNext($event)\" (keydown.enter)=\"changePageToNext($event)\" [ngClass]=\"{'ui-state-disabled':isLastPage()}\" [tabindex]=\"isLastPage() ? -1 : null\">\n                <span class=\"ui-paginator-icon pi pi-caret-right\"></span>\n            </a>\n            <a [attr.tabindex]=\"isLastPage() ? null : '0'\" class=\"ui-paginator-last ui-paginator-element ui-state-default ui-corner-all\"\n                    (click)=\"changePageToLast($event)\" (keydown.enter)=\"changePageToLast($event)\" [ngClass]=\"{'ui-state-disabled':isLastPage()}\" [tabindex]=\"isLastPage() ? -1 : null\">\n                <span class=\"ui-paginator-icon pi pi-step-forward\"></span>\n            </a>\n            <p-dropdown [options]=\"rowsPerPageItems\" [(ngModel)]=\"rows\" *ngIf=\"rowsPerPageOptions\" \n                (onChange)=\"onRppChange($event)\" [appendTo]=\"dropdownAppendTo\" [scrollHeight]=\"dropdownScrollHeight\"></p-dropdown>\n            <div class=\"ui-paginator-right-content\" *ngIf=\"templateRight\">\n                <ng-container *ngTemplateOutlet=\"templateRight; context: {$implicit: paginatorState}\"></ng-container>\n            </div>\n        </div>\n    `,\n    changeDetection: ChangeDetectionStrategy.Default\n})\nexport class Paginator implements OnInit, OnChanges {\n\n    @Input() pageLinkSize: number = 5;\n\n    @Output() onPageChange: EventEmitter<any> = new EventEmitter();\n\n    @Input() style: any;\n\n    @Input() styleClass: string;\n\n    @Input() alwaysShow: boolean = true;\n    \n    @Input() templateLeft: TemplateRef<any>;\n    \n    @Input() templateRight: TemplateRef<any>;\n\n    @Input() dropdownAppendTo: any;\n\n    @Input() dropdownScrollHeight: string = '200px';\n\n    @Input() currentPageReportTemplate: string = '{currentPage} of {totalPages}';\n\n    @Input() showCurrentPageReport: boolean;\n\n    @Input() totalRecords: number = 0;\n\n    @Input() rows: number = 0;\n    \n    @Input() rowsPerPageOptions: any[];\n\n    pageLinks: number[];\n\n    rowsPerPageItems: SelectItem[];\n    \n    paginatorState: any;\n\n    _first: number = 0;\n\n    constructor(private cd: ChangeDetectorRef) {}\n    \n    ngOnInit() {\n        this.updatePaginatorState();\n    }\n\n    ngOnChanges(simpleChange: SimpleChanges) {\n        if (simpleChange.totalRecords) {\n            this.updatePageLinks();\n            this.updatePaginatorState();\n            this.updateFirst();\n            this.updateRowsPerPageOptions();\n        }\n\n        if (simpleChange.first) {\n            this._first = simpleChange.first.currentValue;\n            this.updatePageLinks();\n            this.updatePaginatorState();\n        }\n\n        if (simpleChange.rows) {\n            this.updatePageLinks();\n            this.updatePaginatorState();\n        }\n\n        if (simpleChange.rowsPerPageOptions) {\n            this.updateRowsPerPageOptions();\n        }\n    }\n\n    @Input() get first(): number {\n        return this._first;\n    }\n    set first(val:number) {\n        this._first = val;\n    }\n\n    updateRowsPerPageOptions() {\n        if (this.rowsPerPageOptions) {\n            this.rowsPerPageItems = [];\n            for (let opt of this.rowsPerPageOptions) {\n                if (typeof opt == 'object' && opt['showAll']) {\n                    this.rowsPerPageItems.unshift({label: opt['showAll'], value: this.totalRecords});\n                }\n                else {\n                    this.rowsPerPageItems.push({label: String(opt), value: opt});\n                }\n            }\n        }\n    }\n\n    isFirstPage() {\n        return this.getPage() === 0;\n    }\n\n    isLastPage() {\n        return this.getPage() === this.getPageCount() - 1;\n    }\n\n    getPageCount() {\n        return Math.ceil(this.totalRecords/this.rows)||1;\n    }\n\n    calculatePageLinkBoundaries() {\n        let numberOfPages = this.getPageCount(),\n        visiblePages = Math.min(this.pageLinkSize, numberOfPages);\n\n        //calculate range, keep current in middle if necessary\n        let start = Math.max(0, Math.ceil(this.getPage() - ((visiblePages) / 2))),\n        end = Math.min(numberOfPages - 1, start + visiblePages - 1);\n\n        //check when approaching to last page\n        var delta = this.pageLinkSize - (end - start + 1);\n        start = Math.max(0, start - delta);\n\n        return [start, end];\n    }\n\n    updatePageLinks() {\n        this.pageLinks = [];\n        let boundaries = this.calculatePageLinkBoundaries(),\n        start = boundaries[0],\n        end = boundaries[1];\n\n        for(let i = start; i <= end; i++) {\n            this.pageLinks.push(i + 1);\n        }\n    }\n\n    changePage(p :number) {\n        var pc = this.getPageCount();\n\n        if (p >= 0 && p < pc) {\n            this._first = this.rows * p;\n            var state = {\n                page: p,\n                first: this.first,\n                rows: this.rows,\n                pageCount: pc\n            };\n            this.updatePageLinks();\n\n            this.onPageChange.emit(state);\n            this.updatePaginatorState();\n        }\n    }\n\n    updateFirst() {\n        const page = this.getPage();\n        if (page > 0 && this.totalRecords && (this.first >= this.totalRecords)) {\n            Promise.resolve(null).then(() => this.changePage(page - 1));\n        }\n    }\n\n    getPage(): number {\n        return Math.floor(this.first / this.rows);\n    }\n\n    changePageToFirst(event) {\n      if (!this.isFirstPage()){\n          this.changePage(0);\n      }\n\n      event.preventDefault();\n    }\n\n    changePageToPrev(event) {\n        this.changePage(this.getPage() - 1);\n        event.preventDefault();\n    }\n\n    changePageToNext(event) {\n        this.changePage(this.getPage()  + 1);\n        event.preventDefault();\n    }\n\n    changePageToLast(event) {\n      if (!this.isLastPage()){\n          this.changePage(this.getPageCount() - 1);\n      }\n\n      event.preventDefault();\n    }\n\n    onPageLinkClick(event, page) {\n        this.changePage(page);\n        event.preventDefault();\n    }\n\n    onRppChange(event) {\n        this.changePage(this.getPage());\n    }\n    \n    updatePaginatorState() {\n        this.paginatorState = {\n            page: this.getPage(),\n            pageCount: this.getPageCount(),\n            rows: this.rows,\n            first: this.first,\n            totalRecords: this.totalRecords\n        }\n    }\n\n    get currentPageReport() {\n        return this.currentPageReportTemplate\n                .replace(\"{currentPage}\", String(this.getPage() + 1))\n                .replace(\"{totalPages}\", String(this.getPageCount()))\n                .replace(\"{first}\", String(this._first + 1))\n                .replace(\"{last}\", String(Math.min(this._first + this.rows, this.totalRecords)))\n                .replace(\"{rows}\", String(this.rows))\n                .replace(\"{totalRecords}\", String(this.totalRecords));\n    }\n}\n\n@NgModule({\n    imports: [CommonModule,DropdownModule,FormsModule,SharedModule],\n    exports: [Paginator,DropdownModule,FormsModule,SharedModule],\n    declarations: [Paginator]\n})\nexport class PaginatorModule { }\n","export * from './paginator';"]}