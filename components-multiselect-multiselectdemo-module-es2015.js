(window["webpackJsonp"] = window["webpackJsonp"] || []).push([["components-multiselect-multiselectdemo-module"],{

/***/ "./node_modules/raw-loader/dist/cjs.js!./src/app/showcase/components/multiselect/multiselectdemo.html":
/*!************************************************************************************************************!*\
  !*** ./node_modules/raw-loader/dist/cjs.js!./src/app/showcase/components/multiselect/multiselectdemo.html ***!
  \************************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("<div class=\"content-section introduction\">\n    <div>\n        <span class=\"feature-title\">MultiSelect</span>\n        <span>MultiSelect is used to select multiple items from a collection.</span>\n    </div>\n</div>\n\n<div class=\"content-section implementation\">\n    <h3 class=\"first\">Basic</h3>\n    <p-multiSelect [options]=\"cars\" [(ngModel)]=\"selectedCars1\"></p-multiSelect>\n    <p>Selected Cars: {{selectedCars1}}</p>\n\n    <h3>Templating</h3>\n    <p-multiSelect [options]=\"cars\" [(ngModel)]=\"selectedCars2\">\n        <ng-template let-value pTemplate=\"selectedItems\">\n            <div *ngFor=\"let val of value\" class=\"ui-multiselected-item-token ui-corner-all\">\n                <img src=\"assets/showcase/images/demo/car/{{val}}.png\" style=\"width:20px;vertical-align:middle;margin-right:.5em\" />\n                <span>{{val}}</span>\n            </div>\n            <span *ngIf=\"!value || value.length === 0\" class=\"ui-multiselected-empty-token ui-corner-all\">Choose</span>\n        </ng-template>\n        <ng-template let-car pTemplate=\"item\">\n            <img src=\"assets/showcase/images/demo/car/{{car.label}}.png\" style=\"width:24px;vertical-align:middle\" />\n            <div style=\"font-size:14px;float:right;margin-top:4px\">{{car.label}}</div>\n        </ng-template>\n    </p-multiSelect>\n    <p>Selected Cars: {{selectedCars2}}</p>\n\n    <h3>Virtual Scroll (10000 Items)</h3>\n    <p-multiSelect [options]=\"items\" [showToggleAll]=\"false\" [(ngModel)]=\"item\" [virtualScroll]=\"true\" [filter]=\"true\" [itemSize]=\"34\"></p-multiSelect>\n</div>\n\n<div class=\"content-section documentation\">\n    <p-tabView>\n        <p-tabPanel header=\"Documentation\">\n            <h3>CDK</h3>\n            <p>Virtual Scrolling enabled MultiSelect depends on @angular/cdk's ScrollingModule so begin with installing CDK if not already installed.</p>\n<pre>\n<code class=\"language-markup\" pCode ngNonBindable>\nnpm install @angular/cdk --save\n</code>\n</pre>\n\n            <h3>Import</h3>\n<pre>\n<code class=\"language-typescript\" pCode ngNonBindable>\nimport &#123;MultiSelectModule&#125; from 'primeng/multiselect';\n</code>\n</pre>\n\n            <h3>Getting Started</h3>\n            <p>MultiSelect requires a value to bind and a collection of options. There are two alternatives of how to define the <i>options</i> property; one way is providing a collection of SelectItem\n            instances whereas other way is providing an array of arbitrary objects along with the <i>optionLabel</i> property to specify the field name of the option. SelectItem API is designed to have more control on how\n            the options are displayed such as grouping and disabling however in most cases an arbitrary object collection will suffice. Example below demonstrates both cases.</p>\n<pre>\n<code class=\"language-markup\" pCode ngNonBindable>\n&lt;p-multiSelect [options]=\"cities1\" [(ngModel)]=\"selectedCities1\"&gt;&lt;/p-multiSelect&gt;\n\n&lt;p-multiSelect [options]=\"cities2\" [(ngModel)]=\"selectedCities2\" optionLabel=\"name\"&gt;&lt;/p-multiSelect&gt;\n</code>\n</pre>\n\n<pre>\n<code class=\"language-typescript\" pCode ngNonBindable>\nimport &#123;SelectItem&#125; from 'primeng/api';\n\ninterface City &#123;\n    name: string,\n    code: string\n&#125;\n\nexport class MyModel &#123;\n\n    cities1: SelectItem[];\n\n    cities2: City[];\n\n    selectedCities1: City[];\n\n    selectedCities2: City[];\n\n    constructor() &#123;\n        //SelectItem API with label-value pairs\n        this.cities1 = [\n            &#123;label:'New York', value:&#123;id:1, name: 'New York', code: 'NY'&#125;&#125;,\n            &#123;label:'Rome', value:&#123;id:2, name: 'Rome', code: 'RM'&#125;&#125;,\n            &#123;label:'London', value:&#123;id:3, name: 'London', code: 'LDN'&#125;&#125;,\n            &#123;label:'Istanbul', value:&#123;id:4, name: 'Istanbul', code: 'IST'&#125;&#125;,\n            &#123;label:'Paris', value:&#123;id:5, name: 'Paris', code: 'PRS'&#125;&#125;\n        ];\n\n        //An array of cities\n        this.cities2 = [\n            &#123;name: 'New York', code: 'NY'&#125;,\n            &#123;name: 'Rome', code: 'RM'&#125;,\n            &#123;name: 'London', code: 'LDN'&#125;,\n            &#123;name: 'Istanbul', code: 'IST'&#125;,\n            &#123;name: 'Paris', code: 'PRS'&#125;\n        ];\n    &#125;\n\n&#125;\n</code>\n</pre>\n\n            <h3>Model Driven Forms</h3>\n            <p>MultiSelect can be used in a model driven form as well.</p>\n<pre>\n<code class=\"language-markup\" pCode ngNonBindable>\n&lt;p-multiSelect [options]=\"cities\" formControlName=\"selectedCities\"&gt;&lt;/p-multiSelect&gt;\n</code>\n</pre>\n\n            <h3>Disabled Options</h3>\n            <p>Particular options can be prevented from selection using the <i>disabled</i> property of SelectItem API.</p>\n\n            <h3>Templating</h3>\n            <p>Label of a selectitem is displayed by default next to the checkbox in the overlay panel and it is possible to customize\n            the content using templating. The ngTemplate receives the selectitem as the implicit variable.</p>\n\n            <p>In addition selectedItems template can be used to customize the selected values display instead of the default comma separated list.</p>\n<pre>\n<code class=\"language-markup\" pCode ngNonBindable>\n&lt;p-multiSelect [options]=\"cars\" [(ngModel)]=\"selectedCars2\"&gt;\n    &lt;ng-template let-selectedCars pTemplate=\"selectedItems\"&gt;\n        &lt;span *ngFor=\"let selectedCar of selectedCars\"&gt;&#123;&#123;car.brand&#125;&#125;&lt;/span&gt;\n    &lt;/ng-template&gt;\n    &lt;ng-template let-car let-i=\"index\" pTemplate=\"item\"&gt;\n        {{i}}\n        &lt;img src=\"assets/showcase/images/demo/car/&#123;&#123;car.label&#125;&#125;.png\" style=\"width:24px;display:inline-block;vertical-align:middle\"/&gt;\n        &lt;div style=\"font-size:14px;float:right;margin-top:4px\"&gt;&#123;&#123;car.label&#125;&#125;&lt;/div&gt;\n    &lt;/ng-template&gt;\n&lt;/p-multiSelect&gt;\n&lt;p&gt;Selected Cars: &#123;&#123;selectedCars2&#125;&#125;&lt;/p&gt;\n</code>\n</pre>\n\n            <h3>Filtering</h3>\n            <p>Options can be filtered using an input field in the overlay by enabling the <i>filter</i> property. By default filtering is done against\n                label of the SelectItem and filterBy property is available to choose one or more properties of the SelectItem API.</p>\n<pre>\n<code class=\"language-markup\" pCode ngNonBindable>\n&lt;p-multiSelect [options]=\"cities\" [(ngModel)]=\"selectedCities\" [filter]=\"true\"&gt;&lt;/p-multiSelect&gt;\n&lt;p-multiSelect [options]=\"cities\" [(ngModel)]=\"selectedCities\" [filter]=\"true\" filterBy=\"label,value.name\"&gt;&lt;/p-multiSelect&gt;\n</code>\n</pre>\n\n            <h3>Change Detection</h3>\n            <p>MultiSelect detects changes to options and selected values using setters so when changing your model,\n                prefer creating a new array reference instead of manipulating an existing array.</p>\n\n            <h3>Header and Footer</h3>\n            <p><i>p-header</i> and <i>p-footer</i> elements can be used display custom content inside the header and footer sections.</p>\n<pre>\n<code class=\"language-markup\" pCode ngNonBindable>\n&lt;p-multiSelect [options]=\"cities\" formControlName=\"selectedCities\"&gt;\n    &lt;p-header&gt;\n        //Header content\n    &lt;/p-header&gt;\n    &lt;p-footer&gt;\n        //Footer content\n    &lt;/p-footer&gt;\n&lt;/p-multiSelect&gt;\n</code>\n</pre>\n\n            <h3>Virtual Scrolling</h3>\n            <p>VirtualScrolling is an efficient way of rendering the options by displaying a small subset of data in the viewport at any time. When dealing with huge number of options, it is suggested to enable VirtualScrolling\n                to avoid performance issues. Usage is simple as setting <i>virtualScroll</i> property to true and defining itemSize to specify the height of an item.</p>\n<pre>\n<code class=\"language-markup\" pCode ngNonBindable>\n&lt;p-multiSelect [options]=\"cities\" formControlName=\"selectedCities\" [virtualScroll]=\"true\" itemSize=\"30\"&gt;&lt;/p-multiSelect&gt;\n</code>\n</pre>\n\n            <h3>Animation Configuration</h3>\n            <p>Transition of the open and hide animations can be customized using the showTransitionOptions and hideTransitionOptions properties,\n                example below disables the animations altogether.</p>\n<pre>\n<code class=\"language-markup\" pCode ngNonBindable>\n&lt;p-multiSelect [options]=\"cities\" formControlName=\"selectedCities\" [showTransitionOptions]=\"'0ms'\" [hideTransitionOptions]=\"'0ms'\"&gt;&lt;/p-multiSelect&gt;\n</code>\n</pre>\n\n            <h3>Properties</h3>\n            <div class=\"doc-tablewrapper\">\n                <table class=\"doc-table\">\n                    <thead>\n                    <tr>\n                        <th>Name</th>\n                        <th>Type</th>\n                        <th>Default</th>\n                        <th>Description</th>\n                    </tr>\n                    </thead>\n                    <tbody>\n                        <tr>\n                            <td>options</td>\n                            <td>array</td>\n                            <td>null</td>\n                            <td>An array of objects to display as the available options.</td>\n                        </tr>\n                        <tr>\n                            <td>optionLabel</td>\n                            <td>string</td>\n                            <td>null</td>\n                            <td>Name of the label field of an option when an arbitrary objects instead of SelectItems are used as options.</td>\n                        </tr>\n                        <tr>\n                            <td>disabled</td>\n                            <td>boolean</td>\n                            <td>false</td>\n                            <td>When present, it specifies that the element should be disabled.</td>\n                        </tr>\n                        <tr>\n                            <td>readonly</td>\n                            <td>boolean</td>\n                            <td>false</td>\n                            <td>When present, it specifies that the component cannot be edited.</td>\n                        </tr>\n                        <tr>\n                            <td>filter</td>\n                            <td>boolean</td>\n                            <td>true</td>\n                            <td>When specified, displays an input field to filter the items on keyup.</td>\n                        </tr>\n                        <tr>\n                            <td>filterBy</td>\n                            <td>string</td>\n                            <td>label</td>\n                            <td>When filtering is enabled, filterBy decides which field or fields (comma separated) to search against.</td>\n                        </tr>\n                        <tr>\n                            <td>filterPlaceHolder</td>\n                            <td>string</td>\n                            <td>null</td>\n                            <td>Defines placeholder of the filter input.</td>\n                        </tr>\n                        <tr>\n                            <td>filterMatchMode</td>\n                            <td>string</td>\n                            <td>contains</td>\n                            <td>Defines how the items are filtered, valid values are \"contains\" (default) \"startsWith\", \"endsWith\", \"equals\", \"notEquals\", \"in\", \"lt\", \"lte\", \"gt\" and \"gte\".</td>\n                        </tr>\n                        <tr>\n                            <td>filterLocale</td>\n                            <td>string</td>\n                            <td>undefined</td>\n                            <td>Locale to use in filtering. The default locale is the host environment's current locale.</td>\n                        </tr>\n                        <tr>\n                            <td>defaultLabel</td>\n                            <td>string</td>\n                            <td>Choose</td>\n                            <td>Label to display when there are no selections.</td>\n                        </tr>\n                        <tr>\n                            <td>appendTo</td>\n                            <td>any</td>\n                            <td>null</td>\n                            <td>Target element to attach the overlay, valid values are \"body\" or a local ng-template variable of another element (note: use binding with brackets for template variables, e.g. [appendTo]=\"mydiv\" for a div element having #mydiv as variable name).</td>\n                        </tr>\n                        <tr>\n                            <td>style</td>\n                            <td>object</td>\n                            <td>null</td>\n                            <td>Inline style of the element.</td>\n                        </tr>\n                        <tr>\n                            <td>styleClass</td>\n                            <td>string</td>\n                            <td>null</td>\n                            <td>Style class of the element.</td>\n                        </tr>\n                        <tr>\n                            <td>panelStyle</td>\n                            <td>object</td>\n                            <td>null</td>\n                            <td>Inline style of the overlay panel.</td>\n                        </tr>\n                        <tr>\n                            <td>scrollHeight</td>\n                            <td>string</td>\n                            <td>200px</td>\n                            <td>Height of the viewport in pixels, a scrollbar is defined if height of list exceeds this value.</td>\n                        </tr>\n                        <tr>\n                            <td>overlayVisible</td>\n                            <td>boolean</td>\n                            <td>false</td>\n                            <td>Specifies the visibility of the options panel.</td>\n                        </tr>\n                        <tr>\n                            <td>tabindex</td>\n                            <td>number</td>\n                            <td>null</td>\n                            <td>Index of the element in tabbing order.</td>\n                        </tr>\n                        <tr>\n                            <td>dataKey</td>\n                            <td>string</td>\n                            <td>null</td>\n                            <td>A property to uniquely identify a value in options.</td>\n                        </tr>\n                        <tr>\n                            <td>name</td>\n                            <td>string</td>\n                            <td>null</td>\n                            <td>Name of the input element.</td>\n                        </tr>\n                        <tr>\n                            <td>ariaLabelledBy</td>\n                            <td>string</td>\n                            <td>null</td>\n                            <td>Establishes relationships between the component and label(s) where its value should be one or more element IDs.</td>\n                        </tr>\n                        <tr>\n                            <td>inputId</td>\n                            <td>string</td>\n                            <td>null</td>\n                            <td>Identifier of the focus input to match a label defined for the component.</td>\n                        </tr>\n                        <tr>\n                            <td>displaySelectedLabel</td>\n                            <td>boolean</td>\n                            <td>true</td>\n                            <td>Whether to show labels of selected item labels or use default label.</td>\n                        </tr>\n                        <tr>\n                            <td>maxSelectedLabels</td>\n                            <td>number</td>\n                            <td>3</td>\n                            <td>Decides how many selected item labels to show at most.</td>\n                        </tr>\n                        <tr>\n                            <td>selectedItemsLabel</td>\n                            <td>string</td>\n                            <td>&#123;0&#125; items selected</td>\n                            <td>Label to display after exceeding max selected labels.</td>\n                        </tr>\n                        <tr>\n                            <td>showToggleAll</td>\n                            <td>boolean</td>\n                            <td>true</td>\n                            <td>Whether to show the checkbox at header to toggle all items at once.</td>\n                        </tr>\n                        <tr>\n                            <td>resetFilterOnHide</td>\n                            <td>boolean</td>\n                            <td>false</td>\n                            <td>Clears the filter value when hiding the dropdown.</td>\n                        </tr>\n                        <tr>\n                            <td>dropdownIcon</td>\n                            <td>string</td>\n                            <td>pi pi-chevron-down</td>\n                            <td>Icon class of the dropdown icon.</td>\n                        </tr>\n                        <tr>\n                            <td>emptyFilterMessage</td>\n                            <td>string</td>\n                            <td>No results found</td>\n                            <td>Text to display when filtering does not return any results.</td>\n                        </tr>\n                        <tr>\n                            <td>showHeader</td>\n                            <td>boolean</td>\n                            <td>true</td>\n                            <td>Whether to show the header.</td>\n                        </tr>\n                        <tr>\n                            <td>selectionLimit</td>\n                            <td>number</td>\n                            <td>null</td>\n                            <td>Number of maximum options that can be selected.</td>\n                        </tr>\n                        <tr>\n                            <td>baseZIndex</td>\n                            <td>number</td>\n                            <td>0</td>\n                            <td>Base zIndex value to use in layering.</td>\n                        </tr>\n                        <tr>\n                            <td>autoZIndex</td>\n                            <td>boolean</td>\n                            <td>true</td>\n                            <td>Whether to automatically manage layering.</td>\n                        </tr>\n                        <tr>\n                            <td>showTransitionOptions</td>\n                            <td>string</td>\n                            <td>225ms ease-out</td>\n                            <td>Transition options of the show animation.</td>\n                        </tr>\n                        <tr>\n                            <td>hideTransitionOptions</td>\n                            <td>string</td>\n                            <td>195ms ease-in</td>\n                            <td>Transition options of the hide animation.</td>\n                        </tr>\n                        <tr>\n                            <td>itemSize</td>\n                            <td>number</td>\n                            <td>null</td>\n                            <td>Height of an item in the list for VirtualScrolling.</td>\n                        </tr>\n                        <tr>\n                            <td>virtualScroll</td>\n                            <td>boolean</td>\n                            <td>false</td>\n                            <td>Whether the data should be loaded on demand during scroll.</td>\n                        </tr>\n                        <tr>\n                            <td>ariaFilterLabel</td>\n                            <td>string</td>\n                            <td>null</td>\n                            <td>Defines a string that labels the filter input.</td>\n                        </tr>\n                        <tr>\n                            <td>tooltip</td>\n                            <td>any</td>\n                            <td>null</td>\n                            <td>Advisory information to display in a tooltip on hover.</td>\n                        </tr>\n                        <tr>\n                            <td>tooltipStyleClass</td>\n                            <td>string</td>\n                            <td>null</td>\n                            <td>Style class of the tooltip.</td>\n                        </tr>\n                        <tr>\n                            <td>tooltipPosition</td>\n                            <td>string</td>\n                            <td>top</td>\n                            <td>Position of the tooltip, valid values are right, left, top and bottom.</td>\n                        </tr>\n                        <tr>\n                            <td>tooltipPositionStyle</td>\n                            <td>string</td>\n                            <td>absolute</td>\n                            <td>Type of CSS position.</td>\n                        </tr>\n                        <tr>\n                            <td>autofocusFilter</td>\n                            <td>boolean</td>\n                            <td>false</td>\n                            <td>Applies focus to the filter element when the overlay is shown.</td>\n                        </tr>\n                    </tbody>\n                </table>\n            </div>\n\n            <h3>Events</h3>\n            <div class=\"doc-tablewrapper\">\n                <table class=\"doc-table\">\n                    <thead>\n                    <tr>\n                        <th>Name</th>\n                        <th>Parameters</th>\n                        <th>Description</th>\n                    </tr>\n                    </thead>\n                    <tbody>\n                        <tr>\n                            <td>onClick</td>\n                            <td>event: Click event</td>\n                            <td>Callback to invoke when component is clicked.</td>\n                        </tr>\n                        <tr>\n                            <td>onChange</td>\n                            <td>event.originalEvent: browser event<br />\n                                event.value: Current selected values<br />\n                                event.itemValue: Toggled item value\n                            </td>\n                            <td>Callback to invoke when value changes.</td>\n                        </tr>\n                        <tr>\n                            <td>onFocus</td>\n                            <td>event.originalEvent: browser event</td>\n                            <td>Callback to invoke when multiselect receives focus.</td>\n                        </tr>\n                        <tr>\n                            <td>onBlur</td>\n                            <td>event.originalEvent: browser event</td>\n                            <td>Callback to invoke when multiselect loses focus.</td>\n                        </tr>\n                        <tr>\n                            <td>onPanelShow</td>\n                            <td>-</td>\n                            <td>Callback to invoke when overlay panel becomes visible.</td>\n                        </tr>\n                        <tr>\n                            <td>onPanelHide</td>\n                            <td>-</td>\n                            <td>Callback to invoke when overlay panel becomes hidden.</td>\n                        </tr>\n                    </tbody>\n                </table>\n            </div>\n\n            <h3>Styling</h3>\n            <p>Following is the list of structural style classes, for theming classes visit <a href=\"#\" [routerLink]=\"['/theming']\">theming page</a>.</p>\n            <div class=\"doc-tablewrapper\">\n                <table class=\"doc-table\">\n                    <thead>\n                        <tr>\n                            <th>Name</th>\n                            <th>Element</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        <tr>\n                            <td>ui-multiselect</td>\n                            <td>Container element.</td>\n                        </tr>\n                        <tr>\n                            <td>ui-multiselect-label-container</td>\n                            <td>Container of the label to display selected items.</td>\n                        </tr>\n                        <tr>\n                            <td>ui-multiselect-label</td>\n                            <td>Label to display selected items.</td>\n                        </tr>\n                        <tr>\n                            <td>ui-multiselect-trigger</td>\n                            <td>Dropdown button.</td>\n                        </tr>\n                        <tr>\n                            <td>ui-multiselect-filter-container</td>\n                            <td>Container of filter input.</td>\n                        </tr>\n                        <tr>\n                            <td>ui-multiselect-panel</td>\n                            <td>Overlay panel for items.</td>\n                        </tr>\n                        <tr>\n                            <td>ui-multiselect-items</td>\n                            <td>List container of items.</td>\n                        </tr>\n                        <tr>\n                            <td>ui-multiselect-item</td>\n                            <td>An item in the list.</td>\n                        </tr>\n                        <tr>\n                            <td>ui-multiselect-open</td>\n                            <td>Container element when overlay is visible.</td>\n                        </tr>\n                    </tbody>\n                </table>\n            </div>\n\n            <h3>Dependencies</h3>\n            <p>Angular CDK.</p>\n        </p-tabPanel>\n\n        <p-tabPanel header=\"Source\">\n            <a href=\"https://github.com/primefaces/primeng/tree/master/src/app/showcase/components/multiselect\" class=\"btn-viewsource\" target=\"_blank\">\n                <span>View on GitHub</span>\n            </a>\n            <a href=\"https://stackblitz.com/edit/primeng-multiselect-demo\" class=\"btn-viewsource\" style=\"margin-left: .5em;\" target=\"_blank\">\n                <span>Edit in StackBlitz</span>\n            </a>\n<pre>\n<code class=\"language-markup\" pCode ngNonBindable>\n&lt;h3 class=\"first\"&gt;Basic&lt;/h3&gt;\n&lt;p-multiSelect [options]=\"cars\" [(ngModel)]=\"selectedCars1\"&gt;&lt;/p-multiSelect&gt;\n&lt;p&gt;Selected Cars: &#123;&#123;selectedCars1&#125;&#125;&lt;/p&gt;\n\n&lt;h3&gt;Template&lt;/h3&gt;\n&lt;p-multiSelect [options]=\"cars\" [(ngModel)]=\"selectedCars2\"&gt;\n    &lt;ng-template let-value pTemplate=\"selectedItems\"&gt;\n        &lt;div *ngFor=\"let val of value\" class=\"ui-multiselected-item-token ui-corner-all\"&gt;\n            &lt;img src=\"assets/showcase/images/demo/car/&#123;&#123;val&#125;&#125;.png\" style=\"width:20px;vertical-align:middle;margin-right:.5em\" /&gt;\n            &lt;span&gt;&#123;&#123;val&#125;&#125;&lt;/span&gt;\n        &lt;/div&gt;\n        &lt;span *ngIf=\"!value || value.length === 0\" class=\"ui-multiselected-empty-token ui-corner-all\"&gt;Choose&lt;/span&gt;\n    &lt;/ng-template&gt;\n    &lt;ng-template let-car pTemplate=\"item\"&gt;\n        &lt;img src=\"assets/showcase/images/demo/car/&#123;&#123;car.label&#125;&#125;.png\" style=\"width:24px;display:inline-block;vertical-align:middle\"/&gt;\n        &lt;div style=\"font-size:14px;float:right;margin-top:4px\"&gt;&#123;&#123;car.label&#125;&#125;&lt;/div&gt;\n    &lt;/ng-template&gt;\n&lt;/p-multiSelect&gt;\n&lt;p&gt;Selected Cars: &#123;&#123;selectedCars2&#125;&#125;&lt;/p&gt;\n\n&lt;h3&gt;Virtual Scroll (10000 Items)&lt;/h3&gt;\n&lt;p-multiSelect [options]=\"items\" [showToggleAll]=\"false\" [(ngModel)]=\"item\" [virtualScroll]=\"true\" [itemSize]=\"34\" [filter]=\"false\"&gt;&lt;/p-multiSelect&gt;\n</code>\n</pre>\n\n<pre>\n<code class=\"language-typescript\" pCode ngNonBindable>\n@Component(&#123;\n    templateUrl: './multiselectdemo.html',\n    styles: [`\n        :host ::ng-deep .ui-multiselected-item-token,\n        :host ::ng-deep .ui-multiselected-empty-token &#123;\n            padding: 2px 4px;\n            margin: 0 0.286em 0 0;\n            display: inline-block;\n            vertical-align:middle;\n            height: 1.857em;\n        &#125;\n\n        :host ::ng-deep .ui-multiselected-item-token &#123;\n            background: #007ad9;\n            color: #ffffff;\n        &#125;\n\n        :host ::ng-deep .ui-multiselected-empty-token &#123;\n            background: #d95f00;\n            color: #ffffff;\n        &#125;\n    `]\n&#125;)\nexport class MultiSelectDemo &#123;\n\n    cars: SelectItem[];\n\n    selectedCars1: string[] = [];\n\n    selectedCars2: string[] = [];\n\n    items: SelectItem[];\n\n    item: string;\n\n    constructor() &#123;\n        this.cars = [\n            &#123;label: 'Audi', value: 'Audi'&#125;,\n            &#123;label: 'BMW', value: 'BMW'&#125;,\n            &#123;label: 'Fiat', value: 'Fiat'&#125;,\n            &#123;label: 'Ford', value: 'Ford'&#125;,\n            &#123;label: 'Honda', value: 'Honda'&#125;,\n            &#123;label: 'Jaguar', value: 'Jaguar'&#125;,\n            &#123;label: 'Mercedes', value: 'Mercedes'&#125;,\n            &#123;label: 'Renault', value: 'Renault'&#125;,\n            &#123;label: 'VW', value: 'VW'&#125;,\n            &#123;label: 'Volvo', value: 'Volvo'&#125;,\n        ];\n\n        this.items = [];\n        for (let i = 0; i &lt; 10000; i++) &#123;\n            this.items.push(&#123;label: 'Item ' + i, value: 'Item ' + i&#125;);\n        &#125;\n    &#125;\n&#125;\n</code>\n</pre>\n        </p-tabPanel>\n        <p-tabPanel header=\"StackBlitz\">\n            <ng-template pTemplate=\"content\">\n                <iframe src=\"https://stackblitz.com/edit/primeng-multiselect-demo?embed=1\" style=\"width: 100%; height: 768px; border: none;\"></iframe>\n            </ng-template>\n        </p-tabPanel>\n    </p-tabView>\n</div>\n");

/***/ }),

/***/ "./src/app/showcase/components/multiselect/multiselectdemo-routing.module.ts":
/*!***********************************************************************************!*\
  !*** ./src/app/showcase/components/multiselect/multiselectdemo-routing.module.ts ***!
  \***********************************************************************************/
/*! exports provided: MultiSelectDemoRoutingModule */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MultiSelectDemoRoutingModule", function() { return MultiSelectDemoRoutingModule; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm2015/router.js");
/* harmony import */ var _multiselectdemo__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./multiselectdemo */ "./src/app/showcase/components/multiselect/multiselectdemo.ts");




let MultiSelectDemoRoutingModule = class MultiSelectDemoRoutingModule {
};
MultiSelectDemoRoutingModule = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["NgModule"])({
        imports: [
            _angular_router__WEBPACK_IMPORTED_MODULE_2__["RouterModule"].forChild([
                { path: '', component: _multiselectdemo__WEBPACK_IMPORTED_MODULE_3__["MultiSelectDemo"] }
            ])
        ],
        exports: [
            _angular_router__WEBPACK_IMPORTED_MODULE_2__["RouterModule"]
        ]
    })
], MultiSelectDemoRoutingModule);



/***/ }),

/***/ "./src/app/showcase/components/multiselect/multiselectdemo.module.ts":
/*!***************************************************************************!*\
  !*** ./src/app/showcase/components/multiselect/multiselectdemo.module.ts ***!
  \***************************************************************************/
/*! exports provided: MultiSelectDemoModule */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MultiSelectDemoModule", function() { return MultiSelectDemoModule; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/common */ "./node_modules/@angular/common/fesm2015/common.js");
/* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/forms */ "./node_modules/@angular/forms/fesm2015/forms.js");
/* harmony import */ var _multiselectdemo__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./multiselectdemo */ "./src/app/showcase/components/multiselect/multiselectdemo.ts");
/* harmony import */ var _multiselectdemo_routing_module__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./multiselectdemo-routing.module */ "./src/app/showcase/components/multiselect/multiselectdemo-routing.module.ts");
/* harmony import */ var primeng_multiselect__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! primeng/multiselect */ "./src/app/components/multiselect/public_api.ts");
/* harmony import */ var primeng_tabview__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! primeng/tabview */ "./src/app/components/tabview/public_api.ts");
/* harmony import */ var primeng_codehighlighter__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! primeng/codehighlighter */ "./src/app/components/codehighlighter/public_api.ts");









let MultiSelectDemoModule = class MultiSelectDemoModule {
};
MultiSelectDemoModule = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["NgModule"])({
        imports: [
            _angular_common__WEBPACK_IMPORTED_MODULE_2__["CommonModule"],
            _angular_forms__WEBPACK_IMPORTED_MODULE_3__["FormsModule"],
            _multiselectdemo_routing_module__WEBPACK_IMPORTED_MODULE_5__["MultiSelectDemoRoutingModule"],
            primeng_multiselect__WEBPACK_IMPORTED_MODULE_6__["MultiSelectModule"],
            primeng_tabview__WEBPACK_IMPORTED_MODULE_7__["TabViewModule"],
            primeng_codehighlighter__WEBPACK_IMPORTED_MODULE_8__["CodeHighlighterModule"]
        ],
        declarations: [
            _multiselectdemo__WEBPACK_IMPORTED_MODULE_4__["MultiSelectDemo"]
        ]
    })
], MultiSelectDemoModule);



/***/ }),

/***/ "./src/app/showcase/components/multiselect/multiselectdemo.ts":
/*!********************************************************************!*\
  !*** ./src/app/showcase/components/multiselect/multiselectdemo.ts ***!
  \********************************************************************/
/*! exports provided: MultiSelectDemo */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MultiSelectDemo", function() { return MultiSelectDemo; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm2015/core.js");


let MultiSelectDemo = class MultiSelectDemo {
    constructor() {
        this.selectedCars1 = [];
        this.selectedCars2 = [];
        this.cars = [
            { label: 'Audi', value: 'Audi' },
            { label: 'BMW', value: 'BMW' },
            { label: 'Fiat', value: 'Fiat' },
            { label: 'Ford', value: 'Ford' },
            { label: 'Honda', value: 'Honda' },
            { label: 'Jaguar', value: 'Jaguar' },
            { label: 'Mercedes', value: 'Mercedes' },
            { label: 'Renault', value: 'Renault' },
            { label: 'VW', value: 'VW' },
            { label: 'Volvo', value: 'Volvo' },
        ];
        this.items = [];
        for (let i = 0; i < 10000; i++) {
            this.items.push({ label: 'Item ' + i, value: 'Item ' + i });
        }
    }
};
MultiSelectDemo = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
        template: Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__importDefault"])(__webpack_require__(/*! raw-loader!./multiselectdemo.html */ "./node_modules/raw-loader/dist/cjs.js!./src/app/showcase/components/multiselect/multiselectdemo.html")).default,
        styles: ["\n        :host ::ng-deep .ui-multiselect {\n            min-width: 15em;\n        }\n\n        :host ::ng-deep .ui-multiselected-item-token,\n        :host ::ng-deep .ui-multiselected-empty-token {\n            padding: 2px 4px;\n            margin: 0 0.286em 0 0;\n            display: inline-block;\n            vertical-align:middle;\n            height: 1.857em;\n        }\n\n        :host ::ng-deep .ui-multiselected-item-token {\n            background: #007ad9;\n            color: #ffffff;\n        }\n\n        :host ::ng-deep .ui-multiselected-empty-token {\n            background: #d95f00;\n            color: #ffffff;\n        }\n    "]
    }),
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:paramtypes", [])
], MultiSelectDemo);



/***/ })

}]);
//# sourceMappingURL=components-multiselect-multiselectdemo-module-es2015.js.map